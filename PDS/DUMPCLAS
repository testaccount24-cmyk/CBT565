./ ADD NAME=$$README 0105-02143-02156-1038-00100-00080-00000-BC0THOR
************************************************************************
* DUMPREAD: A class in reading Abend-Aid dumps for COBOL programers.   *
*           It is fairly non-technical, and takes two days to present  *
*           as given here. The materials I hand out are a textbook, a  *
*           set of program compile and linkedit listings, and 10-12    *
*           dumps. The $INSTRUC member describes how to prepare the    *
*           handout materials.                                         *
*          .The first day, I teach from the textbook using a blackboard*
*           and planning to finish with an hour or so to go through the*
*           first dump. This allows me to model the process of locating*
*           the abending instruction, and then locating and evaluating *
*           every data field in the failing instruction. The @DUMPS    *
*           member has detailed information for the presenter on each  *
*           of the dumps, and should be reviewed and updated before    *
*           each class.                                                *
*          .The second day I have each student (or a pair of students  *
*           if there are more than 11) go through a dump. They first   *
*           locate the failing instruction, then find each data field  *
*           referenced in the instruction, and evaluate the data found.*
*           I normally put their findings on the blackboard and allow  *
*           them to remain seated with their class materials. Also, I  *
*           try to permit them to go astray, expecting other students  *
*           to offer corrections, although you can only go so far with *
*           this.                                                      *
*          .The dumps are primarily S0C7, and all use the same main    *
*           COBOL program. Each dump abends on a different instruction,*
*           however, and most of the failing instructions contain an   *
*           indexed data field and a subscripted data field, giving 4  *
*           fields to be found and evaluated for validity. Data types  *
*           vary among data fields to give practice in validating data.*
*           I have each student locate all four data elements, even if *
*           it is obvious that the first or second caused the failure. *
*           Please print out the @DUMPS member and review it after the *
*           first set of class materials is printed.                   *
************************************************************************
$$README  This file
$INSTRUC  Text file describing how to create the handout materials.
ABNDCOB   COBOL main program in which most of the abends occur.
CARD12    Text for pages 1-2 of a folding "card"
CARD34    Text for pages 3-4 of a folding "card"
CARD56    Text for pages 5-6 of a folding "card"
CARD78    Text for pages 7-8 of a folding "card"
COBABEND  A COBOL subroutine called by the main program.
COPYDUMP  A COBOL program that is run when creating the handout stuff.
COPYNUM   A COBOL program that is run when creating the handout stuff.
CRSDESC   Text file that describes the course objectives.
CVTDATE   An assembler language subroutine called by COBABEND.
EDITMAC   An EDIT macro that can simplify JCL changes
JOB000    JCL to create the class libraries and utility programs.
JOB001    JCL to create the handout materials: Job #1
JOB002A   JCL to create dump 10: Job #2
JOB002B   JCL to create dump 11: Job #3
JOB0021   JCL to create dump 1: Job #4
JOB0022   JCL to create dump 2: Job #5
JOB0023   JCL to create dump 3: Job #6
JOB0024   JCL to create dump 4: Job #7
JOB0025   JCL to create dump 5: Job #8
JOB0026   JCL to create dump 6: Job #9
JOB0027   JCL to create dump 7: Job #10
JOB0028   JCL to create dump 8: Job #11
JOB0029   JCL to create dump 9: Job #12
. A manual process is required between 0029 and JOB003. See $INSTRUC.
JOB003    JCL to create the handouts: Job #13
JOB004    JCL to create the handouts: Job #14
PROCNUM   A COBOL subroutine called by the ABDUMP program.
SQUEZE80  Assembler source for the SQUEZE80 program.
SQUEZJOB  JCL to run the SQUEZE80 program.
SYSADD    An assembler subroutine called by the ABDUMP program.
SYSAD2    An assembler subroutine called by the ABDUMP program.
SYSDATE   A COBOL subroutine called by the ABDUMP program.
TABLE     A table of data used by JOB002A-JOB0029 in creating dumps.
TABLE0A   A table of data used by JOB002A
TABLE0B   A table of data used by JOB002B
TABLE01   A table of data used by JOB0021
TABLE02   A table of data used by JOB0022
TABLE03   A table of data used by JOB0023
TABLE04   A table of data used by JOB0024
TABLE05   A table of data used by JOB0025
TABLE06   A table of data used by JOB0026
TABLE07   A table of data used by JOB0027
TABLE08   A table of data used by JOB0028
TABLE09   A table of data used by JOB0029
TABLE1    ? No longer used
TABLE2    ? No longer used
TABLE3    ? No longer used
TABLE4    ? No longer used
TEXTBOOK  The textbook for the course in SQUEZE80 format.
TRANFILA  A transaction file used by JOB002A
TRANFILB  A transaction file used by JOB002B
TRANFIL1  A transaction file used by JOB0021
TRANFIL2  A transaction file used by JOB0022
TRANFIL3  A transaction file used by JOB0023
TRANFIL4  A transaction file used by JOB0024
TRANFIL5  A transaction file used by JOB0025
TRANFIL6  A transaction file used by JOB0026
TRANFIL7  A transaction file used by JOB0027
TRANFIL8  A transaction file used by JOB0028
TRANFIL9  A transaction file used by JOB0029
UNSQUZ80  Assembler source for the UNSQUZ80 program
UNSQZJOB  JCL to execute program UNSQUZ80
./ ADD NAME=$INSTRUC 0121-88083-02149-1505-00081-00039-00000-BC0THOR
              ***** DUMP CLASS INSTRUCTIONS *****
 1. To simplify editing the JCL in the jobs below, you may want to use
    the EDIT macro called EDITMAC. If so, please EDIT it first and
    follow the instructions. After preparing this macro, it can be used
    for all the following JCL edits. Use of the macro will reduce any
    keying errors, as well as reducing labor.

 2. Edit, then submit JOB000 for execution. This job:
    a) Scratches any pre-existing libraries for the class.
    b) Allocates a text library for the course materials and a load
       library for the class programs.
    c) Assembles and linkedits the utility programs into the load
       library. These utilities are used in the steps below.
    d) "Unsqueezes" and copies the TEXTBOOK and CARDxx members in the
       source library to the text library.
    e) The first step may end with return code 8 if the class libraries
       do not exist. All other steps should end with return code zero.

 3. Edit, then submit JOB001 for execution. This job:
    a) Compiles/assembles, linkedits, and copies the compile/assembly
       listings for the programs and subroutines that comprise the
       ABDUMP program, which is executed to create the dumps that will
       be analyzed ("read") in the class.
    b) May have return code 4 or zero in the COBOL compile steps, and
       also in their associated linkedit steps. All other steps should
       end with return code zero.

 4. Create the dumps by editing, then submitting the JOB002x members.
    These jobs execute the ABDUMP program and read tables to set up the
    particular abend desired. the job output should be available on
    completion in SDSF or through some means of viewing and capturing
    the output from an online TSO session. All of these jobs should
    abend, most with S0C7, though other abend codes are included, as
    well.

 5. Use the TSO OUTPUT command for each of the jobs in step 2 above.
    Sometimes a single job may produce several SDSF outputs. If this
    happens, purge all but the one containing all the job output
    including the JES2, JCL, Job Log, abend dump, etc.
    For example, you might use the command below, where aaaaaaax is the
    jobname, and x is the final character of the jobname:
       TSO OUTPUT aaaaaaax PRINT(aaaaaaax)
    The command above will create datasets whose first node is your
    TSO userid, second node is the jobname, and third node is OUTLIST.
    If you choose another naming convention, you will have to change
    the dsnames in the steps within JOB003 below. Check to see that
    all 11 dump datasets were in fact created and correctly named.
    Also, the jobs should disappear from the SDSF list after the
    OUTPUT commands are done.

 6. Edit, then submit member JOB003. This will reformat the OUTLIST
    files to RECFM=FBA,LRECL=133, and write them as members of the
    class text library. The member names will be DUMPxx, where xx
    is the number of the dump, 01-11. All steps should complete with
    return code zero.

 7. Edit, then submit member JOB004 to print the listings and dumps.

 8. I usually print a single copy of all the listings, separate them to
    insure that all were produced, and at least scan them to be sure
    they are correct. Then, I usually work through each of the dumps and
    make notes to aid in the presentation. In fact, I have an area for
    such notes following the JCL for the dump jobs (JOB002x).

 9. After checking the printout, resubmit JOB004 once for each student
    in the class. Please note that every line of every page is numbered
    on the right side. This is helpful in teaching, as you can always
    insure the students are on the correct page and line. It is common
    for them to be using the wrong listing.

10. When all the class materials have been printed, the text and load
    libraries for the class can be deleted.

11. If desired, the TEXTBOOK and CARDxx members of the text library can
    downloaded to a PC and edited with a word processing package. This
    can help produce a much more readable textbook. Also, the CARDxx
    files can be adjusted to fit on the front and back of an 8.5" X 11"
    page of paper or card stock to form a fan-fold card. I put pages
    1, 2, 3, and 4 on the front side evenly spaced, and pages 5, 6, 7,
    and 8 on the rear. This permits fan-fold folding when printed
    double-sided.
./ ADD NAME=@DUMPS   0114-02150-02157-1502-01241-00046-00000-BC0THOR
                    ===> THE DUMPS <===

This is specific information concerning each of the dumps. I recommend
the instructor compare this to each of the dumps in the text printout
and verify the information. This helps insure things generated and
printed properly and, if this file's page and line references are
corrected to match the dumps, can be an aid during teaching should you
suddenly draw a blank.

In the information below, each dump is analyzed. Where data is taken
from the student handout material, a reference is given in parentheses
that contains first the type of document (D=dump, C=compile listing)
followed by the page and line number as Pnnn-Lnn.  The page and line
numbers are taken from the right side of the handout listings, and will
change if any change occurs. Changes will result if any listing change
occurs in the compiler, linkeditor, assembler, or Abend-Aid. Since the
page and line number are unique for every line of text in the handout,
it is a good way to keep everyone in the class on the same page.

I always insist students locate all the data fields, indexes, and
subscripts in the COBOL statement causing the abend even if the first
one found is obviously the cause of the abend. The reason for this is
that finding the data fields requires use of the skills being taught
and reinforces their use.

When subscripted and/or indexed fields occur in the abending COBOL
statement, as is almost always the case, the index or subscript must
first be found and evaluated before the specified data field can be
found. As each field is found, its data content is analyzed to determine
whether or not it is valid for the data type used. For example, packed
decimal must contain only decimal digits and a valid sign, a subscript
must be greater than zero, but less than the number of occurrences, etc.

I randomly assign dumps so that students pay attention to each solution.
When pre-assigned, the students busy themselves in solving their own
dumps and ignore the other students' solutions, which is valuable
training for them all.

Most of the dumps are S0C7 abends within the main program ABNDCOB, where
the abending statement includes references to a subscripted field and an
indexed field. This requires locating the content of an index, and three
data fields in storage. Data types used include packed decimal, zoned
decimal, and binary. Here is an overview:
  DUMP01: S0C7 in ABNDCOB, Unpacked field in an FD record,
                           Packed, indexed W-S field,
                           Abend caused by invalid unpacked data.
  DUMP02: S0C7 in ABNDCOB, Unpacked, subscripted field in an FD record,
                           Packed W-S field,
                           Abend caused by invalid unpacked data.
  DUMP03: S0C7 in ABNDCOB, Packed, indexed W-S field,
                           Binary W-S subscript field
                           Unpacked, subscripted W-S field
                           Abend caused by invalid unpacked data.
  DUMP04: S0C7 in ABNDCOB, Packed, indexed W-S field,
                           Packed W-S subscript field
                           Packed, subscripted W-S field
                           Abend caused by invalid packed data.
  DUMP05: S0C7 in ABNDCOB, Packed, indexed W-S field,
                           Unpacked W-S subscript field,
                           Binary subscripted W-S field,
                           Abend caused by invalid packed data.
  DUMP06: S0C7 in ABNDCOB, Unpacked, indexed W-S field,
                           Binary W-S subscript field,
                           Packed, subscripted W-S field,
                           Abend caused by subscript = 0.
  DUMP07: S0C7 in SYSDATE, Packed Linkage field,
                           Packed Linkage field,
                           Packed W-S field,
                           Character W-S field,
                           Packed W-S subscript field
                           Packed, subscripted W-S field
                           Packed W-S field,
                           Abend caused by invalid packed data.
  DUMP08: S0CB in ABNDCOB, Binary, indexed W-S field,
                           Unpacked W-S subscript field,
                           Binary, subscripted W-S field,
                           Abend caused by division by 0.
  DUMP09: S0C7 in ABNDCOB, Packed, indexed W-S field,
                           Packed W-S subscript field,
                           Packed, subscripted W-S field,
                           Abend caused by subscript too large.
  DUMP0A: S0C7 in ABNDCOB, Packed, indexed W-S field,
                           Unpacked W-S subscript field,
                           Packed, subscripted W-S field,
                           Abend caused by invalid packed data.
  DUMP0B: S0C7 in ABNDCOB, Packed, indexed W-S field,
                           Binary W-S subscript field,
                           Binary, subscripted W-S field,
                           Abend caused by invalid packed data.

The data causing the abend that is given in the * Diagnostic Section *
of the Abend-Aid dump is often a good check that the dump analysis has
indeed successfully identified the faulty data field. Use caution here,
though, as it is not always correct. As example, see Dump 8, the S0CB
abend where Abend-aid identifies the subscript as the error causing
field when it is perfectly valid, and the divisor of zero actually
is really the cause of the failure.

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
                   =====> DUMP01 <=====

Abend Code: S0C7 (D-P206-L20).

Abend Location: NEXT instruction is ABNDCOB+1972 (D-P206-L28).

Source line is found by first finding the condensed listing in the
  compile listing, which follows the "LITERAL POOL MAP FOR LITERALS IN
  THE CGT". It is a 3-column listing with "LINE #  HEXLOC  VERB" above
  each column (C-P65-L18). Look in the HEXLOC column left-to-right and
  top-to-bottom for the entry nearest, but LESS than 1972. This is:
                   000547 001966 MOVE (C-P66-L28).
  NOT line 548 which begins on 001972, since that is the location of the
  NEXT instruction, NOT the one causing the abend.  The source program
  line (C-P50-L50) is:

         547 MOVE CLAIM-DATA-CHARGES TO CLAIM-TOTAL-CHARGES (IX1).

Data fields:

  CLAIM-DATA-CHARGES (C-P42-L4)
    BLF=0000+01B (BLF cells relate to records in data files).
    Length 5 (the 5C at the right indicates a 5 character field).
    Data type is zoned decimal (note PIC S9(5) is numeric).
    Since this data field is in a record in a data file, locate the FD
      for the file, which is TABLE-FILE (C-P41-L33), then find the
      DDNAME READER1 in the SELECT statement for TABLE-FILE
      (C-P41-L24-25).
    Data in records under FD's are found in the dump
      under "Data Management Control Blocks For DDNAME - READER1"
      (begins D-P267-L2) in the "Current record" (D-P268-L4).
      The BLF points to the beginning of the current record, and the
      offset 01B is the hex displacement to the beginning of the field
      relative to zero. Note here, though, that the locator bar under
      the current record field begins with 1 (not 0) and is in decimal
      (not hex). First, convert the hex 01B to decimal, giving 27,
      then add 1 to make it relative to 1, so the data field will be
      positions 28-32 of the current record, and content is:
        character $1620 (D-P268-L6)      -or-
        hex 5BF1F6F2F0 (D-P268-L7-8)
      This is NOT valid zoned decimal data, and is the real cause
          of the abend.

  IX1 is assigned the COBOL name IDX=0001 (C-P44-L41).
    To find the content of an index in the Abend-Aid dump, first locate
      the "Supporting Data" page (begins D-P264-L4) which follows the
      BLW cell listing. For Index cells, the COBOL compiler assigns
      names relative to 1, while the Abend-Aid dump gives names relative
      to zero. So, although the COBOL listing shows IDX=0001, we must
      use the IDX 0 (X'0') field (D-P264-L25).
    Contents are hex 000028A0 (D-P264-L25). Indexes are always 4-byte
      hex values giving the offset (relative to 0) from the beginning of
      the table.
    To validate the index content, we need the length of the occurring
      field, which is 130 (C-P44-L40) and the number of occurrences in
      the table, which is 100 (C-P44-L40). Since the length and number
      of occurrences are in decimal, but the index is hex, first convert
      28A0 to decimal giving 10,400 decimal. Dividing by 130, the
      occurring field length, gives 80 with no remainder. (If there had
      been a remainder we have the wrong index or it has been overlaid.)
      We have to add 1 to get occurrence number, so the index points to
      occurrence #81, which is valid for a table having 100 occurrences.

  CLAIM-TOTAL-CHARGES(IX1) (C-P44-L49)
    BLW=0000+1C2 (BLW cells relate to WORKING-STORAGE).
    Length 4 (the 4P at right shows a 4-byte packed decimal field).
    Data type packed decimal (also note COMP-3 in the source code).  To
    locate the field in the dump, add the original field offset (1C2)
      to the offset due to the index (28A0) to get a total offset from
      BLW 0 of 2A62. Since each BL cell is always of length hex 1000,
      though, BLW 0 + 2A62 = BLW 1 + 1A62 = BLW 2 + A62 so we will look
      for "Working storage referenced by TGT BLW cell 2 x('2')" (begins
      D-P224-L19), then read down the DSPL column to the line whose DSPL
      value is nearest to, but not greater than A62: 00A60
      (D-P225-L49).
    Locate the data beginning at offset A62 by counting across from the
      first data byte. Note that the first column is DSPL, the second
      column is Address, and the Data begins in the third column. By
      counting across 2 hex digits per byte, the data at offset A62 is
      found to begin at the 3rd byte of the first data column. Since it
      is a 4-byte field, its content is 00B1620F.
    The hex value 00B1620F is not valid packed decimal, however since
      this is a receiving field, it could not have caused the abend.

  Abend caused by: Invalid zoned decimal data in the field
                   CLAIM-DATA-CHARGES.

  Data Structures: Input data record, indexed table.

  Data Types:      Index, packed decimal, zoned decimal.

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
                   =====> DUMP02 <=====

Abend Code: S0C7 (D-P275-L20).

Abend Location: NEXT instruction is ABNDCOB+095A (D-P275-L28).

Source line is found by first finding the condensed listing in the
  compile listing, which follows the "LITERAL POOL MAP FOR LITERALS IN
  THE CGT". It is a 3-column listing with "LINE #  HEXLOC  VERB" above
  each column (C-P65-L18). Look in the HEXLOC column left-to-right and
  top-to-bottom for the entry nearest, but LESS than 095A. This is:
                   000281 00094E MOVE (C-P65-L28).
  NOT line 282 which begins on 00095A, since that is the location of the
  NEXT instruction, NOT the one causing the abend.  The source program
  line (C-P46-L12) is:

                 281 MOVE SUB-VALUE (5) TO N.

Data fields:
  SUB-VALUE (5) (C-P42-L55-56) <=== notice subscripted field!
    BLF=0001+002 (BLF cells relate to records in data files).
    Length 4 (the 4C at the right indicates a 4 character field).
    Data type is zoned decimal (note PIC S9(4) is numeric).
    This is a subscripted field, and the subscript is provided directly
      in the instruction as (5). The offset due to the subscript
      requires the length of the occurring field. Since SUB-VALUE has an
      OCCURS in its definition, it is the occurring field, so the
      occurring field length is 4 (C-P42-L55).
    The offset due to the subscript is computes as
           Subscript Offset = (subscript - 1) * Occurring Length
      -or- Subscript Offset = (5 - 1) * 4 = 4 * 4 = 16 (decimal).
    Since this data field is in a record in a data file, locate the
      FD for the file, which is TRAN-FILE (C-P42-L35), then find
      the DDNAME INPUT2 in the SELECT statement for TRAN-FILE
      (C-P41-L26-27). Data in records under FD's are found in the dump
      under "Data Management Control Blocks For DDNAME - INPUT2"
      (begins D-P338-L2) in the "Current record" (D-P339-L4).
    The BLF points to the beginning of the current record, and the
      offset 002 is the hex displacement to the beginning of the field
      relative to zero.
    Note that the locator bar under the current record field begins with
      1 (not 0) and is in decimal (not hex). First, convert the hex 002
      to decimal, giving 2, add the decimal value for the subscript
      found above (16) then add 1 to make it relative to 1 for a total
      of 2 + 16 + 1 = 19 so the data field will be in positions 19-22 of
      the current record, and content is:
        character 0!79 (D-P339-L6)      -or-
        hex F05AF7F9   (D-P339-L7-8)
        This is not valid zoned decimal data, and is the real cause
          of the abend.
  N (C-P43-L35)
    BLW=0000+03D (BLW cells relate to WORKING-STORAGE).
    Length 3 (the 3P at right shows a 3-byte packed decimal field).
    Data type packed decimal (also note COMP-3 in the source code).
    To locate the field in the dump, look for "Working storage
      referenced by TGT BLW cell 0 x('0')" (begins D-P288-L20), then
      read down the DSPL column to the line whose DSPL value is 00020
      (D-P288-L23).
    Locate the data beginning at offset 03D by counting across from the
      first data byte. Note that the first column is DSPL, the second
      column is Address, and the Data begins in the third column. By
      counting across 2 hex digits per byte, the data at offset 03D is
      found in the last 3 bytes of the 8th column of data, which contain
      hex 00A79F.
    The hex value 00A79F is not valid packed decimal, however since
      this is a receiving field, it could not have caused the abend.

  Abend caused by: Invalid zoned decimal data in the field
                   SUB-VALUE (5).

  Data Structures: Input data record, subscripted table

  Data Types:      Packed decimal, zoned decimal.

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
                   =====> DUMP03 <=====

Abend Code: S0C7 (D-P345-L20).

Abend Location: NEXT instruction is ABNDCOB+0C6A (D-P345-L28).

Source line is found by first finding the condensed listing in the
  compile listing, which follows the "LITERAL POOL MAP FOR LITERALS IN
  THE CGT". It is a 3-column listing with "LINE #  HEXLOC  VERB" above
  each column (C-P65-L18). Look in the HEXLOC column left-to-right and
  top-to-bottom for the entry nearest, but LESS than 0C6A. This is:
                   000326 000C42 ADD  (C-P65-L40)
  The source program lines (C-P46-L57-58) are:

     326 ADD CLAIM-TOTAL-CHARGES (INDX1) TO
     327     GROUP-DOLLAR-TOTAL (M).

Data fields:
  INDX1 is assigned the COBOL name IDX=0002 (C-P44-L41-42). Two indexes
    are assigned to this table, IX1 and INDX1. The first, IX1, is named
    IDX=0001, while the second, INDX1 is named IDX=0002.
    To find the content of an index in the Abend-Aid dump, first locate
      the "Supporting Data" page (begins D-P403-L6) which follows the
      BLW cell listing. For Index cells, the COBOL compiler assigns
      names relative to 1, while the Abend-Aid dump gives names relative
      to zero. For this reason, although the COBOL listing shows IDX=002
      we must use the IDX 1 (X'1') field (D-P403-L27).
    Contents are hex 00000DB6 (D-P403-L27). Indexes are always 4-byte
      hex values giving the offset (relative to 0) from the beginning of
      the table. To validate the index content, we need the length of
      the occurring field, which is 130 (C-P44-L40) and the number of
      occurrences in the table, which is 100 (C-P44-L40). Since the
      length and number of occurrences are in decimal, but the index is
      hex, first convert DB6 to decimal giving 3,510 decimal. Dividing
      by 130, the length of the occurring field, gives 27 with no
      remainder. (If there had been a remainder we have the wrong index
      or it has been overlaid.) We have to add 1 to get occurrence
      number, so the index points to occurrence #28, which is valid for
      a table having 100 occurrences.
  CLAIM-TOTAL-CHARGES (INDX1) (C-P44-L49)
    BLW=0000+1C2 (BLW cells relate to WORKING-STORAGE).
    Length 4 (the 4P at right shows a 4-byte packed decimal field).
    Data type packed decimal (also note COMP-3 in the source code).
    To locate the field in the dump, add the original field offset (1C2)
      to the offset due to the index (DB6) to get a total offset from
      BLW 0 of F78. Look for "Working storage referenced by TGT BLW cell
      0 x('0')" (begins D-P358-L20), then read down the DSPL column to
      the line whose DSPL value is nearest, but not greater than F78:
      00F60 (D-P360-L40).
    Locate the data beginning at offset F78 by counting across from the
      first data byte. Note that the first column is DSPL, the second
      column is Address, and the Data begins in the third column. By
      counting across 2 hex digits per byte, the data at offset F78 is
      found to be the first byte of the 6th column of data. Since it is
      a 4-byte field, the content is 014E500C.
    The hex value 014E500C is not valid packed decimal, and this is
      the cause of the S0C7 abend.
  M (C-P43-L37)
    BLW=0000+045 (BLW cells relate to WORKING-STORAGE).
    Length 2 (the 2C at right shows a 2-byte character field).
    Data type binary (note S9(4) COMP in the source code).
    To locate the field in the dump, look for "Working storage
      referenced by TGT BLW cell 0 x('0')" (begins D-P358-L20), then
      read down the DSPL column to the line whose DSPL value is nearest,
      but not greater than 045:  00040 (D-P358-L24).
    Locate the data beginning at offset 045 by counting across from the
      first data byte. Note that the first column is DSPL, the second
      column is Address, and the Data begins in the third column. By
      counting across 2 hex digits per byte, the data at offset 045 is
      found in the middle two bytes of the second column of data. The
      content is 0045, and is a binary number.
    The hex value 0045 a valid binary number, as there are no invalid
      binary numbers. Its validity as a subscript for the field
      GROUP-DOLLAR-TOTAL is in question, though. To check this, first
      convert the binary value 045 to decimal, which is 69. Next find
      the number of occurrences for GROUP-DOLLAR-TOTAL (C-P44-L59)
      which is 172, since it falls under the occurring group item
      GROUP-TABLE-ENTRY (C-P44-L53). Since the decimal value 69 is
      less than 172, it is valid as a subscript for the field.
  GROUP-DOLLAR-TOTAL (M) (C-P44-L59)
    BLW=0003+4AC (BLW cells point to WORKING-STORAGE)
    Length 5 (the 5C at right designates a 5-character field)
    Data type Zoned Decimal (note the picture is S9(5)).
    Since this is a subscripted field, the offset due to the subscript
      must be added to the initial offset. To determine the offset due
      to the subscript, first find the length of the occurring item.
      In the compile, the occurring item containing GROUP-DOLLAR-TOTAL
      is GROUP-TABLE-ENTRY (C-P44-L53) which occurs 172 times and is
      76 bytes long. Offset due to a subscript is (subscript - 1) *
      length of occurring item, so subscript offset = (69 - 1) * 76 or
      subscript offset = 5,168 (decimal). The initial offset from BLW
      cell 3 is 4AC, which is hex, so the 5,168 decimal must be
      converted to hex, which is 1430. Total offset from BLW 3 is then
      4AC + 1430 = 18DC. BL cells are only valid for 1000 hex bytes,
      though, so BLW 3 + 18DC is the same as BLW 4 + 8DC.
    To find the data content in the dump, turn to "Working storage
      referenced by TGT BLW cell 4 (X'4')" (D-P368-L29) and then look
      down the DSPL column to find the nearest offset not higher than
      8DC, which is 8C0 (D-P369-L51). The data is found beginning in
      the 8th data column (remember that the 1st column is DSPL, and the
      2nd column is Address.) The field contains 5 bytes, so the final
      byte is in the first byte of data on the next line. Contents (in
      hex) are: F2F3F2F9C1. This is a valid zoned decimal +23,291.

  Abend caused by: Invalid zoned decimal data in the field
                   CLAIM-TOTAL-CHARGES (INDX1)

  Data Structures: Indexed table, subscripted table

  Data Types:      Packed decimal, zoned decimal, binary.

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
                   =====> DUMP04 <=====

Abend Code: S0C7 (D-P415-L20).

Abend Location: NEXT instruction is ABNDCOB+0CE6 (D-P415-L28).

Source line is found by first finding the condensed listing in the
  compile listing, which follows the "LITERAL POOL MAP FOR LITERALS IN
  THE CGT". It is a 3-column listing with "LINE #  HEXLOC  VERB" above
  each column (C-P65-L18). Look in the HEXLOC column left-to-right and
  top-to-bottom for the entry nearest, but LESS than 0CE6. This is:
                   000334 000CC6 SUBTRACT  (C-P65-L42)
  The source program lines (C-P47-L8-9) are:

     334 SUBTRACT GROUP-PROCEDURES-TOTAL (IX3) FROM
     335     HOSPITAL-PROCEDURES-TOTAL (SUB-2).

Data fields:
  IX3 is assigned the COBOL name IDX=0003 (C-P44-L54).
    To find the content of an index in the Abend-Aid dump, first locate
      the "Supporting Data" page (begins D-P473-L4) which follows the
      BLW cell listing. For Index cells, the COBOL compiler assigns
      names relative to 1, while the Abend-Aid dump gives names relative
      to zero. For this reason, although the COBOL listing shows IDX=003
      we must use the IDX 2 (X'2') field (D-P473-L25).
    Contents are hex 00003310 (D-P473-L25). Indexes are always 4-byte
      hex values giving the offset (relative to 0) from the beginning of
      the table. To validate the index content, we need the length of
      the occurring field, which is 76 (C-P44-L53) and the number of
      occurrences in the table, which is 172 (C-P44-L53). Since the
      length and number of occurrences are in decimal, but the index is
      hex, first convert 3310 to decimal giving 13,072 decimal. Dividing
      by occurring field length gives 172 with no remainder. (If there
      had been a remainder we have the wrong index or it has been
      overlaid.) We have to add 1 to get occurrence number, so the index
      points to occurrence #173, which is invalid, since the table has
      only 172 occurrences. This is the real cause of this abend.
  GROUP-PROCEDURES-TOTAL (IX3) (C-P45-L5)
    BLW=0003+4BA (BLW cells refer to WORKING-STORAGE)
    Length 2 (2P at right shows a 2-byte packed decimal field)
    Data Type packed decimal (also note COMP-3 in the source code)
    To locate the field in the dump, add the original field offset (4BA)
      to the offset due to the index (3310) to get a total offset from
      BLW 3 of 37CA. Each BL cell is 1000 hex bytes in length, so 37CA
      is 3000 + 7CA from BLW 3 or BLW 6 + 7CA.  Look for "Working
      storage referenced by TGT BLW cell 6 x('6')" (begins D-P443-L32),
      then read down the DSPL column to the line whose DSPL value is
      nearest, but not greater than 7CA: 007C0 (D-P444-L46).
    Locate the data beginning at offset 7CA by counting across from the
      first data byte. Note that the first column is DSPL, the second
      column is Address, and the Data begins in the third column. By
      counting across 2 hex digits per byte, the data at offset 7CA is
      found to begin in the 3rd byte of the 3rd column of data and the
      content is 4040. This is not valid packed decimal data. It did not
      cause of the S0C7 abend. however, since HOSPITAL-PROCEDURES-TOTAL
      was evaluated first, and it was also invalid.
  SUB-2 (C-P43-L30)
    BLW=0000+031 (BLW cells refer to WORKING-STORAGE)
    Length 3 (the 3P at right specifies a 3-byte, packed decimal field)
    Data type packed decimal (also note the COMP-3 in the source code)
    To find the content of this subscript field in the dump, find the
      "Working Storage referenced by TGT BLW cell 0 (X'0')" (D-P428-L20)
      and look down the DSPL column to find the displacement nearest to,
      but not greater than 031: 00020 (D-P428-L23).  Now jump over the
      first two columns (DSPL and Address) and beginning in the first
      data column, count over 2 digits per byte until you locate 031,
      which will be the second byte of the fifth data column of data.
      Since SUB-2 is 3-bytes long its content is hex 00061C. This is a
      valid packed decimal number which is decimal +61. Since this is
      being used as a subscript for HOSPITAL-PROCEDURES-TOTAL, it must
      be tested for validity as a subscript. HOSPITAL-PROCEDURES-TOTAL
      is a field under the group item HOSPITAL-TABLE (C_P45-L7-8) that
      occurs 130 times and is of length 75. Since 61 is less than 130,
      it is a valid subscript.
  HOSPITAL-PROCEDURES-TOTAL (SUB-2) (C-P45-L17)
    BLW=0006+7C8 (BLW cells refer to WORKING-STORAGE)
    Length 3 (the 3P at right shows a 3-byte packed decimal field).
    Data type packed decimal (also note COMP-3 in the source code).
    To find this field in the dump, we must add the initial offset of
      7C8 to the offset due to the subscript (61 - 1) * 75 = 4,500
      decimal or 1194 hex. 7C8 + 1194 = 195C so the field will be at BLW
      6 + 195C or BLW 7 + 95C since BL cells are only hex 1000 long. In
      the dump, locate "Working storage referenced by TGT BLW cell 7
      (X'7')" (D-P446-L11) and look down the DSPL column to find the
      line nearest, but less than 95C: 00940 (D-P447-L37). Skip the DSPL
      and Address columns and begin counting across in the first data
      column, 2 hex digits per byte until you get to 95C in the first
      byte of the 8th column of data. Since the field is 3 bytes long,
      its content is hex 060C40 which is not valid packed decimal data.
      This is the field which caused the program to abend.

  Abend caused by: Invalid packed decimal data in the field
                    HOSPITAL-PROCEDURES-TOTAL (SUB-2)

  Data Structures: Indexed table, subscripted table

  Data Types:      Packed decimal.

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
                   =====> DUMP05 <=====

Abend Code: S0C7 (D-P485-L20).

Abend Location: NEXT instruction is ABNDCOB+0D36 (D-P485-L28).

Source line is found by first finding the condensed listing in the
  compile listing, which follows the "LITERAL POOL MAP FOR LITERALS IN
  THE CGT". It is a 3-column listing with "LINE #  HEXLOC  VERB" above
  each column (C-P65-L18). Look in the HEXLOC column left-to-right and
  top-to-bottom for the entry nearest, but LESS than 0D36. This is:
                   000342 000D14 COMPUTE   (C-P65-L44)
  The source program lines (C-P47-L16-17) are:

     342 COMPUTE DOCTOR-NBR-PATIENTS (J) =
     343     .7 * HOSPITAL-NBR-PATIENTS (IX2).

Data fields:
  J (C-P43-L36)
    BLW=0000+040 (BLW cells refer to WORKING-STORAGE)
    Length 5 (the 5C at right specifies a 5-byte, character field)
    Data type zoned decimal (note the 9(5) in the source code)
    To find the content of this subscript field in the dump, find the
      "Working Storage referenced by TGT BLW cell 0 (X'0')" (D-P498-L20)
      and look down the DSPL column to find the displacement nearest to,
      but not greater than 040: 00040 (D-P498-L24). Now jump over the
      first two columns (DSPL and Address) and find 040 at the 1st byte
      in the first data column. J is 5 bytes long, so its hex content is
      F0F0F0F3F3, a valid zoned decimal number that is unsigned 33.
      Since this is being used as a subscript for DOCTOR-NBR-PATIENTS,
      (C-P45-L24), it must be tested for validity as a subscript.
      DOCTOR-NBR-PATIENTS is within the group item DOCTOR-TABLE-ENTRY
      (C-P45-L20) that occurs 800 times and is of length 43. Since 33 is
      less than 800, it is a valid subscript.
  DOCTOR-NBR-PATIENTS (J) (C-P45-L24)
    BLW=0008+DB8 (BLW cells refer to WORKING-STORAGE)
    Length 4 (the 4C at right shows a 4-byte character field).
    Data type binary (also note COMP in the source code).
    To find this field in the dump, we must add the initial offset of
    DB8 to the offset due to the subscript (33 - 1) * 43 = 1,376 decimal
    or 560 hex. DB8 + 560 = 1318 so the field will be at BLW 8 + 1318
    or BLW 9 + 318 since BL cells are only hex 1000 long. In the dump,
    locate "Working storage referenced by TGT BLW cell 9 (X'9')"
    (D-P521-L20) and look down the DSPL column to find the line nearest,
    but not greater than 318: 00300 (D-P521-L46). Skip the DSPL and
    Address columns and begin counting across in the first data column,
    2 hex digits per byte until you get to 318 in the first byte of the
    7th column of data. Since the field is 4 bytes long, its content is
    hex 0000A0 which is valid binary data.
  IX2 is assigned the COBOL name IDX=0004 (C-P45-L9).
    To find the content of an index in the Abend-Aid dump, first locate
      the "Supporting Data" page (begins D-P543-L4) which follows the
      BLW cell listing. For Index cells, the COBOL compiler assigns
      names relative to 1, while the Abend-Aid dump gives names relative
      to zero. For this reason, although the COBOL listing shows IDX=004
      we must use the IDX 3 (X'3') field (D-P543-L26).
    Contents are hex 0000130B (D-P543-L26). Indexes are always 4-byte
      hex values giving the offset (relative to 0) from the beginning of
      the table. To validate the index content, we need the length of
      the occurring field, which is 75 (C-P45-L8) and the number of
      occurrences in the table, which is 130 (C-P45-L8). Since the
      length and number of occurrences are in decimal, but the index is
      hex, first convert 130B to decimal giving 4,875 decimal. Dividing
      by 75, the occurring field length, gives 65 with no remainder. (If
      there had been a remainder we have the wrong index or it has been
      overlaid.) We have to add 1 to get occurrence number, so the index
      points to occurrence #76, which is valid, since the table has 130
      occurrences.
  HOSPITAL-NBR-PATIENTS (IX2) (C-P45-L15)
    BLW=0006+7C0 (BLW cells refer to WORKING-STORAGE)
    Length 3 (3P at right shows a 3-byte packed decimal field)
    Data Type packed decimal (also note COMP-3 in the source code)
    To locate the field in the dump, add the original field offset (7C0)
      to the offset due to the index (130B) to get a total offset from
      BLW 6 of 1ACB. Each BL cell is 1000 hex bytes in length, so 1ACB
      is 1000 + ACB from BLW 6 or BLW 7 + ACB.  Look for "Working
      storage referenced by TGT BLW cell 7 x('7')" (begins D-P516-L11),
      then read down the DSPL column to the line whose DSPL value is
      nearest to, but not greater than ACB: 00AC0 (D-P517-L49).
    Locate the data beginning at offset ACB by counting across from the
      first data byte. Note that the first column is DSPL, the second
      column is Address, and the Data begins in the third column. By
      counting across 2 hex digits per byte, the data at offset ACB is
      found to begin in the 4th byte of the 4th column of data and the
      content is 004D0C. This is not valid packed decimal data, and is
      the cause of the S0C7 abend.

  Abend caused by: Invalid packed decimal data in the field
                    HOSPITAL-NBR-PATIENTS (IX2)

  Data Structures: Indexed table, subscripted table

  Data Types:      Zoned decimal, binary, packed decimal.

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
      paste a      =====> DUMP06 <=====

Abend Code: S0C7 (D-P555-L20).

Abend Location: NEXT instruction is ABNDCOB+0E0A (D-P555-L28).

Source line is found by first finding the condensed listing in the
  compile listing, which follows the "LITERAL POOL MAP FOR LITERALS IN
  THE CGT". It is a 3-column listing with "LINE #  HEXLOC  VERB" above
  each column (C-P65-L18). Look in the HEXLOC column left-to-right and
  top-to-bottom for the entry nearest, but LESS than 0E0A. This is:
                   000352 00)DE8 ADD       (C-P65-L46)
  The source program lines (C-P47-L26-27) are:

     352 ADD CLAIM-NBR-TREATMENTS (INDX1) TO
     353     HOSPITAL-PROCEDURES-TOTAL (SUB-3).

Data fields:
  INDX1 is assigned the COBOL name IDX=0002 (C-P44-L42)
    To find the content of an index in the Abend-Aid dump, first locate
      the "Supporting Data" page (begins D-P613-L4) which follows the
      BLW cell listing. For Index cells, the COBOL compiler assigns
      names relative to 1, while the Abend-Aid dump gives names relative
      to zero. For this reason, although the COBOL listing shows IDX=002
      we must use the IDX 1 (X'1') field (D-P613-L25).
    Contents are hex 00000BAE (D-P613-L25). Indexes are always 4-byte
      hex values giving the offset (relative to 0) from the beginning of
      the table. To validate the index content, we need the length of
      the occurring field, which is 130 (C-P44-L40) and the number of
      occurrences in the table, which is 100 (C-P44-L40). Since the
      length and number of occurrences are in decimal, but the index is
      hex, first convert BAE to decimal giving 2,990 decimal. Dividing
      by 130, the length of the occurring field, gives 23 with no
      remainder. (If there had been a remainder we have the wrong index
      or it has been overlaid.) We have to add 1 to get occurrence
      number, so the index points to occurrence #24, which is valid,
      since the table has 100 occurrences.
  CLAIM-NBR-TREATMENTS (INDX1) (C-P44-L47)
    BLW=0000+1BB (BLW cells refer to WORKING-STORAGE)
    Length 3 (3C at right shows a 3-byte character field)
    Data Type zoned decimal (note PIC 9(3) in the source code)
    To locate the field in the dump, add the original field offset (1BB)
      to the offset due to the index (BAE) to get a total offset from
      BLW 0 of D69.  Look for "Working storage referenced by TGT BLW
      cell 0 x('0')" (begins D-P568-L20), then read down the DSPL column
      to the line whose DSPL value is nearest, but not greater than D69:
      00D60 (D-P570-L24).
    Locate the data beginning at offset D69 by counting across from the
      first data byte. Note that the first column is DSPL, the second
      column is Address, and the Data begins in the third column. By
      counting across 2 hex digits per byte, the data at offset D69 is
      found to begin in the 2nd byte of the 3rd column of data and the
      content is F0F0F1. This is a valid zoned decimal unsigned 001.
  SUB-3 (C-P43-L31)
    BLW=0000+034 (BLW cells refer to WORKING-STORAGE)
    Length 2 (the 2C at right specifies a 2-byte, character field)
    Data type binary (note the COMP in the source code)
    To find the content of this subscript field in the dump, find the
      "Working Storage referenced by TGT BLW cell 0 (X'0')" (D-P568-L20)
      and look down the DSPL column to find the displacement nearest to
      034 without exceeding it: 00020 (D-P568-L23).  Now jump over the
      first two columns (DSPL and Address) and begin counting in the
      first column of data, two hex digits per column, locating 034 at
      the beginning of the 6th data column. SUB-3 is 2 bytes long, so
      its hex content is 0000, corresponding to a decimal value of zero.
      Since this is being used as a subscript, it is invalid, as a sub-
      script must be greater than zero and not greater than the number
      of occurrences. When arithmetic is applied to calculate the offset
      due to this subscript it results in pointing to the -1th entry of
      the table. This invalid subscript value is the real cause of the
      abend.
  HOSPITAL-PROCEDURES-TOTAL (SUB-3) (C-P45-L17)
    BLW=0006+7C8 (BLW cells refer to WORKING-STORAGE)
    Length 3 (the 3P at right shows a 4-byte packed decimal field).
    Data type packed decimal (also note COMP-3 in the source code).
    To find this field in the dump, we must add the initial offset of
      7C8 to the offset due to the subscript (0 - 1) * 75 = -75 decimal
      or -4B hex. 7C8 - 4B = 77D so the field will be at BLW 6 + 77D.
      In the dump, locate "Working storage referenced by TGT BLW cell 6
      (X'6')" (D-P583-L32) and look down the DSPL column to find the
      line nearest, but not greater than 77D: 00760 (D-P584-L43). Skip
      the DSPL and Address columns and begin counting across in the
      first data column, 2 hex digits per byte until you get to 77D in
      the 2nd byte of the 8th column of data. Since the field is 3 bytes
      long, its content is hex 2C171C which is not valid packed decimal
      data. Although it actually resulted in the abend, the real cause
      was the zero value in the subscript field.

  Abend caused by: Subscript value of zero.
                   SUB-3

  Data Structures: Indexed table, subscripted table

  Data Types:      Zoned decimal, binary, packed decimal.

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
                   =====> DUMP07 <=====

Abend Code: S0C7 (D-P625-L20).

Abend Location: NEXT instruction is SYSDATE+0352 (D-P625-L28).

!!!!!!!! NOTE ABENDING PROGRAM NAME IS SYSDATE, NOT ABNDCOB !!!!!!!

Source line is found by first finding the condensed listing in the
  compile listing, which follows the "LITERAL POOL MAP FOR LITERALS IN
  THE CGT". It is a 3-column listing with "LINE #  HEXLOC  VERB" above
  each column (C-P115-L12). Look in the HEXLOC column left-to-right and
  top-to-bottom for the entry nearest, but LESS than 0352. This is:
                   000046 000342 COMPUTE   (C-P115-L14)
  The source program lines (C-P108-L50-51) are:

     46 COMPUTE DATE-RETURN =
     47      INCREMENT + CURR-DATE.

Data fields:
  Since this abend did not occur within the main program, ABNDCOB, whose
  data is shown first in the dump, locate the beginning of the SYSDATE
  information at "Data Division of Program SYSDATE" (D-P685-L4). Data
  following this applies to SYSDATE, while earlier data is for program
  ABNDCOB.

  DATE-RETURN (C-P108-L40)
    BLL=0003+000 (BLL cells refer to LINKAGE SECTION, and point to data
      fields passed in from a calling program or via the PARM parameter
      on the JCL EXEC statement.)
    Length 3 (the 3P at right specifies a 3-byte, packed decimal field)
    Data type packed decimal (also note the COMP-3 in the source code)
    To find the content of this field in the dump, find the "Linkage
      storage referenced by TGT BLL cell 3 (X'3')" (D-P690-L32) and look
      down the DSPL column to find the displacement nearest to, but not
      greater than 000: 00000 (D-P690-L34).  Now jump over the first two
      columns (DSPL and Address) and beginning in the first data column,
      you will be at the beginning of the data field at the first byte
      of the first data column. Since DATE-RETURN is 3-bytes
      long its content is hex 00033F. This is a valid packed decimal
      number, an unsigned 33.
  INCREMENT (C-P108-L36)
    BLL=0002+000 (BLL cells refer to LINKAGE SECTION, and point to data
      fields passed in from a calling program or via the PARM parameter
      on the JCL EXEC statement.)
    Length 3 (the 3P at right specifies a 3-byte, packed decimal field)
    Data type packed decimal (also note the COMP-3 in the source code)
    To find the content of this field in the dump, find the "Linkage
      storage referenced by TGT BLL cell 2 (X'2')" (D-P688-L3) and look
      down the DSPL column to find the displacement nearest to, but not
      greater than 000: 00000 (D-P688-L4).  Now jump over the first two
      columns (DSPL and Address) and beginning in the first data column,
      you will be at the beginning of the data field at the first byte
      of the first data column. Since INCREMENT is 3-bytes long its
      content is hex 000024. This is not a valid packed decimal number,
      and is the cause of the abend.
  CURR-DATE (C-P108-L30)
    BLW=0000+030 (BLW cells refer to WORKING-STORAGE)
    Length 3 (the 3P at right specifies a 3-byte, packed decimal field)
    Data type packed decimal (also note the COMP-3 in the source code)
    To find the content of this field in the dump, find the "Working
      storage referenced by TGT BLW cell 0 (X'0')" (D-P685-L20) and look
      down the DSPL column to find the displacement nearest to, but not
      greater than 030: 00020 (D-P685-L23).  Now jump over the first two
      columns (DSPL and Address) and beginning in the first data column,
      count over 2 hex digits per byte until you arrive at 00030 on the
      first byte of the fifth data column.  Since CURR-DATE is 3-bytes
      long its content is hex 02150C. This is a valid packed decimal
      number, a positive (+) 2,150.
    The data field called INCREMENT caused this abend. The field was
      passed to SYSDATE by a calling program, since it is referenced by
      a BLL cell. Also, notice that it is named on the "PROCEDURE
      DIVISION USING REQUEST-CODE, INCREMENT, DATE-RETURN" statement
      (C-P108-L44).  In this case, SYSDATE is the victim of bad data
      passed by another program.
    To find the calling program and the data it passed, first go to the
      * Call Trace Summary * in the dump (D-P628-L4) and look down the
      ******Called******, Program columns to find SYSDATE (D-P628-L16)
      which shows that SYSDATE was called by ABNDCOB, and the expected
      return point to ABNDCOB was at offset 00000E68. In other words,
      the next instruction to be executed in program ABNDCOB after its
      call to SYSDATE would have been at offset E68. Locate the compile
      listing for program ABNDCOB and find its condensed listing
      (begins C-P65-L18), then look down the HEXLOC columns to find
      the entry nearest, but lower than E68. This is found for LINE #
      360 in the first column (C-P65-L48). The statement is a CALL
      as expected (C-P47-L34-36):
        360   CALL 'SYSDATE' USING RET-DATE,
        361                        DOCTOR-COST-TOTAL (N),
        362                        JUL-DATE.
      Notice fields named on the CALL differ from the names on the
      PROCEDURE DIVISION USING statement in program SYSDATE. This is
      normal, as the fields are matched up by the order sent, rather
      than by name. The field sizes and data contents, however, must
      match. Matching by position, we find that ABNDCOB's RET-DATE
      field corresponds to SYSDATE's REQUEST-CODE, ABNCOB's
      DOCTOR-COST-TOTAL (N) corresponds to SYSDATE's INCREMENT, and
      ABNDCOB's JUL-DATE corresponds to SYSDATE's DATE-RETURN field.
      Since INCREMENT caused the abend in SYSDATE, we need to look
      at the field DOCTOR-COST-TOTAL (N) in the ABNDCOB program.
      However, for practice, we will locate all the fields.
  Fields in the CALL statement are:
    RET-DATE (C-P44-L36)
      BLW=0000+19F (BLW cells point to data in WORKING-STORAGE)
      Length 1 (the 1C at right identifies a one-character field).
      Data type is character (note PIC X in the source code.)
      To find this field in the dump, locate "Working storage referenced
        by TGT BLW cell 0 (X'0') (D-P638-L20) and look down the DSPL
        column to find the line with the value nearest, but not greater
        than 19F: 00180 (D-P638-L34) then step over the DSPL and Address
        columns and count across 2 hex digits per byte to find 19F in
        the last byte of the 8th column of data. Since this is a single
        byte field, its content is hex D9, which is the character "R".
        This is expected, as the source code shows it is given the value
        "R".
    N (C-P43-L35)
      BLW=0000+03D (BLW cells point to data in WORKING-STORAGE)
      Length 3 (the 3P at right identifies a packed decimal field).
      Data type is packed decimal (note COMP-3 in the source code.)
      To find this subscript field in the dump, locate "Working storage
        referenced by TGT BLW cell 0 (X'0') (D-P638-L20) and look down
        the DSPL column to find the line with the value nearest, but not
        greater than 03D: 00020 (D-P638-L23) then step over the DSPL and
        Address columns and count across 2 hex digits per byte to find
        03D in the last three bytes of the 8th column of data.  The
        content of this 3-byte field is hex 00039C which is the valid
        packed decimal value +39. Since this field is used as a
        subscript to DOCTOR-COST-TOTAL, we need to check its validity as
        a subscript.  The DOCTOR-COST-TOTAL field (C-P45-L25) is under
        the group item DOCTOR-TABLE-ENTRY (C-P45-L20) and it is of
        length 43 and occurs 800 times. Since the content of N is +39,
        it is a valid sub- script for this table which occurs 800 times.
    DOCTOR-COST-TOTAL (N) (C-P45-L25)
      BLW=0008+DBC (BLW cells point to data in WORKING-STORAGE)
      Length 5 (the 5P at right identifies a packed decimal field).
      Data type is packed decimal (note COMP-3 in the source code.)
      To find this field in the dump the offset due to the subscript N
        must be added to the initial offset, +DBC. To calculate the
        offset due to the N, compute offset = (39 - 1) * 43 to get
        decimal 1,634, which is hex 662. Add initial offset DBC to
        offset due to N to get a total offset of DBC + 662 = 141E.
        Since BL cells are only hex 1000 bytes long, we will look in the
        dump for BLW=0009+41E rather than for BLW=0008+141E. Look in the
        dump for "Working storage referenced by BLW cell 9 (X'9')
        (C-P661-L20) and look down the DSPL column to find the line with
        the value nearest, but not greater than 41E: 00400 (D-P662-L4)
        then step over the DSPL and Address columns and count across 2
        hex digits per byte to find 41E in the third byte of the 8th
        column of data. The content of this 5-byte field is hex
        000024054C which is the valid packed decimal value +24,054.
        While this field is contains a valid packed decimal value, it
        was passed to the SYSDATE subroutine in the position where a
        3-byte packed decimal value was expected. The solution will
        require that the calling and called programs agree on size of
        the data field being passed.
    JUL-DATE (C-P44-L29)
      BLW=0000+196 (BLW cells point to data in WORKING-STORAGE)
      Length 3 (the 3P at right identifies a packed decimal field).
      Data type is packed decimal (note the COMP-3 in the source code.)
      To find this field in the dump, locate "Working storage referenced
        by TGT BLW cell 0 (X'0') (D-P638-L20) and look down the DSPL
        column to find the line with the value nearest, but not greater
        than 196: 00180 (D-P638-L34) then step over the DSPL and Address
        columns and count across 2 hex digits per byte to find 196 in
        the second byte of the 6th column of data. Since this is a
        3-byte field, its content is hex 00033F, which is a valid packed
        decimal value of unsigned 33.

  Abend caused by: Invalid packed decimal data in the field. (Actually,
      field length is the issue here.)
      INCREMENT             (packed length 3 expected by SYSDATE)
      DOCTOR-COST-TOTAL (N) (packed length 5 sent by ABNDCOB)

  Data Structures: Subscripted table.

  Data Types:      Packed decimal.

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
                   =====> DUMP08 <=====

Abend Code: S0CB (D-P707-L20).

Abend Location: NEXT instruction is ABNDCOB+0F26 (D-P707-L28).

Source line is found by first finding the condensed listing in the
  compile listing, which follows the "LITERAL POOL MAP FOR LITERALS IN
  THE CGT". It is a 3-column listing with "LINE #  HEXLOC  VERB" above
  each column (C-P65-L18). Look in the HEXLOC column left-to-right and
  top-to-bottom for the entry nearest, but LESS than 0F26. This is:
                   000373 000EF4 DIVIDE    (C-P65-L50)
  The source program lines (C-P47-L47-49) are:

     373 DIVIDE DOCTOR-NBR-PATIENTS (I) INTO
     374        GROUP-NBR-CLAIMS (IX3) GIVING
     375        ENTRY-WORK.

Data fields:
  I (C-P43-L34)
    BLW=0000+03B (BLW cells refer to WORKING-STORAGE)
    Length 2 (the 2C at right specifies a 2-byte, character field)
    Data type zoned decimal (note the PIC 99 in the source code)
    To find the content of this subscript field in the dump, find the
      "Working storage referenced by TGT BLW cell 0 (X'0')" (D-P720-L20)
      and look down the DSPL column to find the displacement nearest to
      03B without exceeding it: 00020 (D-P568-L23).  Now jump over the
      first two columns (DSPL and Address) and begin counting in the
      first column of data, two hex digits per column, locating 03B at
      the last byte of the 7th data column. I is 2 bytes long, so its
      hex content is F5F3, corresponding to a decimal value of 53.
      Since this is being used as a subscript to DOCTOR-NBR-PATIENTS
      (C-P45-L24) which is in the group item DOCTOR-TABLE-ENTRY
      (C-P45-L20) which is 43 bytes long and occurs 800 times, I is a
      valid subscript.
  DOCTOR-NBR-PATIENTS (I) (C-P45-L24)
    BLW=0008+DB8 (BLW cells refer to WORKING-STORAGE)
    Length 4 (the 4C at right shows a 4-byte character field).
    Data type binary (note COMP in the source code).
    To find this field in the dump, we must add the initial offset of
      DB8 to the offset due to the subscript (53 - 1) * 43 = 2,236
      decimal or 8BC hex. DB8 + 8BC = 1674 so the field will be at BLW 8
      + 1674 or BLW9 + 674 since all BL cells are hex 1000 in length. To
      find this field in the dump, locate "Working storage referenced by
      TGT BLW cell 9 (X'9')" (D-P743-L20) and look down the DSPL column
      to find the line nearest, but not greater than 674: 00660
      (D-P744-L23).  Skip the DSPL and Address columns and begin
      counting across in the first data column, 2 hex digits per byte
      until you get to 674 in the 1st byte of the 6th column of data.
      Since the field is 4 bytes long, its content is hex 00000000 which
      is valid binary data equal to zero decimal. However, this data is
      the cause of the error, since division by zero is not allowed.
  IX3 is assigned the COBOL name IDX=0003 (C-P44-L54)
    To find the content of an index in the Abend-Aid dump, first locate
      the "Supporting Data" page (begins D-P765-L4) which follows the
      BLW cell listing. For Index cells, the COBOL compiler assigns
      names relative to 1, while the Abend-Aid dump gives names relative
      to zero. For this reason, although the COBOL listing shows IDX=003
      we must use the IDX 2 (X'2') field (D-P765-L25).  Contents are hex
      00001398 (D-P765-L25). Indexes are always 4-byte hex values giving
      the offset (relative to 0) from the beginning of the table. IX3 is
      used for GROUP-TABLE-ENTRY (C-P44-L53) which is 76 bytes long and
      has 172 occurrences.  Since the length and number of occurrences
      are in decimal, but the index is hex, first convert 1398 to
      decimal giving 5,016 decimal. Dividing by 76, THE occurring field
      length, gives 66 with no remainder. (If there had been a remainder
      we have the wrong index or it has been overlaid.) We have to add 1
      to get occurrence number, so the index points to occurrence #67,
      which is valid, since the table has 172 occurrences.
  GROUP-NBR-CLAIMS (IX3) (C-P45-L3)
    BLW=0003+4B1 (BLW cells refer to WORKING-STORAGE)
    Length 4 (4C at right shows a 4-byte character field)
    Data Type binary (note COMP in the source code)
    To locate the field in the dump, add the original field offset (4B1)
      to the offset due to the index (1398) to get a total offset from
      BLW 3 of 1849 OR BLW 4 + 849, as all BL cells are hex 1000 long.
      Look for "Working storage referenced by TGT BLW cell 4 x('4')"
      (begins D-P730-L20), then read down the DSPL column to the line
      whose DSPL value is nearest, but not greater than 849: 0000840
      (D-P731-L38).
    Locate the data beginning at offset 849 by counting across from the
      first data byte. Note that the first column is DSPL, the second
      column is Address, and the Data begins in the third column. By
      counting across 2 hex digits per byte, the data at offset 849 is
      found to begin in the 2nd byte of the 3rd column of data and the
      content is 005A014A. This is valid binary data.
  ENTRY-WORK (C-P43-L32)
    BLW=0000+036 (BLW cells refer to WORKING-STORAGE)
    Length 5 (the 5P at right specifies a 5-byte, packed decimal field)
    Data type packed decimal (note the COMP-3 in the source code)
    To find the content of this field in the dump, find the "Working
      Storage referenced by TGT BLW cell 0 (X'0')" (D-P720-L20) and look
      down the DSPL column to find the displacement nearest to 036
      without exceeding it: 00020 (D-P720-L23).
    Now jump over the first two columns (DSPL and Address) and begin
      counting in the first column of data, two hex digits per column,
      locating 036 at the 3rd byte of the 6th data column. ENTRY-WORK is
      5 bytes long, so its hex content is 001234567C, a valid packed
      decimal +1,234,567.

  Abend caused by: division by zero using divisor field:
               DOCTOR-NBR-PATIENTS (I)

  Data Structures: Indexed table, subscripted table

  Data Types:      Zoned decimal, binary, packed decimal.

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
                   =====> DUMP09 <=====

Abend Code: S0C7 (D-P777-L20).

Abend Location: NEXT instruction is ABNDCOB+1024 (D-P777-L28).

Source line is found by first finding the condensed listing in the
  compile listing, which follows the "LITERAL POOL MAP FOR LITERALS IN
  THE CGT". It is a 3-column listing with "LINE #  HEXLOC  VERB" above
  each column (C-P65-L18). Look in the HEXLOC column left-to-right and
  top-to-bottom for the entry nearest, but LESS than 1024. This is:
                   000390 001004 SUBTRACT  (C-P65-L53)
  The source program lines (C-P48-L7-8) are:

     390 SUBTRACT GROUP-CLAIMS-TOTAL (SUB-2) FROM
     391     HOSPITAL-COST-TOTAL (IX2).

Data fields:
  SUB-2 (C-P43-L30)
    BLW=0000+031 (BLW cells refer to WORKING-STORAGE)
    Length 3 (the 3P at right specifies a 3-byte, packed decimal field)
    Data type packed decimal (note the COMP-3 in the source code)
    To find the content of this subscript field in the dump, find the
      "Working storage referenced by TGT BLW cell 0 (X'0')" (D-P790-L20)
      and look down the DSPL column to find the displacement nearest to
      031 without exceeding it: 00020 (D-P790-L23).  Now jump over the
      first two columns (DSPL and Address) and begin counting in the
      first column of data, two hex digits per column, locating 031 at
      the 2nd byte of the 5th data column. SUB-2 is 3 bytes long, so its
      hex content is 00173C, a valid packed decimal +173.
    Since this is being used as a subscript to GROUP-CLAIMS-TOTAL
      (C-P45-L4) which is in the group item GROUP-TABLE-ENTRY
      (C-P44-L53) which is 76 bytes long and occurs 172 times, SUB-2 is
      not a valid subscript, as it is greater than the number of
      occurrences for the table. This is the real cause of the abend.
  GROUP-CLAIMS-TOTAL (SUB-2) (C-P45-L4)
    BLW=0003+4B5 (BLW cells refer to WORKING-STORAGE)
    Length 5 (the 5P at right shows a 5-byte packed decimal field).
    Data type packed decimal (note COMP-3 in the source code).
    To find this field in the dump, we must add the initial offset of
      4B5 to the offset due to the subscript (173 - 1) * 76 = 13,072
      decimal or 3310 hex. 4B5 + 3310 = 37C5 so the field will be at BLW
      3 + 37C5, or, since all BL cells are of length hex 1000, it will
      actually be found at BLW 6 + 7C5.
    Next, locate "Working storage referenced by TGT BLW cell 6 (X'6')"
      (D-P805-L32) and look down the DSPL column to find the line
      nearest, but not greater than 7C5: 007C0 (D-P806-L46).  Skip the
      DSPL and Address columns and begin counting across in the first
      data column, 2 hex digits per byte until you get to 7C5 in the 2nd
      byte of the 2nd column of data.  Since the field is 5 bytes long,
      its content is hex 00000C000C which is not a valid packed decimal
      value. This invalid data resulted in the S0C7 abend, however the
      real cause is the bad subscript value in SUB-2.
  IX2 is assigned the COBOL name IDX=0004 (C-P45-L9)
    To find the content of an index in the Abend-Aid dump, first locate
      the "Supporting Data" page (begins D-P835-L4) which follows the
      BLW cell listing. For Index cells, the COBOL compiler assigns
      names relative to 1, while the Abend-Aid dump gives names relative
      to zero. For this reason, although the COBOL listing shows IDX=004
      we must use the IDX 3 (X'3') field (D-P835-L26).  Contents are hex
      0000122A (D-P835-L26).
    Indexes are always 4-byte hex values giving the offset (relative to
      0) from the beginning of the table. IX2 is used for
      HOSPITAL-TABLE-ENTRY (C-P45-L8) which is 75 bytes long and has 130
      occurrences.  Since the length and number of occurrences are in
      decimal, but the index is hex, first convert 122A to decimal
      giving 4,650 decimal. Dividing by 75, the occurring field length,
      gives 62 with no remainder. (If there had been a remainder we have
      the wrong index or it has been overlaid.) We have to add 1 to get
      occurrence number, so the index points to occurrence #63, which is
      valid, since the table has 130 occurrences.
  HOSPITAL-COST-TOTAL (IX2) (C-P45-L16)
    BLW=0006+7C3 (BLW cells refer to WORKING-STORAGE)
    Length 5 (5P at right shows a 5-byte packed decimal field)
    Data Type packed decimal (note COMP-3 in the source code)
    To locate the field in the dump, add the original field offset (7C3)
      to the offset due to the index (122A) to get a total offset from
      BLW 6 of 19ED OR BLW 7 + 9ED, as all BL cells are hex 1000 long.
    Look for "Working storage referenced by TGT BLW cell 7 x('7')"
      (begins D-P808-L11), then read down the DSPL column to the line
      whose DSPL value is nearest, but not greater than 9ED: 009E0
      (D-P809-L42).
    Locate the data beginning at offset 9ED by counting across from the
      first data byte. Note that the first column is DSPL, the second
      column is Address, and the Data begins in the third column. By
      counting across 2 hex digits per byte, the data at offset 9ED is
      found to begin in the 2nd byte of the 4TH column of data and the
      5-byte hex content is 000056854C. This is a valid packed decimal
      +56,854.

  Abend caused by: subscript out of range:
               SUB-2

  Data Structures: Indexed table, subscripted table

  Data Types:      Packed decimal.

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
                   =====> DUMP0A <=====

Abend Code: S0C7 (D-P847-L20).

Abend Location: NEXT instruction is ABNDCOB+109A (D-P847-L28).

Source line is found by first finding the condensed listing in the
  compile listing, which follows the "LITERAL POOL MAP FOR LITERALS IN
  THE CGT". It is a 3-column listing with "LINE #  HEXLOC  VERB" above
  each column (C-P65-L18). Look in the HEXLOC column left-to-right and
  top-to-bottom for the entry nearest, but LESS than 109A. This is:
                   000398 00107E MULTIPLY  (C-P65-L55)
  The source program lines (C-P48-L15-16) are:

     398 MULTIPLY HOSPITAL-PROCEDURES-TOTAL (IX2) BY
     399     DOCTOR-PROCEDURES-TOTAL (J).

Data fields:
  IX2 is assigned the COBOL name IDX=0004 (C-P45-L9)
    To find the content of an index in the Abend-Aid dump, first locate
      the "Supporting Data" page (begins D-P905-L4) which follows the
      BLW cell listing. For Index cells, the COBOL compiler assigns
      names relative to 1, while the Abend-Aid dump gives names relative
      to zero. For this reason, although the COBOL listing shows IDX=004
      we must use the IDX 3 (X'3') field (D-P905-L26).  Contents are hex
      00001275 (D-P905-L26).
    Indexes are always 4-byte hex values giving the offset (relative to
      0) from the beginning of the table. IX2 is used for
      HOSPITAL-TABLE-ENTRY (C-P45-L8) which is 75 bytes long and has 130
      occurrences.  Since the length and number of occurrences are in
      decimal, but the index is hex, first convert 1275 to decimal
      giving 4,725 decimal. Dividing by 75, the occurring field length,
      gives 63 with no remainder. (If there had been a remainder we have
      the wrong index or it has been overlaid.) We have to add 1 to get
      occurrence number, so the index points to occurrence #64, which is
      valid, since the table has 130 occurrences.
  HOSPITAL-PROCEDURES-TOTAL (IX2) (C-P45-L17)
    BLW=0006+7C8 (BLW cells refer to WORKING-STORAGE)
    Length 3 (3P at right shows a 3-byte packed decimal field)
    Data Type packed decimal (note COMP-3 in the source code)
    To locate the field in the dump, add the original field offset (7C8)
      to the offset due to the index (1275) to get a total offset from
      BLW 6 of 1A3D OR BLW 7 + A3D, as all BL cells are hex 1000 long.
    Look for "Working storage referenced by TGT BLW cell 7 x('7')"
      (begins D-P878-L11), then read down the DSPL column to the line
      whose DSPL value is nearest, but not greater than A3D: 00A20
      (D-P879-L44).
    Locate the data beginning at offset A3D by counting across from the
      first data byte. Note that the first column is DSPL, the second
      column is Address, and the Data begins in the third column. By
      counting across 2 hex digits per byte, the data at offset A3D is
      found to begin in the 2nd byte of the 8th column of data and the
      3-byte hex content is 063C40. This is NOT valid packed decimal,
      and is the cause of this S0C7 abend.
  J (C-P43-L36)
    BLW=0000+040 (BLW cells refer to WORKING-STORAGE)
    Length 5 (the 5C at right specifies a 5-byte, character field)
    Data type zoned decimal (note the pic 9(5) in the source code)
    To find the content of this subscript field in the dump, find the
      "Working storage referenced by TGT BLW cell 0 (X'0')" (D-P860-L20)
      and look down the DSPL column to find the displacement nearest to
      040 without exceeding it: 00040 (D-P860-L24).  Now jump over the
      first two columns (DSPL and Address) and begin counting in the
      first column of data, two hex digits per column, locating 040 at
      the 1st byte of the 1st data column. J is 5 bytes long, so its
      hex content is F0F0F0F4F2, a valid zoned decimal unsigned 42.
    Since J is being used as a subscript to DOCTOR-PROCEDURES-TOTAL
      (C-P45-L26) a field in the group item DOCTOR-TABLE-ENTRY
      (C-P45-L20) which is 43 bytes long and occurs 800 times, J is a
      valid subscript for the table.
  DOCTOR-PROCEDURES-TOTAL (J) (C-P45-L26)
    BLW=0008+DC1 (BLW cells refer to WORKING-STORAGE)
    Length 2 (the 2P at right shows a 5-byte packed decimal field).
    Data type packed decimal (note COMP-3 in the source code).
    To find this field in the dump, we must add the initial offset of
      DC1 to the offset due to the subscript (42 - 1) * 43 = 1,763
      decimal or 6E3 hex. DC1 + 6E3 = 14A4 so the field will be at BLW
      8 + 14A4, or, since all BL cells are of length hex 1000, it will
      actually be found at BLW 9 + 4A4.
    Next, locate "Working storage referenced by TGT BLW cell 9 (X'9')"
      (D-P883-L20) and look down the DSPL column to find the line
      nearest, but not greater than 4A4: 004A0 (D-P884-L9).  Skip the
      DSPL and Address columns and begin counting across in the first
      data column, 2 hex digits per byte until you get to 4A4 in the 1ST
      byte of the 2nd column of data.  Since the field is 2 bytes long,
      its content is hex 287C which is a valid packed decimal +287.

  Abend caused by: Field contains invalid packed decimal data
               HOSPITAL-PROCEDURES-TOTAL (IX2)

  Data Structures: Indexed table, subscripted table

  Data Types:      Packed decimal, zoned decimal.

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
                   =====> DUMP0B <=====

Abend Code: S0C7 (D-P917-L20).

Abend Location: NEXT instruction is ABNDCOB+FAA (D-P917-L28).

Source line is found by first finding the condensed listing in the
  compile listing, which follows the "LITERAL POOL MAP FOR LITERALS IN
  THE CGT". It is a 3-column listing with "LINE #  HEXLOC  VERB" above
  each column (C-P65-L18). Look in the HEXLOC column left-to-right and
  top-to-bottom for the entry nearest, but LESS than FAA. This is:
                   000382 000F88 ADD       (C-P65-L51)
  The source program lines (C-P47-L56-57) are:

     382 ADD CLAIM-ROOM-RATE (SUB-3) TO
     383     GROUP-CLAIMS-TOTAL (IX3).

Data fields:
  SUB-3 (C-P43-L31)
    BLW=0000+034 (BLW cells refer to WORKING-STORAGE)
    Length 2 (the 2C at right specifies a 5-byte, character field)
    Data type binary (note the COMP in the source code)
    To find the content of this subscript field in the dump, find the
      "Working storage referenced by TGT BLW cell 0 (X'0')" (D-P930-L20)
      and look down the DSPL column to find the displacement nearest to
      034 without exceeding it: 00020 (D-P930-L23).  Now jump over the
      first two columns (DSPL and Address) and begin counting in the
      first column of data, two hex digits per column, locating 034 at
      the 1st byte of the 6th data column. SUB-3 is 2 bytes long, so its
      hex content is 0019, a valid binary number whose decimal
      equivalent is 25.
    Since SUB-3 is being used as a subscript to CLAIM-ROOM-RATE
      (C-P44-L48) a field in the group item CLAIM-TABLE-ENTRY
      (C-P44-L40) which is 130 bytes long and occurs 100 times, SUB-3 is
      a valid subscript for the table.
  CLAIM-ROOM-RATE (SUB-3) (C-P44-L48)
    BLW=0000+1BE (BLW cells refer to WORKING-STORAGE)
    Length 4 (the 4C at right shows a 4-byte character field).
    Data type binary (note COMP in the source code).
    To find this field in the dump, we must add the initial offset of
      1BE to the offset due to the subscript (25 - 1) * 130 = 3,120
      decimal or C30 hex. 1BE + C30 = DEE so the field will be at BLW
      0 + DEE.
    Next, locate "Working storage referenced by TGT BLW cell 0 (X'0')"
      (D-P930-L20) and look down the DSPL column to find the line
      nearest, but not greater than DEE: 00DE0 (D-P932-L28).  Skip the
      DSPL and Address columns and begin counting across in the first
      data column, 2 hex digits per byte until you get to DEE in the 4th
      byte of the 4th column of data.  Since the field is 4 bytes long,
      its content is hex 005C7807, a valid binary number.
  IX3 is assigned the COBOL name IDX=0003 (C-P44-L54)
    To find the content of an index in the Abend-Aid dump, first locate
      the "Supporting Data" page (begins D-P975-L5) which follows the
      BLW cell listing. For Index cells, the COBOL compiler assigns
      names relative to 1, while the Abend-Aid dump gives names relative
      to zero. For this reason, although the COBOL listing shows IDX=003
      we must use the IDX 2 (X'2') field (D-P975-L25).  Contents are hex
      000014C8 (D-P975-L25).
    Indexes are always 4-byte hex values giving the offset (relative to
      0) from the beginning of the table. IX3 is used for
      GROUP-CLAIMS-TOTAL (C-P45-L4), a field in the group item
      GROUP-TABLE-ENTRY (C-P44-L53) which is 76 bytes long and has 172
      occurrences.  Since the length and number of occurrences are in
      decimal, but the index is hex, first convert 14C8 to decimal
      giving 5,320 decimal.  Dividing by 76, the occurring field length,
      gives 70 with no remainder. (If there had been a remainder we have
      the wrong index or it has been overlaid.) We have to add 1 to get
      occurrence number, so the index points to occurrence #71, which is
      valid, since the table has 172 occurrences.
  GROUP-CLAIMS-TOTAL (IX3) (C-P45-L4)
    BLW=0003+4B5 (BLW cells refer to WORKING-STORAGE)
    Length 5 (5P at right shows a 5-byte packed decimal field)
    Data Type packed decimal (note COMP-3 in the source code)
    To locate the field in the dump, add the original field offset (4B5)
      to the offset due to the index (14C8) to get a total offset from
      BLW 3 of 197D OR BLW 4 + 97D, as all BL cells are hex 1000 long.
    Look for "Working storage referenced by TGT BLW cell 4 x('4')"
      (begins D-P940-L20), then read down the DSPL column to the line
      whose DSPL value is nearest, but not greater than 97D: 00960
      (D-P941-L47).
    Locate the data beginning at offset 97D by counting across from the
      first data byte. Note that the first column is DSPL, the second
      column is Address, and the Data begins in the third column. By
      counting across 2 hex digits per byte, the data at offset 97D is
      found to begin in the 2nd byte of the 8th column of data and the
      5-byte hex content is 005C25340C. This is a NOT a valid packed
      decimal number, and is the cause of the abend.

  Abend caused by: Field contains invalid packed decimal data
               GROUP-CLAIMS-TOTAL (IX3)

  Data Structures: Indexed table, subscripted table

  Data Types:      Packed decimal, binary.
./ ADD NAME=ABNDCOB  0136-91340-94115-0935-00618-00429-00000-USER02
000010 IDENTIFICATION DIVISION.
000020 PROGRAM-ID. ABNDCOB.
000030*REMARKS. THIS PROGRAM IS USED TO PRODUCE ABENDS FOR THE ABEND-AID
000040*         DUMP CLASS. ANY RESEMBLANCE TO VALID PROCESSING IS PURELY
000050*         COINCIDENTAL, THOUGH NORMAL PROGRAMMING STANDARDS ARE
000060*         USED. THE INTENT IS TO PROVIDE A SINGLE PROGRAM LISTING
000070*         THAT CAN BE USED FOR ALL DUMPS IN ORDER TO REDUCE THE
000080*         VOLUME OF PAPER DISTRIBUTED TO STUDENTS.
000090*         EMPHASIS IS ON COMMONLY OCCURRING ABENDS, ESPECIALLY S0C7.
000100*         MANY OF THE DUMPS CONTAIN SUBSCRIPTED DATA REFERENCES TO
000110*         GIVE PRACTICE IN THE LOCATION OF TABLE ELEMENTS WHEN INDEXES
000120*         AND SUBSCRIPTS ARE USED. SUBSCRIPTS CONTAINING ZONED DECIMAL,
000130*         PACKED DECIMAL, AND BINARY VALUES ARE USED. SEVERAL SUB
000140*         PROGRAMS ARE USED, AND ABENDS MAY OCCURS WITHIN THEM TO GIVE
000150*         EXPERIENCE IF FOLLOWING CALL-RETURN PATHS.
000160 DATE-WRITTEN. DEC 1991.
000170 DATE-COMPILED.
000180 ENVIRONMENT DIVISION.
000190 CONFIGURATION SECTION.
000200 INPUT-OUTPUT SECTION.
000210 FILE-CONTROL.
000220     SELECT TABLE-FILE
000230       ASSIGN TO UT-S-READER1.
000240     SELECT TRAN-FILE
000250       ASSIGN TO UT-S-INPUT2.
000260     SELECT PRT-FILE
000270       ASSIGN TO UT-S-PRINT1.
000280 DATA DIVISION.
000290 FILE SECTION.
000300*
000330 FD  TABLE-FILE
000340       RECORD CONTAINS 80 CHARACTERS
000350       RECORDING MODE IS F
000360       BLOCK CONTAINS 0 RECORDS
000370       LABEL RECORD IS STANDARD
000380       DATA RECORDS ARE TABLE-CARD,
000381                        CLAIM-DATA,
000382                        GROUP-DATA,
000383                        HOSPITAL-DATA,
000384                        DOCTOR-DATA.
000385*
000390 01  TABLE-CARD.
000400     05  TABLE-ID                PIC X.
000401         88 TABLE-COMMENT        VALUE '*'.
000410         88 CLAIM-DATA-RECORD    VALUE '1'.
000420         88 GROUP-DATA-RECORD    VALUE '2'.
000430         88 HOSPITAL-DATA-RECORD VALUE '3'.
000431         88 DOCTOR-DATA-RECORD   VALUE '4'.
000432     05  FILLER                  PIC X(79).
000433*
000440 01  CLAIM-DATA.
000441     05  FILLER                  PIC X.
000442     05  CLAIM-DATA-SUB          PIC S9(4).
000443     05  CLAIM-DATA-DATE         PIC 9(6).
000444     05  CLAIM-DATA-GROUP        PIC X(5).
000445     05  CLAIM-DATA-HOSPITAL     PIC X(5).
000446     05  CLAIM-DATA-DOCTOR       PIC X(5).
000447     05  CLAIM-DATA-TREATMENTS   PIC 9.
000448     05  CLAIM-DATA-CHARGES      PIC S9(5).
000449     05  CLAIM-DATA-DESCRIPTION  PIC X(48).
000450*
000460 01  GROUP-DATA.
000470     05  FILLER                  PIC X.
000600     05  GROUP-DATA-SUB          PIC S9(4).
000601     05  GROUP-DATA-IDENT        PIC X(5).
000602     05  GROUP-DATA-SIZE         PIC 9(5).
000603     05  GROUP-DATA-NAME         PIC X(35).
000604     05  GROUP-DATA-CITY         PIC X(15).
000605     05  GROUP-DATA-ZIP          PIC S9(5).
000606     05  FILLER                  PIC X(10).
000607*
000617 01  HOSPITAL-DATA.
000618     05  FILLER                  PIC X.
000619     05  HOSPITAL-DATA-SUB       PIC S9(4).
000620     05  HOSPITAL-DATA-IDENT     PIC X(5).
000621     05  HOSPITAL-DATA-NBR-BEDS  PIC 9(5).
000622     05  HOSPITAL-DATA-NAME      PIC X(35).
000623     05  HOSPITAL-DATA-LOCATION  PIC X(15).
000624     05  HOSPITAL-DATA-ZIP-CODE  PIC 9(5).
000625     05  FILLER                  PIC X(10).
000626*
000631 01  DOCTOR-DATA.
000632     05  FILLER                  PIC X.
000633     05  DOCTOR-DATA-SUB         PIC S9(4).
000634     05  DOCTOR-DATA-IDENT       PIC X(5).
000635     05  DOCTOR-DATA-NAME        PIC X(22).
000636     05  DOCTOR-DATA-ZIP-CODE    PIC 9(5).
000637     05  FILLER                  PIC X(43).
000643*
000644 FD  TRAN-FILE
000645       RECORD CONTAINS 80 CHARACTERS
000650       RECORDING MODE IS F
000651       BLOCK CONTAINS 0 RECORDS
000660       LABEL RECORDS ARE STANDARD
000670       DATA RECORDS IS CONTROL-REC.
000671*
000680 01  CONTROL-REC.
000690     05 REC-TYPE                        PIC XX.
000691        88 CONTROL-COMMENT              VALUE '**'.
000692        88 SURGERY-STATISTICS           VALUE '01'.
000693        88 OPERATING-ROOM-STATISTICS    VALUE '02'.
000694        88 ADMINISTRATIVE-STATISTICS    VALUE '03'.
000695        88 INTERNAL-MEDICINE-STATISTICS VALUE '04'.
000696        88 PEDIATRIC-STATISTICS         VALUE '05'.
000697        88 GERIATRIC-STATISTICS         VALUE '06'.
000698        88 JANITORIAL-STATISTICS        VALUE '07'.
000699        88 NURSING-STAFF-STATISTICS     VALUE '08'.
000700        88 MEDICAL-STAFF-STATISTICS     VALUE '09'.
000701        88 CARDIAC-STAFF-STATISTICS     VALUE '0A'.
000702     05 SUB-VALUE                       PIC S9(4)
000703                                        OCCURS 18 TIMES.
000710     05 FILLER                          PIC X(6).
000750*
000780 FD  PRT-FILE
000790       RECORD CONTAINS 133 CHARACTERS
000800       RECORDING MODE IS F
000820       LABEL RECORDS ARE STANDARD
000830       DATA RECORD IS EXCEPTION-PRT.
000831*
000840 01  EXCEPTION-PRT.
000850     02 SKIP-NBR                 PIC 9.
000860     02 PRINT-LINE.
000870           05 PRT-REASON         PIC X(20).
000880           05 FILLER             PIC XXX.
000890           05 PRT-RECD           PIC X(80).
000900           05 FILLER             PIC X(29).
000901*
000940 WORKING-STORAGE SECTION.
000950 77  FILLER                      PIC X(36)
000960                 VALUE 'DUMPCLSV WORKING STORAGE STARTS HERE'.
000961*
000962 01  MISCELLANEOUS-AREAS.
000963     05  FOUND-SWITCH            PIC X VALUE 'N'.
000964         88  ENTRY-UPDATED       VALUE 'Y'.
000965     05  END-OF-TABLE-SWITCH     PIC X VALUE 'N'.
000966         88  END-OF-TABLE-FILE   VALUE 'Y'.
000967     05  END-OF-TRAN-SWITCH      PIC X VALUE 'N'.
000968         88  END-OF-TRAN-FILE    VALUE 'Y'.
000970     05  PAGE-NO                 PIC S999 COMP-3 VALUE +0.
000990     05  LINE-COUNT              PIC S999 COMP-3 VALUE +0.
001010     05  SUB-1                   PIC 99.
001020     05  SUB-2                   PIC S9(5) COMP-3.
001030     05  SUB-3                   PIC S9(4) COMP.
001040     05  ENTRY-WORK              PIC S9(9) COMP-3
001050                                     VALUE +1234567.
001060     05  I                       PIC 99.
001070     05  N                       PIC S9(5) COMP-3.
001080     05  J                       PIC 9(5).
001090     05  M                       PIC S9(4) COMP.
001091     05  QUOTIENT                PIC S9(8) COMP.
001092     05  TIME-FIELD              PIC 9(8).
001100     05  CLAIM-ZERO.
001102         10  CZ1                 PIC S9(6) COMP-3 VALUE +0.
001103         10  CZ2                 PIC X(5) VALUE SPACES.
001104         10  CZ3                 PIC X(5) VALUE SPACES.
001105         10  CZ4                 PIC X(5) VALUE SPACES.
001106         10  CZ5                 PIC 9(3) VALUE 0.
001107         10  CZ6                 PIC S9(5)V99 COMP VALUE +0.
001109         10  CZ7                 PIC S9(5)V99 COMP-3 VALUE +0.
001110         10  CZ8                 PIC X(100) VALUE SPACES.
001111     05  GROUP-ZERO.
001112         10  GZ1                 PIC X(5) VALUE SPACES.
001113         10  GZ2                 PIC 9(5) VALUE 0.
001114         10  GZ3                 PIC X(35) VALUE SPACES.
001115         10  GZ4                 PIC X(15) VALUE SPACES.
001116         10  GZ5                 PIC S9(5) VALUE +0.
001117         10  GZ6                 PIC S9(5) COMP VALUE +0.
001118         10  GZ7                 PIC S9(7)V99 COMP-3 VALUE +0.
001119         10  GZ8                 PIC S9(3) COMP-3 VALUE +0.
001126     05  HOSPITAL-ZERO.
001127         10  HZ1                 PIC X(5) VALUE SPACES.
001128         10  HZ2                 PIC X(35) VALUE SPACES.
001129         10  HZ3                 PIC X(15) VALUE SPACES.
001130         10  HZ4                 PIC 9(5) VALUE 0.
001131         10  HZ5                 PIC 9(5) COMP VALUE 0.
001132         10  HZ6                 PIC S9(5) COMP-3 VALUE +0.
001133         10  HZ7                 PIC S9(7)V99 COMP-3 VALUE +0.
001134         10  HZ8                 PIC S9(3) COMP-3 VALUE +0.
001135     05  DOCTOR-ZERO.
001136         10  DZ1                 PIC X(5) VALUE SPACES.
001137         10  DZ2                 PIC X(22) VALUE SPACES.
001138         10  DZ3                 PIC 9(5) VALUE 0.
001139         10  DZ4                 PIC S9(5) COMP VALUE +0.
001140         10  DZ5                 PIC S9(7)V99 COMP-3 VALUE +0.
001141         10  DZ6                 PIC S9(3) COMP-3 VALUE +0.
001142     05  JUL-DATE                PIC 9(5) COMP-3 VALUE 0.
001143     05  UNPK-DATE               PIC 9(5).
001144     05  FILLER                      REDEFINES UNPK-DATE.
001145         10  UPK-YR              PIC 99.
001146         10  UPK-DAY             PIC 999.
001147     05  CUR-DATE                PIC X VALUE 'C'.
001148     05  RET-DATE                PIC X VALUE 'R'.
001149     05  END-DATE                PIC 9(5) COMP-3 VALUE 0.
001150*
001151 01  CLAIM-TABLE.
001152     05  CLAIM-TABLE-ENTRY       OCCURS 100 TIMES
001153                                     INDEXED BY IX1, INDX1.
001154         10  CLAIM-DATE-INCURRED PIC S9(6) COMP-3.
001155         10  CLAIM-GROUP         PIC X(5).
001156         10  CLAIM-HOSPITAL      PIC X(5).
001157         10  CLAIM-DOCTOR-NBR    PIC X(5).
001158         10  CLAIM-NBR-TREATMENTS PIC 9(3).
001161         10  CLAIM-ROOM-RATE     PIC S9(5)V99 COMP.
001162         10  CLAIM-TOTAL-CHARGES PIC S9(5)V99 COMP-3.
001163         10  CLAIM-DESCRIPTION   PIC X(100).
001164*
001165 01  GROUP-TABLE.
001170     05  GROUP-TABLE-ENTRY       OCCURS 172 TIMES
001180                                     INDEXED BY IX3.
001190         10  GROUP-IDENT         PIC X(5).
001200         10  GROUP-SIZE          PIC 9(5).
001201         10  GROUP-NAME          PIC X(35).
001202         10  GROUP-CITY          PIC X(15).
001203         10  GROUP-DOLLAR-TOTAL  PIC S9(5).
001204         10  GROUP-NBR-CLAIMS    PIC S9(5) COMP.
001205         10  GROUP-CLAIMS-TOTAL PIC S9(7)V99 COMP-3.
001206         10  GROUP-PROCEDURES-TOTAL PIC S9(3) COMP-3.
001207*
001208 01  HOSPITAL-TABLE.
001210     05  HOSPITAL-TABLE-ENTRY    OCCURS 130 TIMES
001220                                     INDEXED BY IX2.
001230         10  HOSPITAL-IDENT      PIC X(5).
001240         10  HOSPITAL-NAME       PIC X(35).
001241         10  HOSPITAL-LOCATION   PIC X(15).
001242         10  HOSPITAL-ZIP-CODE   PIC 9(5).
001250         10  HOSPITAL-NBR-BEDS   PIC 9(5) COMP.
001251         10  HOSPITAL-NBR-PATIENTS PIC S9(5) COMP-3.
001260         10  HOSPITAL-COST-TOTAL PIC S9(7)V99 COMP-3.
001262         10  HOSPITAL-PROCEDURES-TOTAL PIC S9(5) COMP-3.
001263*
001264 01  DOCTOR-TABLE.
001265     05  DOCTOR-TABLE-ENTRY      OCCURS 800 TIMES.
001267         10  DOCTOR-IDENT        PIC X(5).
001268         10  DOCTOR-NAME         PIC X(22).
001269         10  DOCTOR-ZIP-CODE     PIC 9(5).
001271         10  DOCTOR-NBR-PATIENTS PIC S9(5) COMP.
001272         10  DOCTOR-COST-TOTAL   PIC S9(7)V99 COMP-3.
001273         10  DOCTOR-PROCEDURES-TOTAL PIC S9(3) COMP-3.
001380*
001410 PROCEDURE DIVISION.
001411*
001412     PERFORM A100-INITIALIZATION THRU A100-EXIT.
001413     PERFORM B100-MAINLINE THRU B100-EXIT
001414         UNTIL END-OF-TRAN-FILE.
001419     PERFORM Z100-END-OF-JOB THRU Z100-EXIT.
001420     STOP RUN.
001421*
001422 A100-INITIALIZATION.
001423     OPEN OUTPUT PRT-FILE INPUT TRAN-FILE TABLE-FILE.
001430     MOVE SPACES TO EXCEPTION-PRT.
001440     MOVE '1' TO SKIP-NBR.
001450     CALL 'SYSDATE' USING CUR-DATE, JUL-DATE END-DATE.
001460     PERFORM T100-TABLE-LOAD THRU T100-EXIT.
001461 A100-EXIT. EXIT.
001470*
001498 B100-MAINLINE.
001499     PERFORM C100-READ-TRANSACTION THRU C100-EXIT.
001690     IF END-OF-TRAN-FILE
001700         GO TO B100-EXIT.
001701     IF CONTROL-COMMENT
001702         NEXT SENTENCE
001703     ELSE
001704         PERFORM D100-PROCESS-SUBS THRU D100-EXIT
001705         PERFORM E100-PROCESS-DATA THRU E100-EXIT.
002231 B100-EXIT. EXIT.
002232*
002233 C100-READ-TRANSACTION.
002234     READ TRAN-FILE
002235       AT END MOVE 'Y' TO END-OF-TRAN-SWITCH
002236           GO TO B100-EXIT.
002240     MOVE 'CONTROL RECORD' TO PRT-REASON.
002241     MOVE CONTROL-REC TO PRT-RECD.
002242     PERFORM X100-PRINT-ROUTINE THRU X100-EXIT.
002243 C100-EXIT. EXIT.
002250*
002251 D100-PROCESS-SUBS.
002254     MOVE SUB-VALUE (1) TO SUB-1.
002255     MOVE SUB-VALUE (2) TO SUB-2.
002256     MOVE SUB-VALUE (3) TO SUB-3.
002257     MOVE SUB-VALUE (4) TO I.
002258     MOVE SUB-VALUE (5) TO N.
002259     MOVE SUB-VALUE (6) TO J.
002260     MOVE SUB-VALUE (7) TO M.
002261     SET IX1 TO SUB-VALUE (8).
002262     SET INDX1 TO SUB-VALUE (9).
002263     SET IX3 TO SUB-VALUE (10).
002264     SET IX2 TO SUB-VALUE (11).
002265 D100-EXIT. EXIT.
002266*
002270 E100-PROCESS-DATA.
002280     IF SURGERY-STATISTICS
002282         PERFORM F100-PROCESS-SURGERY THRU F100-EXIT
002283     ELSE IF OPERATING-ROOM-STATISTICS
002293         PERFORM F200-PROCESS-OPERATING THRU F200-EXIT
002294     ELSE IF ADMINISTRATIVE-STATISTICS
002295         PERFORM F900-PROCESS-ADMINISTRATIVE THRU F900-EXIT
002304     ELSE IF INTERNAL-MEDICINE-STATISTICS
002305         PERFORM F300-PROCESS-INTERNAL THRU F300-EXIT
002312     ELSE IF PEDIATRIC-STATISTICS
002313         PERFORM F400-PROCESS-PEDIATRIC THRU F400-EXIT
002319     ELSE IF GERIATRIC-STATISTICS
002320         PERFORM F500-PROCESS-GERIATRIC THRU F500-EXIT
002325     ELSE IF JANITORIAL-STATISTICS
002326         PERFORM F600-PROCESS-JANITORIAL THRU F600-EXIT
002330     ELSE IF NURSING-STAFF-STATISTICS
002331         PERFORM F700-PROCESS-NURSING THRU F700-EXIT
002334     ELSE IF MEDICAL-STAFF-STATISTICS
002335         PERFORM F800-PROCESS-MEDICAL-STAFF THRU F800-EXIT
002336     ELSE IF CARDIAC-STAFF-STATISTICS
002337         PERFORM F1000-PROCESS-CARDIAC THRU F1000-EXIT
002339     ELSE
002340       MOVE 'ERROR IN TRAN' TO PRT-REASON
002341       MOVE CONTROL-REC TO PRT-RECD
002342       PERFORM X100-PRINT-ROUTINE THRU X100-EXIT
002350       CALL 'COBABEND'.
002400 E100-EXIT. EXIT.
003790*
003791 F100-PROCESS-SURGERY.
003792     PERFORM H100-STATISTICS THRU H100-EXIT
003793         VARYING IX1 FROM 1 BY 1 UNTIL IX1 > 100.
003794 F100-EXIT. EXIT.
003795*
003796 F200-PROCESS-OPERATING.
003797     MOVE 'Y' TO FOUND-SWITCH.
003798     CALL 'SYSDATE' USING CUR-DATE, JUL-DATE.
003799     ADD CLAIM-TOTAL-CHARGES (INDX1) TO
003800         GROUP-DOLLAR-TOTAL (M).
003801     MOVE ZEROS TO ENTRY-WORK.
003802 F200-EXIT. EXIT.
003803*
003804 F300-PROCESS-INTERNAL.
003805     MOVE 7 TO END-DATE.
003806     CALL 'SYSDATE' USING RET-DATE, END-DATE, JUL-DATE.
003807     SUBTRACT GROUP-PROCEDURES-TOTAL (IX3) FROM
003808         HOSPITAL-PROCEDURES-TOTAL (SUB-2).
003809     MOVE JUL-DATE TO UNPK-DATE.
003810 F300-EXIT. EXIT.
003811*
003812 F400-PROCESS-PEDIATRIC.
003813     IF END-DATE > 365
003814         SUBTRACT 4 FROM END-DATE.
003815     COMPUTE DOCTOR-NBR-PATIENTS (J) =
003816         .7 * HOSPITAL-NBR-PATIENTS (IX2).
003818     CALL 'SYSDATE' USING RET-DATE, END-DATE, JUL-DATE.
003819 F400-EXIT. EXIT.
003820*
003821 F500-PROCESS-GERIATRIC.
003823     CALL 'SYSDATE' USING CUR-DATE, JUL-DATE.
003824     COMPUTE END-DATE = JUL-DATE + 7.
003825     IF END-DATE < 92001
003826         ADD 5 TO END-DATE.
003827     ADD CLAIM-NBR-TREATMENTS (INDX1) TO
003828         HOSPITAL-PROCEDURES-TOTAL (SUB-3).
003829     MOVE 'N' TO FOUND-SWITCH.
003830 F500-EXIT. EXIT.
003831*
003832 F600-PROCESS-JANITORIAL.
003833     MOVE 33 TO JUL-DATE.
003834     MOVE 'N' TO FOUND-SWITCH.
003835     CALL 'SYSDATE' USING RET-DATE,
003836                          DOCTOR-COST-TOTAL (N),
003837                          JUL-DATE.
003839     ADD CLAIM-TOTAL-CHARGES (IX1) TO
003840         DOCTOR-COST-TOTAL (N).
003841 F600-EXIT. EXIT.
003842*
003843 F700-PROCESS-NURSING.
003844     MOVE J TO DOCTOR-NBR-PATIENTS(SUB-1).
003845     MOVE 'N' TO FOUND-SWITCH.
003846     CALL 'SYSDATE' USING RET-DATE,
003847                          JUL-DATE,
003848                          END-DATE.
003851     DIVIDE DOCTOR-NBR-PATIENTS (I) INTO
003852            GROUP-NBR-CLAIMS (IX3) GIVING
003853            ENTRY-WORK.
003854     ADD 1 TO ENTRY-WORK.
003855 F700-EXIT. EXIT.
003856*
003857 F800-PROCESS-MEDICAL-STAFF.
003859     ADD 17 TO ENTRY-WORK.
003860     CALL 'SYSDATE' USING RET-DATE, JUL-DATE, END-DATE.
003863     ADD CLAIM-ROOM-RATE (SUB-3) TO
003864         GROUP-CLAIMS-TOTAL (IX3).
003865     MOVE 'R' TO FOUND-SWITCH.
003866 F800-EXIT. EXIT.
003867*
003868 F900-PROCESS-ADMINISTRATIVE.
003869     ADD 13 TO ENTRY-WORK.
003870     CALL 'SYSDATE' USING RET-DATE, END-DATE, JUL-DATE.
003871     SUBTRACT GROUP-CLAIMS-TOTAL (SUB-2) FROM
003872         HOSPITAL-COST-TOTAL (IX2).
003873     MOVE 'R' TO FOUND-SWITCH.
003874 F900-EXIT. EXIT.
003875*
003876 F1000-PROCESS-CARDIAC.
003877     ADD 12 TO ENTRY-WORK.
003878     CALL 'SYSDATE' USING RET-DATE, JUL-DATE, END-DATE.
003879     MULTIPLY HOSPITAL-PROCEDURES-TOTAL (IX2) BY
003880         DOCTOR-PROCEDURES-TOTAL (J).
003881     MOVE 'Z' TO FOUND-SWITCH.
003882 F1000-EXIT. EXIT.
003883*
003884 H100-STATISTICS.
003885     IF CLAIM-GROUP (IX1) NOT EQUAL SPACES
003886         PERFORM H200-UPDATE-GROUP THRU H200-EXIT
003887         PERFORM H300-UPDATE-HOSPITAL THRU H300-EXIT
003888         PERFORM H400-UPDATE-DOCTOR THRU H400-EXIT.
003889 H100-EXIT. EXIT.
003890*
003891 H200-UPDATE-GROUP.
003892     MOVE 'N' TO FOUND-SWITCH.
003893     PERFORM J200-UPDATE-GROUP THRU J200-EXIT
003894         VARYING IX3 FROM 1 BY 1 UNTIL IX3 > 172
003895         OR ENTRY-UPDATED.
003896 H200-EXIT. EXIT.
003897*
003898 H300-UPDATE-HOSPITAL.
003899     MOVE 'N' TO FOUND-SWITCH.
003900     PERFORM J300-UPDATE-HOSPITAL THRU J300-EXIT
003901         VARYING IX2 FROM 1 BY 1 UNTIL IX2 > 130
003902         OR ENTRY-UPDATED.
003903 H300-EXIT. EXIT.
003904*
003905 H400-UPDATE-DOCTOR.
003906     MOVE 'N' TO FOUND-SWITCH.
003907     PERFORM J400-UPDATE-DOCTOR THRU J400-EXIT
003908         VARYING M FROM 1 BY 1 UNTIL M > 800
003909         OR ENTRY-UPDATED.
003910 H400-EXIT. EXIT.
003911*
003912 J200-UPDATE-GROUP.
003913     IF GROUP-IDENT (IX3) = SPACES
003914         NEXT SENTENCE
003915     ELSE
003916         MOVE 'Y' TO FOUND-SWITCH
003917         ADD 1 TO GROUP-NBR-CLAIMS (IX3)
003918         ADD CLAIM-TOTAL-CHARGES (IX1) TO
003919             GROUP-CLAIMS-TOTAL (IX3)
003920         ADD CLAIM-NBR-TREATMENTS (IX1) TO
003921             GROUP-PROCEDURES-TOTAL (IX3).
003922 J200-EXIT. EXIT.
003923*
003924 J300-UPDATE-HOSPITAL.
003925     IF HOSPITAL-IDENT (IX2) = SPACES
003926         NEXT SENTENCE
003927     ELSE
003928         MOVE 'Y' TO FOUND-SWITCH
003929         ADD 1 TO HOSPITAL-NBR-PATIENTS (IX2)
003930         ADD CLAIM-TOTAL-CHARGES (IX1) TO
003931             HOSPITAL-COST-TOTAL (IX2)
003932         ADD CLAIM-NBR-TREATMENTS (IX1) TO
003933             HOSPITAL-PROCEDURES-TOTAL (IX2).
003934 J300-EXIT. EXIT.
003935*
003936 J400-UPDATE-DOCTOR.
003937     IF DOCTOR-IDENT (M) = SPACES
003938         NEXT SENTENCE
003939     ELSE
003940         MOVE 'Y' TO FOUND-SWITCH
003941         ADD 1 TO DOCTOR-NBR-PATIENTS (M)
003942         ADD CLAIM-TOTAL-CHARGES (IX1) TO
003943             DOCTOR-COST-TOTAL (M)
003944         ADD CLAIM-NBR-TREATMENTS (IX1) TO
003945             DOCTOR-PROCEDURES-TOTAL (M).
003946 J400-EXIT. EXIT.
003947*
003948 T100-TABLE-LOAD.
003949     PERFORM T200-INITIALIZE-CLAIM THRU T200-EXIT
003950         VARYING INDX1 FROM 1 BY 1 UNTIL INDX1 GREATER THAN 100.
003951     PERFORM T300-INITIALIZE-GROUP THRU T300-EXIT
003952         VARYING IX3 FROM 1 BY 1 UNTIL IX3 GREATER THAN 172.
003953     PERFORM T400-INITIALIZE-HOSPITAL THRU T400-EXIT
003954         VARYING IX2 FROM 1 BY 1 UNTIL IX2 GREATER THAN 130.
003955     PERFORM T500-INITIALIZE-HOSPITAL THRU T500-EXIT
003956         VARYING M FROM 1 BY 1 UNTIL M GREATER THAN 800.
003957     PERFORM T600-LOAD-TABLE-DATA THRU T600-EXIT
003960         UNTIL END-OF-TABLE-FILE.
004000 T100-EXIT. EXIT.
004231*
004232 T200-INITIALIZE-CLAIM.
004233     MOVE CLAIM-ZERO TO CLAIM-TABLE-ENTRY (INDX1).
004234     ADD 1 TO CZ1.
004235     ADD 2 TO CZ5.
004236     ADD 3.25 TO CZ6.
004238     ADD 8.10 TO CZ7.
004239 T200-EXIT. EXIT.
004240*
004241 T300-INITIALIZE-GROUP.
004242     MOVE GROUP-ZERO TO GROUP-TABLE-ENTRY (IX3).
004243     ADD 9 TO GZ2.
004244     ADD 7 TO GZ5.
004245     ADD 5 TO GZ6.
004246     ADD 3.62 TO GZ7.
004247     ADD 1 TO GZ8.
004248 T300-EXIT. EXIT.
004249*
004250 T400-INITIALIZE-HOSPITAL.
004251     MOVE HOSPITAL-ZERO TO HOSPITAL-TABLE-ENTRY (IX2).
004252     ADD 5 TO HZ4.
004253     ADD 7 TO HZ5.
004254     ADD 2 TO HZ6.
004255     ADD 9.17 TO HZ7.
004256     ADD 1 TO HZ8.
004257 T400-EXIT. EXIT.
004258*
004259 T500-INITIALIZE-HOSPITAL.
004260     MOVE DOCTOR-ZERO TO DOCTOR-TABLE-ENTRY (M).
004261     ADD 4 TO DZ3.
004262     ADD 5 TO DZ4.
004263     ADD 6.33 TO DZ5.
004264     ADD 7 TO DZ6.
004265 T500-EXIT. EXIT.
004266*
004267 T600-LOAD-TABLE-DATA.
004268     READ TABLE-FILE
004269         AT END MOVE 'Y' TO END-OF-TABLE-SWITCH
004270             GO TO T600-EXIT.
004271     IF CLAIM-DATA-RECORD
004272         PERFORM T700-CLAIM-DATA-RECORD THRU T700-EXIT
004276     ELSE IF GROUP-DATA-RECORD
004277         PERFORM T800-GROUP-DATA-RECORD THRU T800-EXIT
004292     ELSE IF HOSPITAL-DATA-RECORD
004293         PERFORM T900-HOSPITAL-DATA-RECORD THRU T900-EXIT
004304     ELSE IF DOCTOR-DATA-RECORD
004305         PERFORM T1000-DOCTOR-DATA-RECORD THRU T1000-EXIT
004306     ELSE IF TABLE-COMMENT
004307         NEXT SENTENCE
004308     ELSE
004309       MOVE 'ERROR IN TABLES' TO PRT-REASON
004310       MOVE TABLE-CARD TO PRT-RECD
004311       PERFORM X100-PRINT-ROUTINE THRU X100-EXIT
004312       CALL 'COBABEND'.
004315 T600-EXIT. EXIT.
004316*
004317 T700-CLAIM-DATA-RECORD.
004318     IF CLAIM-DATA-SUB GREATER THAN ZERO
004319         SET IX1 TO CLAIM-DATA-SUB
004320     ELSE
004321         ACCEPT TIME-FIELD FROM TIME
004322         DIVIDE 100 INTO TIME-FIELD GIVING QUOTIENT REMAINDER M
004323         SET IX1 TO M.
004324     MOVE CLAIM-DATA-DATE TO CLAIM-DATE-INCURRED (IX1).
004325     MOVE CLAIM-DATA-GROUP TO CLAIM-GROUP (IX1).
004326     MOVE CLAIM-DATA-HOSPITAL TO CLAIM-HOSPITAL (IX1).
004327     MOVE CLAIM-DATA-DOCTOR TO CLAIM-DOCTOR-NBR (IX1).
004328     MOVE CLAIM-DATA-TREATMENTS TO CLAIM-NBR-TREATMENTS (IX1).
004329     MOVE CLAIM-DATA-CHARGES TO CLAIM-TOTAL-CHARGES (IX1).
004330     MOVE CLAIM-DATA-DESCRIPTION TO CLAIM-DESCRIPTION (IX1).
004331     IF CLAIM-DATA-SUB GREATER THAN ZERO
004332         DIVIDE 100 INTO CLAIM-DATA-SUB GIVING
004333             QUOTIENT REMAINDER M
004334                 CALL 'PROCNUM' USING
004335                     CLAIM-TABLE-ENTRY (IX1), M.
004336 T700-EXIT. EXIT.
004337*
004338 T800-GROUP-DATA-RECORD.
004339     IF GROUP-DATA-SUB GREATER THAN ZERO
004340         SET IX3 TO GROUP-DATA-SUB
004341     ELSE
004342         ACCEPT TIME-FIELD FROM TIME
004343         DIVIDE 172 INTO TIME-FIELD GIVING QUOTIENT REMAINDER M
004344         SET IX3 TO M.
004345     MOVE GROUP-DATA-IDENT TO GROUP-IDENT (IX3).
004346     MOVE GROUP-DATA-SIZE TO GROUP-SIZE (IX3).
004347     MOVE GROUP-DATA-NAME TO GROUP-NAME (IX3).
004348     MOVE GROUP-DATA-CITY TO GROUP-CITY (IX3).
004349     MOVE GROUP-DATA-ZIP TO GROUP-DOLLAR-TOTAL (IX3).
004350     IF GROUP-DATA-SUB GREATER THAN ZERO
004351         DIVIDE 100 INTO GROUP-DATA-SUB GIVING
004352             QUOTIENT REMAINDER M
004353                 CALL 'PROCNUM' USING
004354                     GROUP-TABLE-ENTRY (IX3), M.
004355 T800-EXIT. EXIT.
004356*
004357 T900-HOSPITAL-DATA-RECORD.
004358     IF HOSPITAL-DATA-SUB GREATER THAN ZERO
004359         SET IX2 TO HOSPITAL-DATA-SUB
004360     ELSE
004361         ACCEPT TIME-FIELD FROM TIME
004362         DIVIDE 130 INTO TIME-FIELD GIVING QUOTIENT REMAINDER M
004363         SET IX2 TO M.
004364     MOVE HOSPITAL-DATA-IDENT TO HOSPITAL-IDENT (IX2).
004365     MOVE HOSPITAL-DATA-NAME TO HOSPITAL-NAME (IX2).
004366     MOVE HOSPITAL-DATA-LOCATION TO HOSPITAL-LOCATION (IX2).
004367     MOVE HOSPITAL-DATA-ZIP-CODE TO HOSPITAL-ZIP-CODE (IX2).
004368     MOVE HOSPITAL-DATA-NBR-BEDS TO HOSPITAL-NBR-BEDS (IX2).
004369     IF HOSPITAL-DATA-SUB GREATER THAN ZERO
004370         DIVIDE 100 INTO HOSPITAL-DATA-SUB GIVING
004371             QUOTIENT REMAINDER M
004372                 CALL 'PROCNUM' USING
004373                     HOSPITAL-TABLE-ENTRY (IX2), M.
004374 T900-EXIT. EXIT.
004375*
004376 T1000-DOCTOR-DATA-RECORD.
004377     IF DOCTOR-DATA-SUB GREATER THAN ZERO
004378         MOVE DOCTOR-DATA-SUB TO M
004379     ELSE
004380         ACCEPT TIME-FIELD FROM TIME
004381         DIVIDE 800 INTO TIME-FIELD GIVING QUOTIENT REMAINDER M.
004382     MOVE DOCTOR-DATA-IDENT TO DOCTOR-IDENT (M).
004383     MOVE DOCTOR-DATA-NAME TO DOCTOR-NAME (M).
004384     MOVE DOCTOR-DATA-ZIP-CODE TO DOCTOR-ZIP-CODE (M).
004390 T1000-EXIT. EXIT.
004391*
004392 X100-PRINT-ROUTINE.
004393     IF LINE-COUNT > 58
004394         MOVE 1 TO LINE-COUNT,
004395         WRITE EXCEPTION-PRT AFTER ADVANCING SKIP-NBR,
004396         MOVE '2' TO SKIP-NBR
004397     ELSE
004398         WRITE EXCEPTION-PRT AFTER ADVANCING PAGE.
004399     ADD 1 TO LINE-COUNT.
004400     MOVE SPACES TO EXCEPTION-PRT.
004401 X100-EXIT. EXIT.
004402*
004403 Z100-END-OF-JOB.
004410     CLOSE PRT-FILE, TRAN-FILE TABLE-FILE.
004500 Z100-EXIT. EXIT.
./ ADD NAME=CARD12   0100-02148-02148-1426-00114-00114-00000-BC0THOR
 m e                                                                            
+Ø1    ¦---------------------------------------------¦        ¦-----------------
----------------------------¦                          Ø     ¦        ¦------
+ ---------------------¦        ¦        ¦            CODE CONVERSION CHART
 1 of 5¦                          Ø     ¦        ¦¦-------------------------¦
+ ¦        ¦        ¦---------------------------------------------´
             Ø     ¦        ¦¦¦-----------------------¦¦¦        ¦        ¦DE
ãC   HEX     BINARY   EBCDIC   ASCII   INSTR¦                          Ø     ¦
+         ¦¦¦ABEND-AID DUMP READING ¦¦¦        ¦        ¦  0    00   0000 0000
  NUL     NUL         ¦                          Ø     ¦        ¦¦¦----------
+ -------------¦¦¦        ¦        ¦  1    01   0000 0001    SOH     SOH
*¦                          Ø     ¦        ¦¦        COBOL II         ¦¦
+    ¦        ¦  2    02   0000 0010    STX     STX         ¦
       áØ     ¦        ¦¦-------------------------¦¦        ¦        ¦  3    0
 3   0000 0011    ETX     ETX         ¦                          Ø     ¦
+   ¦---------------------------¦        ¦        ¦  4    04   0000 0100    SEL
    EOT      SPM¦                          Ø     ¦
+                   ¦        ¦  5    05   0000 0101     HT     ENQ     BALR¦
                      Ø     ¦                                             ¦
+       ¦  6    06   0000 0110    RNL     ACK     BCTR¦
 .Ø     ¦                                             ¦        ¦  7    07   00
00 0111    DEL     BEL      BCR¦                          Ø     ¦
+                                  ¦        ¦  8    08   0000 1000     GE      B

S         ¦                          Ø     ¦
+             ¦        ¦  9    09   0000 1001    SPS      HT         ¦
                Ø     ¦                                             ¦
ñ¦ 10    0A   0000 1010    RPT      LF      SVC¦                          Ø
+   ¦                                             ¦        ¦ 11    0B   0000 101
1     VT      VT      BSM¦                          Ø     ¦
+                            ¦        ¦ 12    0C   0000 1100     FF      FF    B
ASSM¦                          Ø     ¦
+       ¦        ¦ 13    0D   0000 1101     CR      CR     BASR¦
          âØ     ¦---------------------------------------------´        ¦ 14
ä  0E   0000 1110     SO      SO     MVCL¦                          Ø     ¦
+    LOCATING COBOL DATA FIELDS IN A DUMP   ¦        ¦ 15    0F   0000 1111
SI      SI     CLCL¦                          Ø     ¦
+                      ¦        ¦ 16    10   0001 0000    DLE     DLE      LPR¦
                         Ø     ¦1. Using the COBOL compile listing, find the
+ ¦        ¦ 17    11   0001 0001    DC1     DC1      LNR¦
    çØ     ¦   field definition in the DATA DIVISION MAP.¦        ¦ 18    12
 0001 0010    DC2     DC2      LTR¦                          Ø     ¦2. For al
+ l fields except indexes, the field  ¦        ¦ 19    13   0001 0011    DC3
 DC3      LCR¦                          Ø     ¦   length is the numeric porti
+ on of the      ¦        ¦ 20    14   0001 0100    RES     DC4       NR¦
                   Ø     ¦   Asmblr Data Definition column.            ¦
<   ¦ 21    15   0001 0101     NL     NAK      CLR¦                            
+Ø     ¦3. For all fields, the Data Type gives the   ¦        ¦ 22    16   0001
0110     BS     SYN       OR¦                          Ø     ¦   kind of data
+  in the field. Disp-Num means ¦        ¦ 23    17   0001 0111    POC     ETB
     XR¦                          Ø     ¦   unpacked decimal. Display is char
+ acter    ¦        ¦ 24    18   0001 1000    CAN     CAN       LR¦
             Ø     ¦   data. Most others are obvious.            ¦        ¦ 2
ã5    19   0001 1001     EM      EM       CR¦                          Ø     ¦
+ 4. For Index-Name types, note the IDX number ¦        ¦ 26    1A   0001 1010
  UBS     SUB       AR¦                          Ø     ¦   in the Base Locato
+ r column and find the   ¦        ¦ 27    1B   0001 1011    CU1     ESC       S
R¦                          Ø     ¦   value in the Abend-AID dump SUPPORTING
+    ¦        ¦ 28    1C   0001 1100    IFS      FS       MR¦
       áØ     ¦   DATA section. Value is displacement from  ¦        ¦ 29    1
 D   0001 1101    IGS      GS       DR¦                          Ø     ¦   fir
+ st element to specified element.       ¦        ¦ 30    1E   0001 1110    IRS
     RS      ALR¦                          Ø     ¦5. If Base Locator is BLW,
+ the item is in    ¦        ¦ 31    1F   0001 1111    ITB      US      SLR¦
                      Ø     ¦   the WORKING-STORAGE SECTION. Note the BLW ¦
+       ¦ 32    20   0010 0000     DS      Space  LPDR¦
 .Ø     ¦   number and get displacement from the BLK  ¦        ¦ 33    21   00
10 0001    SOS      !      LNDR¦                          Ø     ¦   column un
+ der Hex-Displacement. Add any    ¦        ¦ 34    22   0010 0010     FS      "

      LTDR¦                          Ø     ¦   subscript or index displacemen
+ t to  this  ¦        ¦ 35    23   0010 0011    WUS      #      LCDR¦
                Ø     ¦   and locate the field in the Abend-AID dump¦
ñ¦ 36    24   0010 0100    BYP      $       HDR¦                          Ø
+   ¦   for the specified BLW CELL.               ¦        ¦ 37    25   0010 010
1     LF      %      LRDR¦                          Ø     ¦6. If Base Locator
+  is BLF, the item is in    ¦        ¦ 38    26   0010 0110    ETB      &
 MXR¦                          Ø     ¦   a file buffer area. Abend-AID displa
+ cement¦        ¦ 39    27   0010 0111    ESC      '      MXDR¦
          âØ     ¦   within records is decimal, relative to 1, ¦        ¦ 40
ä  28   0010 1000     SA      (       LDR¦                          Ø     ¦
+ so use the rightmost column under the Hex-¦        ¦ 41    29   0010 1001    S
FE      )       CDR¦                          Ø     ¦   Displacement Structur
+ e, then add 1 and    ¦        ¦ 42    2A   0010 1010     SM      *       ADR¦
                         Ø     ¦   convert to binary. Find the DDNAME in the
+ ¦        ¦ 43    2B   0010 1011    CSP      +       SDR¦
    çØ     ¦   SELECT statement for the file and use it  ¦        ¦ 44    2C
 0010 1100    MFA      ,       MDR¦                          Ø     ¦   to loc
+ ate the Abend-AID dump DATA MANAGE- ¦        ¦ 45    2D   0010 1101    ENQ
  -       DDR¦                          Ø     ¦   MENT CONTROL BLOCKS FOR DDN
+ AME - xxxxxxxx.¦        ¦ 46    2E   0010 1110    ACK      .       AWR¦
                   Ø     ¦   Find the field in the CURRENT RECORD area.¦
<   ¦ 47    2F   0010 1111    BEL      /       SWR¦                            
+Ø     ¦7. If Base Locator is BLL, the item is in a  ¦        ¦ 48    30   0011
0000             0      LPER¦                          Ø     ¦   calling prog
+ ram area. Note the BLL CELL   ¦        ¦ 49    31   0011 0001             1
   LNER¦                          Ø     ¦   number and displacement in the BL
+ K column.¦        ¦ 50    32   0011 0010    SYN      2      LTER¦
             Ø     ¦   BLL CELLS are printed in the Abend-AID    ¦        ¦ 5
ã1    33   0011 0011     IR      3      LCER¦                          Ø     ¦
+    dump SUPPORTING DATA section, and contain ¦        ¦ 52    34   0011 0100
   PP      4       HER¦                          Ø     ¦   actual virtual sto
+ rage addresses. Add the ¦        ¦ 53    35   0011 0101    TRN      5      LRE
R¦                          Ø     ¦   displacement and locate the field by
+    ¦        ¦ 54    36   0011 0110    NBS      6       AXR¦
       áØ     ¦   searching for this ADDRESS, rather than   ¦        ¦ 55    3
 7   0011 0111    EOT      7       SXR¦                          Ø     ¦   by
+ using the DSPL columns.                ¦        ¦ 56    38   0011 1000    SBS
     8       LER¦                          Ø     ¦---------------------------
+ ------------------´        ¦ 57    39   0011 1001     IT      9       CER¦
                      Ø     ¦Dick Thornton                (804) 354-4829  ¦
+       ¦ 58    3A   0011 1010    RFF      :       AER¦
 .Ø     ¦----------------------1----------------------¦        ¦--------------
---------2---------------------¦                          Ø
+ 

                                                                              
./ ADD NAME=CARD34   0100-02148-02148-1427-00114-00114-00000-BC0THOR
 m e                                                                            
+Ø1    ¦---------------------------------------------¦        ¦-----------------
----------------------------¦                          Ø     ¦          CODE
+ CONVERSION CHART        2 of 5¦        ¦           CODE CONVERSION CHART
 3 of 5¦                          Ø     ¦------------------------------------
+ ---------¦        ¦---------------------------------------------¦
             Ø     ¦DEC   HEX     BINARY   EBCDIC  ASCII    INSTR¦        ¦DE
ãC   HEX    BINARY   EBCDIC  ASCII     INSTR¦                          Ø     ¦
+  59    3B   0011 1011    CU3      ;       SER¦        ¦118    76   0111 0110
           v          ¦                          Ø     ¦ 60    3C   0011 1100
+     DC4      <       MER¦        ¦119    77   0111 0111             w
 ¦                          Ø     ¦ 61    3D   0011 1101    NAK      =
+ DER¦        ¦120    78   0111 1000             x        LE¦
       áØ     ¦ 62    3E   0011 1110             >       AUR¦        ¦121    7
 9   0111 1001    accnt    y        CE¦                          Ø     ¦ 63
+  3F   0011 1111    SUB      ?       SUR¦        ¦122    7A   0111 1010      :
     z        AE¦                          Ø     ¦ 64    40   0100 0000   Spa
+ ce     @       STH¦        ¦123    7B   0111 1011      #      {        SE¦
                      Ø     ¦ 65    41   0100 0001    RSP      A        LA¦
+       ¦124    7C   0111 1100      @      |        ME¦
 .Ø     ¦ 66    42   0100 0010             B       STC¦        ¦125    7D   01
11 1101      '      }        DE¦                          Ø     ¦ 67    43
+ 0100 0011             C        IC¦        ¦126    7E   0111 1110      =      ~

        AU¦                          Ø     ¦ 68    44   0100 0100
+  D        EX¦        ¦127    7F   0111 1111      "     DEL       SU¦
                Ø     ¦ 69    45   0100 0101             E       BAL¦
ñ¦128    80   1000 0000                     SSM¦                          Ø
+   ¦ 70    46   0100 0110             F       BCT¦        ¦129    81   1000 000
1      a                 ¦                          Ø     ¦ 71    47   0100 0
+ 111             G        BC¦        ¦130    82   1000 0010      b
LPSW¦                          Ø     ¦ 72    48   0100 1000             H
+     LH¦        ¦131    83   1000 0011      c         diagnose¦
          âØ     ¦ 73    49   0100 1001             I        CH¦        ¦132
ä  84   1000 0100      d                 ¦                          Ø     ¦ 74
+     4A   0100 1010    cent     J        AH¦        ¦133    85   1000 0101
 e                 ¦                          Ø     ¦ 75    4B   0100 1011
+    .      K        SH¦        ¦134    86   1000 0110      f              BXH¦
                         Ø     ¦ 76    4C   0100 1100      <      L        MH
+ ¦        ¦135    87   1000 0111      g             BXLE¦
    çØ     ¦ 77    4D   0100 1101      (      M       BAS¦        ¦136    88
 1000 1000      h              SRL¦                          Ø     ¦ 78    4E
+    0100 1110      +      N       CVD¦        ¦137    89   1000 1001      i
          SLL¦                          Ø     ¦ 79    4F   0100 1111      ¦
+     O       CVB¦        ¦138    8A   1000 1010                     SRA¦
                   Ø     ¦ 80    50   0101 0000      &      P        ST¦
<   ¦139    8B   1000 1011      {              SLA¦                            
+Ø     ¦ 81    51   0101 0001             Q          ¦        ¦140    8C   1000
1100                    SRDL¦                          Ø     ¦ 82    52   010
+ 1 0010             R          ¦        ¦141    8D   1000 1101
   SLDL¦                          Ø     ¦ 83    53   0101 0011             S
+          ¦        ¦142    8E   1000 1110                    SRDA¦
             Ø     ¦ 84    54   0101 0100             T         N¦        ¦14
ã3    8F   1000 1111      +             SLDA¦                          Ø     ¦
+  85    55   0101 0101             U        CL¦        ¦144    90   1001 0000
                   STM¦                          Ø     ¦ 86    56   0101 0110
+              V         O¦        ¦145    91   1001 0001      j               T
M¦                          Ø     ¦ 87    57   0101 0111             W
+   X¦        ¦146    92   1001 0010      k              MVI¦
       áØ     ¦ 88    58   0101 1000             X         L¦        ¦147    9
 3   1001 0011      l               TS¦                          Ø     ¦ 89
+  59   0101 1001             Y         C¦        ¦148    94   1001 0100      m
              NI¦                          Ø     ¦ 90    5A   0101 1010
+ !      Z         A¦        ¦149    95   1001 0101      n              CLI¦
                      Ø     ¦ 91    5B   0101 1011      $      [         S¦
+       ¦150    96   1001 0110      o               OI¦
 .Ø     ¦ 92    5C   0101 1100      *      \         M¦        ¦151    97   10
01 0111      p               XI¦                          Ø     ¦ 93    5D
+ 0101 1101      )      ]         D¦        ¦152    98   1001 1000      q

        LM¦                          Ø     ¦ 94    5E   0101 1110      ;
+ hat       AL¦        ¦153    99   1001 1001      r            TRACE¦
                Ø     ¦ 95    5F   0101 1111     not     _        SL¦
ñ¦154    9A   1001 1010                        ¦                          Ø
+   ¦ 96    60   0110 0000      -    accnt     STD¦        ¦155    9B   1001 101
1      }                 ¦                          Ø     ¦ 97    61   0110 0
+ 001      /      a          ¦        ¦156    9C   1001 1100   lozenge
    ¦                          Ø     ¦ 98    62   0110 0010             b
+       ¦        ¦157    9D   1001 1101                        ¦
          âØ     ¦ 99    63   0110 0011             c          ¦        ¦158
ä  9E   1001 1110                        ¦                          Ø     ¦100
+     64   0110 0100             d          ¦        ¦159    9F   1001 1111    b
lock               ¦                          Ø     ¦101    65   0110 0101
+           e          ¦        ¦160    A0   1010 0000                        ¦
                         Ø     ¦102    66   0110 0110             f
+ ¦        ¦161    A1   1010 0001                        ¦
    çØ     ¦103    67   0110 0111             g       MXD¦        ¦162    A2
 1010 0010      s                 ¦                          Ø     ¦104    68
+    0110 1000             h        LD¦        ¦163    A3   1010 0011      t
             ¦                          Ø     ¦105    69   0110 1001
+     i        CD¦        ¦164    A4   1010 0100      u                *¦
                   Ø     ¦106    6A   0110 1010      |      j        AD¦
<   ¦165    A5   1010 0101      v                *¦                            
+Ø     ¦107    6B   0110 1011      ,      k        SD¦        ¦166    A6   1010
0110      w                *¦                          Ø     ¦108    6C   011
+ 0 1100      %      l        MD¦        ¦167    A7   1010 0111      x
       ¦                          Ø     ¦109    6D   0110 1101      _      m
+        DD¦        ¦168    A8   1010 1000      y                 ¦
             Ø     ¦110    6E   0110 1110      >      n        AW¦        ¦16
ã9    A9   1010 1001      z                 ¦                          Ø     ¦
+ 111    6F   0110 1111      ?      o        SW¦        ¦170    AA   1010 1010
                      ¦                          Ø     ¦112    70   0111 0000
+              p       STE¦        ¦171    AB   1010 1011      ¦
 ¦                          Ø     ¦113    71   0111 0001             q
+    ¦        ¦172    AC   1010 1100      ¦            STNSM¦
       áØ     ¦114    72   0111 0010             r          ¦        ¦173    A
 D   1010 1101      [            STOSM¦                          Ø     ¦115
+  73   0111 0011             s          ¦        ¦174    AE   1010 1110
            SIGP¦                          Ø     ¦116    74   0111 0100
+        t          ¦        ¦175    AF   1010 1111                      MC¦
                      Ø     ¦117    75   0111 0101             u          ¦
+       ¦176    B0   1011 0000                        ¦
 .Ø     ¦----------------------3----------------------¦        ¦--------------
---------4---------------------¦                          Ø
+ 

                                                                              
./ ADD NAME=CARD56   0100-02148-02148-1427-00128-00128-00000-BC0THOR
 m e                                                                            
+Ø1    ¦---------------------------------------------¦        ¦-----------------
----------------------------¦                          Ø     ¦           CODE
+  CONVERSION CHART       4 of 5¦        ¦           CODE CONVERSION CHART
 5 of 5¦                          Ø     ¦------------------------------------
+ ---------¦        ¦---------------------------------------------¦
             Ø     ¦DEC   HEX     BINARY   EBCDIC  ASCII    INSTR¦        ¦DE
ãC   HEX     BINARY   EBCDIC  ASCII    INSTR¦                          Ø     ¦
+ 177    B1   1011 0001                     LRA¦        ¦236    EC   1110 1100
                      ¦                          Ø     ¦178    B2   1011 0010
+                        *¦        ¦237    ED   1110 1101
 ¦                          Ø     ¦179    B3   1011 0011
+    ¦        ¦238    EE   1110 1110                        ¦
       áØ     ¦180    B4   1011 0100                        ¦        ¦239    E
 F   1110 1111                        ¦                          Ø     ¦181
+  B5   1011 0101                        ¦        ¦240    F0   1111 0000      0
             SRP¦                          Ø     ¦182    B6   1011 0110
+              STCTL¦        ¦241    F1   1111 0001      1              MVO¦
                      Ø     ¦183    B7   1011 0111                    LCTL¦
+       ¦242    F2   1111 0010      2             PACK¦
 .Ø     ¦184    B8   1011 1000                        ¦        ¦243    F3   11
11 0011      3             UNPK¦                          Ø     ¦185    B9
+ 1011 1001                        ¦        ¦244    F4   1111 0100      4

          ¦                          Ø     ¦186    BA   1011 1010
+           CS¦        ¦245    F5   1111 0101      5                 ¦
                Ø     ¦187    BB   1011 1011      ¦              CDS¦
ñ¦246    F6   1111 0110      6                 ¦                          Ø
+   ¦188    BC   1011 1100      ¦                 ¦        ¦247    F7   1111 011
1      7                 ¦                          Ø     ¦189    BD   1011 1
+ 101      ]              CLM¦        ¦248    F8   1111 1000      8
 ZAP¦                          Ø     ¦190    BE   1011 1110   not eq
+   STCM¦        ¦249    F9   1111 1001      9               CP¦
          âØ     ¦191    BF   1011 1111      -              ICM¦        ¦250
ä  FA   1111 1010                      AP¦                          Ø     ¦192
+     C0   1100 0000      {                 ¦        ¦251    FB   1111 1011
                 SP¦                          Ø     ¦193    C1   1100 0101
+    A                 ¦        ¦252    FC   1111 1100                      MP¦
                         Ø     ¦194    C2   1100 0010      B
+ ¦        ¦253    FD   1111 1101                      DP¦
    çØ     ¦195    C3   1100 0011      C                 ¦        ¦254    FE
 1111 1110                        ¦                          Ø     ¦196    C4
+    1100 0100      D                 ¦        ¦255    FF   1111 1111
             ¦                          Ø     ¦197    C5   1100 0101      E
+                ¦        ¦---------------------------------------------¦
                   Ø     ¦198    C6   1100 0110      F                 ¦
<   ¦---------------------------------------------¦                            
+Ø     ¦199    C7   1100 0111      G                 ¦        ¦
 COBOL INDEXES              ¦                          Ø     ¦200    C8   110
+ 0 1000      H                 ¦        ¦1. COBOL Indexes are 4-byte (fullword)
 fields¦                          Ø     ¦201    C9   1100 1001      I
+          ¦        ¦   that contain a hex number which is the    ¦
             Ø     ¦202    CA   1100 1010     SHY                ¦        ¦
ã offset in bytes from the first table      ¦                          Ø     ¦
+ 203    CB   1100 1011                        ¦        ¦   element to the eleme
nt specified by the   ¦                          Ø     ¦204    CC   1100 1100
+                         ¦        ¦   index. Zero is valid in an index, and is
 ¦                          Ø     ¦205    CD   1100 1101
+    ¦        ¦   used to specify the first element (zero   ¦
       áØ     ¦206    CE   1100 1110                        ¦        ¦   offse
 t from the first).                   ¦                          Ø     ¦207
+  CF   1100 1111                        ¦        ¦2. To find an index, first fi
nd the defining ¦                          Ø     ¦208    D0   1101 0000
+ }                 ¦        ¦   statement in the DATA DIVISION MAP and    ¦
                      Ø     ¦209    D1   1101 0001      J              MVN¦
+       ¦   note the number following the IDX= keyword¦
 .Ø     ¦210    D2   1101 0010      K              MVC¦        ¦   Next, find
this IDX number and its content¦                          Ø     ¦211    D3
+ 1101 0011      L              MVZ¦        ¦   in the SUPPORTING DATA section o

f the     ¦                          Ø     ¦212    D4   1101 0100      M
+           NC¦        ¦   Abend-AID dump.                           ¦
                Ø     ¦213    D5   1101 0101      N              CLC¦
ñ¦3. To locate the field specified by the index¦                          Ø
+   ¦214    D6   1101 0110      O               OC¦        ¦   follow instructio
ns on page 1 using the   ¦                          Ø     ¦215    D7   1101 0
+ 111      P               XC¦        ¦   index content just found.
    ¦                          Ø     ¦216    D8   1101 1000      Q
+       ¦        ¦4. To find the occurrence number of the field¦
          âØ     ¦217    D9   1101 1001      R             MVCK¦        ¦   sp
äecified by an index, convert the index  ¦                          Ø     ¦218
+     DA   1101 1010                    MVCP¦        ¦   to decimal, divide it b
y the length of the¦                          Ø     ¦219    DB   1101 1011
+                  MVCS¦        ¦   occurring item and add 1 to the quotient. ¦
                         Ø     ¦220    DC   1101 1100                      TR
+ ¦        ¦---------------------------------------------¦
    çØ     ¦221    DD   1101 1101                     TRT¦        ¦
   COBOL SUBSCRIPTS               ¦                          Ø     ¦222    DE
+    1101 1110                      ED¦        ¦1. To find a subscripted field,
first find   ¦                          Ø     ¦223    DF   1101 1111
+            EDMK¦        ¦   the subscript, using procedures on page 1.¦
                   Ø     ¦224    E0   1110 0000      \                 ¦
<   ¦2. Subtract 1 from the value to make it      ¦                            
+Ø     ¦225    E1   1110 0001     NSP                ¦        ¦   relative to ze
ro.                         ¦                          Ø     ¦226    E2   111
+ 0 0010      S                 ¦        ¦3. Multiply by the length of the OCCUR
RING   ¦                          Ø     ¦227    E3   1110 0011      T
+          ¦        ¦   item. This is the displacement (equivalent¦
             Ø     ¦228    E4   1110 0100      U                *¦        ¦
ã to an index).                             ¦                          Ø     ¦
+ 229    E5   1110 0101      V                *¦        ¦4. Convert the displace
ment to hex and add to¦                          Ø     ¦230    E6   1110 0110
+       W                 ¦        ¦   the displacement for the first item in th
e¦                          Ø     ¦231    E7   1110 0111      X
+    ¦        ¦   table. If total displacement is greater   ¦
       áØ     ¦232    E8   1110 1000      Y            MVCIN¦        ¦   than
 FFF, subtract 1000 and add 1 to the  ¦                          Ø     ¦233
+  E9   1110 1001      Z                 ¦        ¦   BLx Cell number.
                ¦                          Ø     ¦234    EA   1110 1010
+                   ¦        ¦                                             ¦
                      Ø     ¦235    EB   1110 1011                        ¦
+       ¦                                             ¦
 .Ø     ¦----------------------5----------------------¦        ¦--------------
-----------6-------------------¦                          Ø
+ 

                                     Ø
+ 
                Ø
ñ                                                                         Ø
+ 
                                                    Ø
+ 
                               Ø
+ 
          âØ
ä                                                                   Ø
+ 
                                              Ø
+ 
                                                                              
./ ADD NAME=CARD78   0100-02148-02148-1427-00091-00091-00000-BC0THOR
 m e                                                                            
+Ø1  ¦--------------------------------------------------------------------------
-----------------------------------------------------¦ Ø   ¦
+               HEXADECIMAL AND DECIMAL CONVERSION                     ¦
                                ¦ Ø   ¦--------------------------------------
+ ------------------------------------------------¦
           ¦ Ø   ¦¦             7 ¦¦            6 ¦¦         5 ¦¦        4 ¦¦
ã       3 ¦¦     2 ¦¦   1  ¦¦                                        ¦ Ø   ¦¦H
+ EX        DEC ¦¦HEX       DEC ¦¦HEX    DEC ¦¦HEX   DEC ¦¦HEX  DEC ¦¦HX  DC ¦¦H
X DC ¦¦                                        ¦ Ø   ¦-----------------------
+ --------------------------------------------------------------¦¦     ¦--------
-------------------------¦¦ Ø   ¦¦ 0           0 ¦¦ 0          0 ¦¦ 0       0
+  ¦¦ 0      0 ¦¦ 0     0 ¦¦ 0   0 ¦¦ 0  0 ¦¦     ¦  ADDITIONAL COLUMN MULTIPLIE
RS  ¦¦ áØ   ¦¦ 1  16,777,216 ¦¦ 1  1,048,576 ¦¦ 1  65,536 ¦¦ 1  4,096 ¦¦ 1   2
 56 ¦¦ 1  16 ¦¦ 1  1 ¦¦     ¦    FOR 8-16 DIGIT HEX NUMBERS   ¦¦ Ø   ¦¦ 2  33,
+ 554,432 ¦¦ 2  2,097,152 ¦¦ 2 131,072 ¦¦ 2  8,192 ¦¦ 2   512 ¦¦ 2  32 ¦¦ 2  2 ¦
¦     ¦                                 ¦¦ Ø   ¦¦ 3  50,331,648 ¦¦ 3  3,145,7
+ 28 ¦¦ 3 196,608 ¦¦ 3 12,288 ¦¦ 3   768 ¦¦ 3  48 ¦¦ 3  3 ¦¦     ¦  HEX
                   ¦¦ Ø   ¦¦ 4  67,108,864 ¦¦ 4  4,194,304 ¦¦ 4 262,144 ¦¦ 4
+ 16,384 ¦¦ 4 1,024 ¦¦ 4  64 ¦¦ 4  4 ¦¦     ¦COLUMN                MULTIPLIER ¦¦
 .Ø   ¦¦ 5  83,886,080 ¦¦ 5  5,242,880 ¦¦ 5 327,680 ¦¦ 5 20,480 ¦¦ 5 1,280 ¦¦
5  80 ¦¦ 5  5 ¦¦     ¦                                 ¦¦ Ø   ¦¦ 6 100,663,29
+ 6 ¦¦ 6  6,291,456 ¦¦ 6 393,216 ¦¦ 6 24,576 ¦¦ 6 1,536 ¦¦ 6  96 ¦¦ 6  6 ¦¦

¦   8                 268,435,456 ¦¦ Ø   ¦¦ 7 117,440,512 ¦¦ 7  7,340,032 ¦¦
+ 7 458,752 ¦¦ 7 28,672 ¦¦ 7 1,792 ¦¦ 7 112 ¦¦ 7  7 ¦¦     ¦   9               4
,294,967,296 ¦¦ Ø   ¦¦ 8 134,217,728 ¦¦ 8  8,388,608 ¦¦ 8 524,288 ¦¦ 8 32,768
ñ ¦¦ 8 2,048 ¦¦ 8 128 ¦¦ 8  8 ¦¦     ¦  10              68,719,476,736 ¦¦ Ø
+ ¦¦ 9 150,994,944 ¦¦ 9  9,437,184 ¦¦ 9 589,824 ¦¦ 9 36,864 ¦¦ 9 2,304 ¦¦ 9 144
¦¦ 9  9 ¦¦     ¦  11           1,099,511,627,776 ¦¦ Ø   ¦¦ A 167,772,160 ¦¦ A
+  10,485,760 ¦¦ A 655,360 ¦¦ A 40,960 ¦¦ A 2,560 ¦¦ A 160 ¦¦ A 10 ¦¦     ¦  12
         17,592,186,044,416 ¦¦ Ø   ¦¦ B 184,549,376 ¦¦ B 11,534,336 ¦¦ B 720,
+ 896 ¦¦ B 45,056 ¦¦ B 2,816 ¦¦ B 176 ¦¦ B 11 ¦¦     ¦  13         281,474,976,7
10,656 ¦¦ âØ   ¦¦ C 201,326,592 ¦¦ C 12,582,912 ¦¦ C 786,432 ¦¦ C 49,152 ¦¦ C
ä3,072 ¦¦ C 192 ¦¦ C 12 ¦¦     ¦  14       4,503,599,627,370,496 ¦¦ Ø   ¦¦ D 2
+ 18,103,808 ¦¦ D 13,631,488 ¦¦ D 851,968 ¦¦ D 53,248 ¦¦ D 3,328 ¦¦ D 208 ¦¦ D 1
3 ¦¦     ¦  15      72,057,594,037,927,936 ¦¦ Ø   ¦¦ E 234,881,024 ¦¦ E 14,68
+ 0,064 ¦¦ E 917,504 ¦¦ E 57,344 ¦¦ E 3,584 ¦¦ E 224 ¦¦ E 14 ¦¦     ¦  16   1,15
2,921,504,606,846,976 ¦¦ Ø   ¦¦ F 251,658,240 ¦¦ F 15,728,640 ¦¦ F 983,040 ¦¦
+  F 61,440 ¦¦ F 3,840 ¦¦ F 240 ¦¦ F 15 ¦¦     ¦--------------------------------
-¦¦ çØ   ¦--------------------------------------------------------------------
-----------------------------------------------------------¦ Ø
+                                                   7
                                        Ø
+ 
                   Ø
<                                                                              
+Ø
                                                       Ø
+ 
                                  Ø   ¦--------------------------------------
+ ------------------------------------------------------------------------------
-----------¦ Ø   ¦                        HEXADECIMAL AND DECIMAL CONVERSION
ãEXAMPLES                                                            ¦ Ø   ¦--
+ ------------------------------------------------------------------------------
-----------------------------------------------¦ Ø   ¦(1) Hex to Decimal: Loc
+ ate each hex digit    ¦    (2) Decimal to Hex: Locate the largest decimal valu
e in the table that is    ¦ Ø   ¦    in its corresponding column in the
+  ¦        less than the decimal number being converted. Write the hex digit in
 your¦ áØ   ¦    table. Add the decimal values to find    ¦        answer area
 , using the same column as in the table. Subtract the table   ¦ Ø   ¦    the
+ decimal equivalent. As example,      ¦        number from the decimal number.
Using this remainder, repeat the above   ¦ Ø   ¦    convert hex 5A0C4 to deci
+ mal:            ¦        until the remainder is 0. When a column in your answe
r is skipped, write ¦ Ø   ¦                                             ¦
+     a zero in that column. For example, convert the decimal number 368,836 to¦
 .Ø   ¦          HEX   TABLE   DECIMAL              ¦        hex:
                                                        ¦ Ø   ¦         DIGIT
+   COLUMN    VALUE              ¦                                             H

ex Equivalent --> 5A0C4            ¦ Ø   ¦           5      5     327,680
+           ¦          368,836                                               ¦¦¦
¦¦            ¦ Ø   ¦           A      4      40,960              ¦        -
ñ327,680 hex 5, column 5 ------------------------------¦¦¦¦¦            ¦ Ø
+ ¦           0      3           0              ¦          -------
                                  ¦¦¦¦            ¦ Ø   ¦           C      2
+         192              ¦           41,156
             ¦¦¦¦            ¦ Ø   ¦           4      1           4
+     ¦         - 40,960 hex A, column 4 -------------------------------¦¦¦¦
        ¦ âØ   ¦                       ________              ¦           -----
ä-                                                 ¦¦¦            ¦ Ø   ¦
+            SUM =   368,836              ¦              196
      (column 3 skipped) ----¦¦¦            ¦ Ø   ¦            (DECIMAL EQUIV
+ ALENT)             ¦            - 192 hex C, column 2 ------------------------
---------¦¦            ¦ Ø   ¦                                             ¦
+              ---                                                   ¦
  ¦ çØ   ¦                                             ¦                4 hex
4, column 1 ----------------------------------¦            ¦ Ø   ¦-----------
+ ------------------------------------------------------------------------------
--------------------------------------¦ Ø
+                        8
                   Ø
<                                                                              
./ ADD NAME=COBABEND 0100-93071-93071-1055-00018-00018-00000-USER02
000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    COBABEND.
000300 AUTHOR. R THORNTON
000400*REMARKS. SUBROUTINE TO PRODUCE A U0888 ABEND.
000500 ENVIRONMENT DIVISION.
000600 CONFIGURATION SECTION.
000700 INPUT-OUTPUT SECTION.
000800 DATA DIVISION.
000900 WORKING-STORAGE SECTION.
001000 77  FILLER PIC X(36)  VALUE
001100     'COBABEND WORKING STORAGE BEGINS HERE'.
001200 77  COMP-CODE                   PIC S9(4) COMP
001300                                 VALUE 888.
001400 PROCEDURE DIVISION.
001500
001600 A100-EXECUTIVE-CONTROL.
001700     CALL 'ILBOABN0' USING COMP-CODE.
001800     GOBACK.
./ ADD NAME=COPYDUMP 0121-91023-02144-0940-00256-00050-00000-BC0THOR
   TITLE '*****COPYDUMP: COPY INPUT FILES TO RECFM=FBA,LRECL=133 *****'
COPYDUMP CSECT
COPYDUMP RMODE 24
COPYDUMP AMODE 24
*
***********************************************************************
* COPY INPUT DSORG=PS FILES TO AN OUTPUT DATASET DEFINED AS RECFM=FBA,*
* LRECL=133. INPUT FILE DDNAME IS INPUTX, WHERE X IS A DIGIT 1-9. THE *
* INPUT DATASETS MUST BE DSORG=PS FILES (INCLUDING PDS MEMBERS), WITH *
* RECFM=F OR V WITH OR WITHOUT PRINT CONTROL CHARACTERS. BOTH ASA AND *
* MACHINE CONTROL CHARACTERS ARE HANDLED. THE OUTPUT FILE IS          *
* RECFM=FBA,LRECL=133. INPUT RECORDS SHORTER THAN 133 ARE EXTENDED    *
* BLANKS. INPUT RECORDS LONGER THAN 133 CHARACTERS ARE TRUNCATED TO   *
* 133 CHARACTERS.                                                     *
* INPUT FILES ARE READ IN THE ORDER THEY APPEAR IN THE JCL, NOT IN    *
* ASCENDING ORDER BY DDNAME.                                          *
* AUTHOR R THORNTON NOV 1999                                          *
***********************************************************************
*********************************************************************
*        SAVE REGISTERS, SET UP BASE REGS, CHAIN SAVE AREAS         *
*********************************************************************
         USING COPYDUMP,R3,R4
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  SET UP BASE FIRST BASE REG
         LA    R4,4095(R3)             SET UP SECOND
         LA    R4,1(R4)                    BASE REGISTER
         LA    R15,MYSAVE              POINT TO MY REGISTER SAVE AREA
         ST    R15,8(R13)              SET LSA IN CALLER'S SAVE
         ST    R13,4(R15)              SET HSA IN MY SAVE AREA
         LR    R13,R15                 SET UP SAVE AREA POINTER
         B     START                   BRANCH AROUND CONSTANTS
         DC    CL8'COPYDUMP'           PROGRAM NAME IDENTIFIER
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL8'&SYSTIME'           ASSEMBLY TIME
MYSAVE   DS    18F                     MY REGISTER SAVE AREA
***********************************************************************
* INITIALIZATION: OPEN OUTPUT FILE. LOCATE THE TIOT AND SAVE THE      *
* ADDRESS OF THE FIRST TIOT DD ENTRY.                                 *
***********************************************************************
START    OPEN  (OUTPUT1,OUTPUT)        OPEN OUTPUT FILE
         L     R1,16                   POINT TO THE CVT
         L     R1,0(R1)                POINT TO THE NEW-OLD TCB WORDS
         L     R1,0(R1)                POINT TO MY TCB
         L     R1,12(R1)               POINT TO MY TIOT
         LA    R1,24(R1)               POINT TO 1ST TIOT DD ENTRY
         ST    R1,TIOTDD               SAVE DD ENTRY POINTER
***********************************************************************
* SEARCH THE TIOT FOR THE NEXT INPUTX DD STATEMENT. IF NONE FOUND,    *
* TEMINATE PROCESSING. IF FOUND, UPDATE THE TIOTDD POINTER, OPEN THE  *
* FILE FOUND, AND SAVE ITS RECFM, CARRIAGE CONTROL, AND LRECL DATA.   *
***********************************************************************
NEXINPUT L     R1,TIOTDD               POINT TO NEXT TIOT DD ENTRY
         SR    R2,R2                   CLEAR WORK REG
CKLSTDD  CLI   0(R1),0                 LAST TIOT DD ENTRY
         BE    EOJ                     YES
         CLC   4(5,R1),=C'INPUT'       DDNAME BEGINS WITH "INPUT"?
         BNE   STEPDD                  NO, GO TO NEXT DD ENTRY
         TM    9(R1),C'0'              DIGIT FOLLOWS "INPUT"?
         BNO   STEPDD                  NO, GO TO NEXT DD ENTRY
         CLI   10(R1),C' '             BLANK FOLLOWS DIGIT?
         BE    USEDD                   YES, USE THE DD STATEMENT
STEPDD   IC    R2,0(R1)                GET DD ENTRY LENGTH
         AR    R1,R2                   STEP TO NEXT DD ENTRY
         B     CKLSTDD                 GO CK NEXT DD
USEDD    MVC   INPUT+40(8),4(R1)       MOVE DNAME IN TIOT TO DCB
         IC    R2,0(R1)                GET DD ENTRY LENGTH
         AR    R1,R2                   STEP TO NEXT DD ENTRY
         ST    R1,TIOTDD               SAVE IT'S ADDRESS
         OPEN  INPUT                   OPEN THE FILE
         TM    INPUT+48,X'10'          DID IT OPEN SUCCESSFULLY?
         BO    CKDSORG                 YES
         LA    R1,WTO111               POINT TO WTO MESSAGE
         MVC   DDN111,INPUT+40         MOVE IN DDNAME
         SVC   35
         ABEND 111,DUMP                TERMINATE IN ERROR
CKDSORG  CLI   INPUT+26,X'40'          DSORG=PS?
         BE    DSORGOK                 YES
         LA    R1,WTO222               POINT TO WTO MESSAGE
         MVC   DDN222,INPUT+40         MOVE IN DDNAME
         SVC   35
         ABEND 222,DUMP                TERMINATE IN ERROR
DSORGOK  TM    INPUT+36,X'C0'          TEST RECFM
         BM    TSTFORF                 VALID RECFM
         LA    R1,WTO333               POINT TO WTO MESSAGE
         MVC   DDN333,INPUT+40         MOVE IN DDNAME
         SVC   35
         ABEND 333,DUMP                TERMINATE IN ERROR
TSTFORF  TM    INPUT+36,X'80'          RECFM=F?
         BO    GOTRECF                 YES
GOTRECV  MVI   RECFM,C'V'              NO, RECFM=V
         B     TSTPCC                  CONTINUE
GOTRECF  MVI   RECFM,C'F'              RECFM=F
TSTPCC   TM    INPUT+36,X'04'          ASA CONTROL CHARACTERS?
         BO    GOTCCA                  YES
         TM    INPUT+36,X'02'          MACHINE CONTROL CHARS?
         BO    GOTCCM                  YES
GOTNOCC  MVI   PRTRCC,C' '             NO, NOT USING CONTROL CHARS
         B     GETLENG                 CONTINUE
GOTCCM   MVI   PRTRCC,C'M'             ASSUME MACHINE CONTROL CHARS
         B     GETLENG                 CONTINUE
GOTCCA   MVI   PRTRCC,C'A'             ASSUME ASA PRINT CONTROL CHARS
GETLENG  CLI   RECFM,C'V'              IS IT RECFM=V?
         BE    MAINLINE                YES
SETLENGF MVC   LRECL,INPUT+82          GET DCBLRECL
***********************************************************************
* MAINLINE PROCESSING: READ INPUT RECORD, MODIFY AS NEEDED FOR THE    *
* OUTPUT FILE REQUIREMENTS OF RECFM=FBA,LRECL=133                     *
***********************************************************************
MAINLINE GET   INPUT                   READ NEXT INPUT RECORD
         MVC   OUTREC,BLANKS           CLEAR OUTPUT RECORD AREA
         LR    R12,R1                  R12 = @ INPUT RECORD
         CLI   RECFM,C'F'              RECFM = F?
         BE    CHKLENG                 YES
SETLENGV LH    R11,0(R12)              NO, USE RDW FOR RECFM=V
         SH    R11,H4                  DEDUCT 4 FOR RDW ITSELF
         STH   R11,LRECL               AND USE FOR LRECL
         LA    R12,4(R12)              STEP PAST RDW TO DATA
CHKLENG  CLI   PRTRCC,C' '             ANY CONTROL CHARACTERS?
         BNE   GOTCCS                  YES
NOCCLENG MVI   OUTCC,C' '              SET SINGLE SPACING
         LA    R11,OUTDATA             POINT TO OUTPUT RECORD DATA
         CLC   LRECL,H132              OVER 132 BYTES IN RECORD?
         BNH   EXMVC                   NO, GO MOVE IT
         MVC   LRECL,H132              YES, REDUCE TO MAX ALLOWED LENG
         B     EXMVC                   AND GO MOVE IT
GOTCCS   CLI   PRTRCC,C'M'             GOT MACHINE CONTROL CHARS?
         BE    MCHLENG                 YES
ASALENG  LA    R11,OUTREC              POINT TO OUTPUT RECORD CC
         CLC   LRECL,H133              OVER 132 BYTES IN RECORD?
         BNH   EXMVC                   NO, GO MOVE IT
         MVC   LRECL,H133              YES, REDUCE TO MAX ALLOWED LENG
         B     EXMVC                   AND GO MOVE IT
MCHLENG  MVC   OUTCC,NEXCC             SET SPACING FROM LAST RECORD
         MVC   NEXCC,0(R12)            MOVE FOR NEXT LINE SPACING
         TR    NEXCC,MCHSPAC           TRANSLATE SPACING
         TRT   0(1,R12),MCHPRTBL       THIS AN IMMEDIATE SKIP/SPACE?
         BZ    MAINLINE                YES
         LA    R11,OUTDATA             POINT TO OUTPUT DATA
         LA    R12,1(R12)              POINT PAST MCH CTL CHAR
         CLC   LRECL,H132              OVER 132 BYTES IN RECORD?
         BNH   EXMVC                   NO, GO MOVE IT
         MVC   LRECL,H132              YES, REDUCE TO MAX ALLOWED LENG
EXMVC    LH    R1,LRECL                PICK UP MOVE LENGTH
         BCTR  R1,0                    SUBTRACT 1 FOR LENGTH CODE
         EX    R1,MOVERECD             MOVE RECORD TO OUTPUT
WRITE    PUT   OUTPUT1,OUTREC          WRITE RECORD TO OUTPUT
         CLI   PRTRCC,C'M'             MACHINE CONTROL CHARS?
         BE    MAINLINE                YES
         MVI   NEXCC,C'1'              NO, SET UP IN CASE OF MCH
         B     MAINLINE                GO READ NEXT RECORD
MOVERECD MVC   0(1,R11),0(R12)         MOVE DATA TO PRINT LINE
***********************************************************************
*        END OF LAST INPUTX FILE: CLOSE AND GO LOOK FOR MORE          *
***********************************************************************
EOFINPUT CLOSE INPUT                   CLOSE THE INPUT FILE
         FREEPOOL INPUT                FREE THE INPUT BUFFER POOL
         B     NEXINPUT                GO LOOK FOR ANOTHER INPUT FILE
***********************************************************************
*        NO MORE INPUTX FILES: TERMINATE PROCESSING                   *
***********************************************************************
EOJ      CLOSE OUTPUT1                 CLOSE OUTPUT FILE
         L     R13,4(R13)              GET CALLER'S SAVE ADDRESS
         LM    R14,R12,12(R13)         GET CALLER'S REGISTERS
         SR    R15,R15                 ZERO RETURN CODE
         BR    R14                     RETURN TO CALLER
***********************************************************************
*        STORAGE AND FILE AREAS                                       *
***********************************************************************
DBLWD    DS    D                       WORK AREA
TIOTDD   DC    A(0)                    ADDRESS OF NEXT TIOT DD ENTRY
H132     DC    H'132'                  CONSTANT 132
H133     DC    H'133'                  CONSTANT 133
H4       DC    H'4'                    CONSTANT 4
LRECL    DC    H'0'                    CURRENT LRECL
RECFM    DC    C' '                    CURRENT RECFM (F, V)
PRTRCC   DC    C' '                    CURRENT CARR CTL (BLANK, M, A)
BLANKS   DC    CL133' '                BLANKS
NEXCC    DC    CL1'+'                  NEXT SPACING FOR MCH CTL CHAR
MCHPRTBL DC    256X'00'                IDENTIFY MCH PRINT COMMANDS
         ORG   MCHPRTBL+X'09'          PRINT, SPACE 1
         DC    X'FF'
         ORG   MCHPRTBL+X'11'          PRINT, SPACE 2
         DC    X'FF'
         ORG   MCHPRTBL+X'19'          PRINT, SPACE 3
         DC    X'FF'
         ORG   MCHPRTBL+X'01'          PRINT, SPACE 0
         DC    X'FF'
         ORG   MCHPRTBL+X'89'          PRINT, SKIP TO CH1
         DC    X'FF'
         ORG
MCHSPAC  DC    256C' '                 ASA SPACING FOR MCH CTL CHARS
         ORG   MCHSPAC+X'8B'           IMMED SKIP TO CHNL 1
         DC    C'1'
         ORG   MCHSPAC+X'19'           PRINT, SPACE 3 AFTER
         DC    C'-'
         ORG   MCHSPAC+X'11'           PRINT, SPACE 2 AFTER
         DC    C'0'
         ORG   MCHSPAC+X'09'           PRINT, SPACE 1 AFTER
         DC    C' '
         ORG   MCHSPAC+X'0B'           IMMEDIATE SPACE 1
         DC    C' '
         ORG   MCHSPAC+X'13'           IMMEDIATE SPACE 2
         DC    C'0'
         ORG   MCHSPAC+X'1B'           IMMEDIATE SPACE 3
         DC    C'-'
         ORG   MCHSPAC+X'89'           PRINT, THEN SKIP TO CHNL 1
         DC    C'1'
         ORG   MCHSPAC+X'01'           PRINT, NO SPACE AFTER
         DC    C'+'
         ORG
*
OUTREC   DS    0CL133                  OUTPUT RECORD
OUTCC    DS    CL1                       ASA CARRIAGE CONTROL BYTE
OUTDATA  DS    CL133                     PRINT DATA RECORD
*
WTO111   DS    0F                      WTO ERROR MESSAGE
         DC    AL2(END111-WTO111),XL2'8000'
MSG111   DC    C'ERROR OPENING '
DDN111   DC    CL6' '
         DC    C' FILE.'
END111   DC    X'00000020'
WTO222   DS    0F                      WTO ERROR MESSAGE
         DC    AL2(END222-WTO222),XL2'8000'
MSG222   DC    C'INVALID DSORG FOUND FOR '
DDN222   DC    CL6' '
         DC    C' FILE.'
END222   DC    X'00000020'
WTO333   DS    0F                      WTO ERROR MESSAGE
         DC    AL2(END333-WTO333),XL2'8000'
MSG333   DC    C'INVALID RECFM FOUND FOR '
DDN333   DC    CL6' '
         DC    C' FILE.'
END333   DC    X'00000020'
*
OUTPUT1  DCB   DSORG=PS,MACRF=PM,DDNAME=OUTPUT1
INPUT    DCB   DSORG=PS,MACRF=GL,DDNAME=INPUT,EODAD=EOFINPUT
*********************************************************************
*                REGISTER EQUATES                                   *
*********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
./ ADD NAME=COPYNUM  0102-99334-02150-1422-00105-00096-00000-BC0THOR
         TITLE '*** COPYNUM: COPY AND NUMBER PAGES    ***'
COPYNUM CSECT
*********************************************************************
* READS AN INPUT FILE OF RECFM=FBA,LRECL=133 AND WRITES IT OUT AS   *
* RECFM=FBA,LRECL=151. EACH INPUT RECORD IS LEFT-JUSTIFIED IN THE   *
* OUTPUT RECORD. A PAGE NUMBER AND LINE NUMBER IS PRINTED AT THE    *
* RIGHT SIDE OF EACH LINE. PAGE NUMBER IS ADVANCED FOR EACH LINE    *
* HAVING A '1' IN THE CARRIAGE CONTROL POSITION.                    *
*                                                                   *
* AUTHOR R THORNTON NOV 1999                                        *
*********************************************************************
*
*********************************************************************
*        SAVE REGISTERS, SET UP BASE REGS, CHAIN SAVE AREAS         *
*********************************************************************
         USING COPYNUM,R3,R4
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  SET UP BASE FIRST BASE REG
         LA    R4,4095(R3)             SET UP SECOND
         LA    R4,1(R4)                    BASE REGISTER
         LA    R15,MYSAVE              POINT TO MY REGISTER SAVE AREA
         ST    R15,8(R13)              SET LSA IN CALLER'S SAVE
         ST    R13,4(R15)              SET HSA IN MY SAVE AREA
         LR    R13,R15                 SET UP SAVE AREA POINTER
         B     START                   BRANCH AROUND CONSTANTS
         DC    CL8'COPYNUM'            PROGRAM NAME IDENTIFIER
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL8'&SYSTIME'           ASSEMBLY TIME
MYSAVE   DS    18F                     MY REGISTER SAVE AREA
*********************************************************************
*        OPEN FILES, PRINT HEADING                                  *
*********************************************************************
START    OPEN  (OUTPUT1,OUTPUT,INPUT1) OPEN FILES
*********************************************************************
*             MAINLINE ROUTINE                                      *
*********************************************************************
MAINLINE GET   INPUT1,INREC            READ INPUT RECORD
         CLI   INREC,C'1'              THIS A NEW PAGE?
         BNE   EDTLINE                 NO
         AP    PAGENO,P1               YES, INCREMENT PAGE NUMBER
         MVC   OUTPGNO,PAGEDIT         MOVE IN EDIT WORD
         ED    OUTPGNO,PAGENO          PAGE NUMBER TO PRINT LINE
         ZAP   LINENO,P0               ZERO OUT LINE NUMBER
EDTLINE  AP    LINENO,P1               INCREMENT LINE NUMBER
         UNPK  OUTLNNO,LINENO          UNPACK LINE NUMBER TO OUTPUT
         MVI   OUTLNNO,C' '            CLEAR LEADING ZERO
         OI    OUTLNNO+2,C'0'          CLEAR SIGN
PUTOUT   PUT   OUTPUT1,OUTREC          WRITE OUTPUT RECORD
         B     MAINLINE                LOOP THRU INPUT FILE
*********************************************************************
*             END OF JOB                                            *
*********************************************************************
EOJ      CLOSE (OUTPUT1,,INPUT1)       CLOSE FILES
         L     R13,4(R13)              POINT TO CALLER'S SAVE AREA
         L     R14,12(R13)             RESTORE RETURN REG: R14
         L     R15,RETCODE             SET RETURN CODE
         LM    R0,R12,20(R13)          RESTORE CALLER'S REGS 0-12
         BR    R14                     RETURN
*********************************************************************
*        STORAGE AND FILE AREAS                                     *
*********************************************************************
*
DBLWD    DS    D                       DOUBLEWORD WORK AREA
RETCODE  DS    F                       RETURN CODE
P0       DC    P'0'                    CONSTANT ZERO
P1       DC    P'1'                    PACKED 1
LINENO   DC    PL2'0'                  LINE NUMBER COUNTER
PAGENO   DC    PL3'0'                  PAGE COUNTER
PAGEDIT  DC    XL7'4020206B202020'     EDIT MASK FOR PAGE NBR
*
OUTREC   DS    0CL151                 OUTPUT RECORD
INREC    DS    CL133                    INPUT RECORD
         DC    CL1' '                   TRAILING SPACES
         DC    CL4'PAGE'                LITERAL "PAGE"
OUTPGNO  DS    CL7                      PAGE NUMBER
         DC    CL3' LN'                 TRAILING SPACES
OUTLNNO  DS    CL3                     LINE NUMBER
*********************************************************************
*             DCB'S                                                 *
*********************************************************************
OUTPUT1  DCB   DSORG=PS,MACRF=PM,DDNAME=OUTPUT1,                       X
               RECFM=FBA,LRECL=151
INPUT1   DCB   DSORG=PS,MACRF=GM,DDNAME=INPUT1,EODAD=EOJ,              X
               RECFM=FBA,LRECL=133
         LTORG
*********************************************************************
*             REGISTER EQUATES                                      *
*********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
./ ADD NAME=CRSDESC  0102-86335-86335-0931-00059-00059-00000-USER02
1_______________________________________________________________________
 |                     --- COURSE DESCRIPTION ---                      |
 |                                                                     |
 |                                                                     |
 |COURSE TITLE: DUMP READING                                           |
 |                                                                     |
 |                                                                     |
 |                                                                     |
 |COURSE INSTRUCTOR: Dick Thornton                                     |
 |                                                                     |
 |                                                                     |
 |                                                                     |
 |COURSE OBJECTIVES: Provide the ability to locate the abending        |
 |                  instruction in a COBOL program, and data items     |
 |                  in main storage using an ABEND-AID dump. Emphasis  |
 |                  is on common abends, principally S0C7.             |
 |                                                                     |
 |                                                                     |
 |                                                                     |
 |PREREQUISITE TRAINING: Student should be currently familiar with the |
 |                  COBOL programming language, and have written       |
 |                  programs using COBOL.                              |
 |                                                                     |
 |                                                                     |
 |                                                                     |
 |COURSE OUTLINE:                                                      |
 |                                                                     |
 |                                                                     |
 |    A. First day:                                                    |
 |          1. Fundamentals of common numbering systems.               |
 |          2. Arithmetic in hexadecimal.                              |
 |          3. Main storage concepts and storage formats.              |
 |          4. Content of the ABEND-AID dump.                          |
 |          5. Content of the COBOL compile listing.                   |
 |          6. Content of the LINKEDIT listing.                        |
 |          7. General debugging approach and procedures.              |
 |          8. Finding the last executed instruction.                  |
 |          9. Locating data items in main storage.                    |
 |               a. Locating fields in a record of an open file.       |
 |               b. Locating simple fields in working storage.         |
 |               c. Locating fields in a subscripted area.             |
 |               d. Locating fields in an indexed area.                |
 |               d. Solving Input/Output problems.                     |
 |         10. Dump #1 solved by instructor, showing method.           |
 |                                                                     |
 |                                                                     |
 |    B. Second day: Dumps #2-#10 solved by students with instructor   |
 |       acting as facilitator.                                        |
 |                                                                     |
 |                                                                     |
 |                                                                     |
 |CLASS MATERIALS:                                                     |
 |                                                                     |
 |    A. Lesson textbook listing (25 pages).                           |
 |                                                                     |
 |    B. COBOL program and subroutine listings.                        |
 |                                                                     |
 |    C. ABENDAID storage dump listings.                               |
 |_____________________________________________________________________|
./ ADD NAME=CVTDATE  0100-02144-02144-0941-00036-00036-00000-BC0THOR
CVTDATE  CSECT
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  INITIALIZE BASE REGISTER
         USING CVTDATE,R3
         LA    R15,REGSAVE             POINT TO MY REGISTER SAVE AREA
         ST    R15,8(R13)              CHAIN FORWARD
         ST    R13,4(R15)              CHAIN BACKWARD
         LR    R13,R15                 SET UP SAVE AREA POINTER
         B     START                   GO BEGIN PROCESSING
REGSAVE  DS    18F                     REGISTER SAVE AREA
START    EQU   *
         L     R4,0(R1)                GET PARM
         L     R1,16                   GET ADDRESS OF CVT
         ZAP   0(3,R4),57(3,R1)        MOVE CURRENT CVT DATE TO CALLER
RETURN   L     R13,4(R13)              GET CALLER'S SAVE AREA ADDR
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGS
         SR    R15,R15                 CLEAR RETURN CODE
         BR    R14                     RETURN TO CALLER
PARM     DS    2F                      PARM LIST FOR SYSADD
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
./ ADD NAME=EDITMAC  0100-02148-02148-1610-00035-00035-00000-BC0THOR
/*********************************************************************/
/*   PURPOSE: USED TO PREPARE THE JCL IN THE DUMP CLASS JOBS FOR     */
/*            EXECUTION. TO USE:                                     */
/*   1: CHANGE AAAAAAA TO THE HIGH-LEVEL NODE NAME USED FOR THE CLASS*/
/*             LIBRARIES.                                            */
/*   2: CHANGE BBBBBBBB TO THE DSNAME PAST THE FIRST NODE FOR THE    */
/*             LIBRARY THAT WILL CONTAIN THE TEXT FOR THE STUDENT    */
/*             HANDOUT MATERIALS.                                    */
/*   3. CHANGE CCCCCCCC TO THE DSNAME PAST THE FIRST NODE FOR THE    */
/*             LIBRARY THAT WILL CONTAIN THE LOAD MODULES FOR THE    */
/*             PROGRAMS USED IN CLASS PREPARATIONS.                  */
/*   4. CHANGE DDDDDDDD TO THE DSNAME PAST THE FIRST NODE FOR THE    */
/*             LIBRARY CONTAINING THE CLASS MATERIALS (THIS EDIT     */
/*             MACRO, PROGRAM SOURCE CODE, TEXTBOOK, ETC).           */
/*   5. ADD ANY OTHER GENERIC CHANGES YOU MAY NEED, FOR EXAMPLE, IF  */
/*             YOU WANT TO CHANGE ALL THE UNIT=DISK PARAMETERS TO    */
/*             UNIT=SYSDA, ADD:                                      */
/*                      ISREDIT C ALL 'UNIT=DISK' 'UNIT=SYSDA'       */
/*   6. THE FINAL COMMAND IS TO INVOKE THE JCL CHECK UTILITY WE USE  */
/*             TO VALIDATE JCL. IF YOURS IS DIFFERENT, CHANGE IT. IF */
/*             YOU HAVE NONE, OR DON'T WISH TO CHECK THE JCL, DELETE */
/*             THE LAST COMMAND.                                     */
/*   7. PLACE THIS CLIST IN A LIBRARY THAT IS IN YOUR TSO SESSION'S  */
/*             SYSPROC CONCATENATION.                                */
/*   8. TO USE, TYPE THE NAME OF THE MEMBER YOU USED IN STEP 7 ON THE*/
/*             COMMAND LINE WHEN EDITING ANY OF THE JCL MEMBERS FOR  */
/*             THE CLASS.                                            */
/*********************************************************************/
ISREDIT MACRO
CONTROL NOLIST NOSYMLIST NOCONLIST MSG
ISREDIT C ALL '$$UID$$' 'AAAAAAAA'
ISREDIT C ALL '$$$.TEXTLIB' 'BBBBBBBB'
ISREDIT C ALL '$$$.LOADLIB' 'CCCCCCCC'
ISREDIT C ALL '$$$.SOURCE' 'DDDDDDDD'
ISREDIT !JCK
./ ADD NAME=JOB000   0106-02148-02149-1109-00172-00120-00000-BC0THOR
//BC0THORE JOB (0-0,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,
//   MSGCLASS=Y,NOTIFY=BC0THOR,REGION=104M
//JESOUT OUTPUT GROUPID=HDQTRSF2,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//*****************************************************************
//*         $$UID$$.$$$.SOURCE(JOB000)                            *
//*****************************************************************
//*  PRELIMINARY EDITING NEEDED:                                  *
//*  1) ENTER VALID JOB AND OUTPUT CARDS                          *
//*  2) USE THE EDITMAC MACRO OR:                                 *
//*     A) CHANGE ALL '$$UID$$' TO YOUR TSO USERID.               *
//*     B) CHANGE ALL $$$.TEXTLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS TEXT LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     C) CHANGE ALL $$$.LOADLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS LOAD LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     D) CHANGE ALL $$$.SOURCE TO THE DSNAME YOU CHOSE FOR THIS *
//*        LIBRARY ('$$UID$$' WILL BE THE HIGH-LEVEL NODE.).      *
//*     E) CHECK ALL JCL FOR YOUR SHOP'S STANDARDS. FOR EXAMPLE,  *
//*        UNIT=DISK IS USED FOR ALL DASD ALLOCATIONS, IGYCRCTL IS*
//*        THE COBOL COMPILER PROGRAM, ASMA90 IS THE ASSEMBLER,   *
//*        IEWL IS THE LINK-EDITOR (BINDER). OTHER STANDARD       *
//*        UTILITIES USED INCLUDE IDCAMS AND IEFBR14.             *
//*****************************************************************
//*  1) SCRATCH ANY FORMER CLASS LIBRARIES                        *
//*  2) ALLOCATE A $$UID$$.$$$.TEXTLIB PDS TO CONTAIN THE TEXT    *
//*     FOR THE CLASS HANDOUT AND A $$UID$$.$$$.LOADLIB TO CONTAIN*
//*     THE PROGRAM LOAD MODULES FOR THE CLASS.                   *
//*  3) A PROC TO ASSEMBLE AND LINKEDIT A UTILITY PROGRAM IN THIS *
//*     LIBRARY TO THE CLASS LOAD LIBRARY.                        *
//*  4) A PROC TO "UNSQUEEZE" A FILE INTO ITS ORIGINAL FORM       *
//*  5) ASSEMBLE/LINKEDIT THE COPYDUMP UTILITY                    *
//*  6) ASSEMBLE/LINKEDIT THE COPYNUM UTILITY                     *
//*  7) ASSEMBLE/LINKEDIT THE SQUEZE80 UTILITY                    *
//*  8) ASSEMBLE/LINKEDIT THE UNSQUZ80 UTILITY                    *
//*  9) "UNSQUEEZE" THE TEXTBOOK MEMBER OF THE SOURCE LIBRARY     *
//*     INTO THE TEXT LIBRARY.                                    *
//* 10) "UNSQUEEZE" THE CARD12 MEMBER OF THE SOURCE LIBRARY       *
//*     INTO THE TEXT LIBRARY.                                    *
//* 11) "UNSQUEEZE" THE CARD34 MEMBER OF THE SOURCE LIBRARY       *
//*     INTO THE TEXT LIBRARY.                                    *
//* 12) "UNSQUEEZE" THE CARD56 MEMBER OF THE SOURCE LIBRARY       *
//*     INTO THE TEXT LIBRARY.                                    *
//* 13) "UNSQUEEZE" THE CARD78 MEMBER OF THE SOURCE LIBRARY       *
//*     INTO THE TEXT LIBRARY.                                    *
//*****************************************************************
//*****************************************************************
//*  1) SCRATCH ANY FORMER CLASS LIBRARIES                        *
//*****************************************************************
//SCRATCH  EXEC PGM=IDCAMS
//SYSPRINT DD SYSOUT=*
//SYSIN    DD *
 DELETE $$UID$$.$$$.TEXTLIB
 DELETE $$UID$$.$$$.LOADLIB
//*****************************************************************
//*  2) ALLOCATE A NEW $$UID$$.$$$.TEXTLIB PDS TO CONTAIN CLASS   *
//*     HANDOUT TEXT.                                             *
//*****************************************************************
//ALLOC1   EXEC PGM=IEFBR14
//DD1      DD   DSN=$$UID$$.$$$.TEXTLIB,
//         DISP=(,CATLG),
//         UNIT=DISK,SPACE=(TRK,(900,60,25)),
//         DSORG=PO,RECFM=FBA,LRECL=133
//DD2      DD   DSN=$$UID$$.$$$.LOADLIB,
//         DISP=(,CATLG),
//         UNIT=DISK,SPACE=(TRK,(150,15,10)),
//         DSORG=PO,RECFM=U,LRECL=32760
//*****************************************************************
//*  3) PROC: ASSEMBLE AND LINKEDIT A PROGRAM IN THIS LIBRARY TO  *
//*        THE CLASS LOAD LIBRARY.                                *
//*****************************************************************
//*
//*        ASSEMBLE THE PROGRAM FROM THIS LIBRARY
//*
//ASMLKD   PROC CALL=CALL
//ASM      EXEC PGM=ASMA90,PARM='OBJECT,XREF(FULL)'
//SYSLIB   DD DSN=$$UID$$.$$$.SOURCE,
//         DISP=SHR
//         DD DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD DSN=&&SYSUT1,UNIT=DISK,SPACE=(CYL,(10,5))
//SYSPRINT DD SYSOUT=*
//SYSPUNCH DD DUMMY,DCB=BLKSIZE=80
//SYSLIN   DD DSN=&&LOADSET,DISP=(,PASS),
//         UNIT=DISK,SPACE=(CYL,(5,1),RLSE),
//         BLKSIZE=400
//SYSIN DD DUMMY
//*
//*        LINKEDIT (BIND) THE PROGRAM TO THE CLASS LOAD LIBRARY
//*
//LKED   EXEC  PGM=IEWL,PARM='LIST,XREF,LET,MAP,&CALL',
//       COND=(5,LT,ASM),REGION=512K
//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)
//SYSLIB   DD  DSN=$$UID$$.$$$.LOADLIB,
//         DISP=SHR
//SYSUT1   DD  UNIT=DISK,SPACE=(CYL,(1,1))
//SYSPRINT DD  SYSOUT=*
//SYSLMOD  DD  DUMMY
//         PEND
//*****************************************************************
//*     END OF PROC ASMLKD                                        *
//*****************************************************************
//*****************************************************************
//*  4) PROC: "UNSQUEEZE" MEMBERS IN THE SOURCE LIBRARY INTO THE  *
//*     TEXT LIBRARY.                                             *
//*****************************************************************
//EXPAND   PROC  MEMBER=
//UNSQUZ80 EXEC  PGM=UNSQUZ80
//STEPLIB  DD    DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSUDUMP DD    SYSOUT=*
//INPUT1   DD    DSN=$$UID$$.$$$.SOURCE(&MEMBER),
//         DISP=SHR
//OUTPUT1  DD    DSN=$$UID$$.$$$.TEXTLIB(&MEMBER),
//         DISP=SHR
//         PEND
//*****************************************************************
//*  5) ASSEMBLE AND LINKEDIT PROGRAM COPYDUMP                    *
//*****************************************************************
//COPYDUMP EXEC ASMLKD
//ASM.SYSIN    DD  DSN=$$UID$$.$$$.SOURCE(COPYDUMP),
//         DISP=SHR
//LKED.SYSLMOD  DD  DSN=$$UID$$.$$$.LOADLIB(COPYDUMP),
//         DISP=SHR
//*****************************************************************
//*  6) ASSEMBLE AND LINKEDIT PROGRAM COPYNUM                     *
//*****************************************************************
//COPYNUM  EXEC ASMLKD
//ASM.SYSIN    DD  DSN=$$UID$$.$$$.SOURCE(COPYNUM),
//         DISP=SHR
//LKED.SYSLMOD  DD  DSN=$$UID$$.$$$.LOADLIB(COPYNUM),
//         DISP=SHR
//*****************************************************************
//*  7) ASSEMBLE AND LINKEDIT PROGRAM SQUEZE80                    *
//*****************************************************************
//SQUEZE80 EXEC ASMLKD
//ASM.SYSIN    DD  DSN=$$UID$$.$$$.SOURCE(SQUEZE80),
//         DISP=SHR
//LKED.SYSLMOD  DD  DSN=$$UID$$.$$$.LOADLIB(SQUEZE80),
//         DISP=SHR
//*****************************************************************
//*  8) ASSEMBLE AND LINKEDIT PROGRAM UNSQUZ80                    *
//*****************************************************************
//UNSQUZ80 EXEC ASMLKD
//ASM.SYSIN    DD  DSN=$$UID$$.$$$.SOURCE(UNSQUZ80),
//         DISP=SHR
//LKED.SYSLMOD  DD  DSN=$$UID$$.$$$.LOADLIB(UNSQUZ80),
//         DISP=SHR
//*******************************************************************
//*  9) "UNSQUEEZE" THE TEXTBOOK MEMBER OF THE SOURCE LIBRARY INTO  *
//*    THE TEXT LIBRARY.                                            *
//*******************************************************************
//TEXTBOOK EXEC PROC=EXPAND,MEMBER=TEXTBOOK
//*******************************************************************
//* 10) "UNSQUEEZE" THE CARD12 MEMBER OF THE SOURCE LIBRARY INTO THE*
//*    TEXT LIBRARY.                                                *
//*******************************************************************
//CARD12   EXEC PROC=EXPAND,MEMBER=CARD12
//*******************************************************************
//* 11) "UNSQUEEZE" THE CARD34 MEMBER OF THE SOURCE LIBRARY INTO THE*
//*    TEXT LIBRARY.                                                *
//*******************************************************************
//CARD34   EXEC PROC=EXPAND,MEMBER=CARD34
//*******************************************************************
//* 12) "UNSQUEEZE" THE CARD56 MEMBER OF THE SOURCE LIBRARY INTO THE*
//*    TEXT LIBRARY.                                                *
//*******************************************************************
//CARD56   EXEC PROC=EXPAND,MEMBER=CARD56
//*******************************************************************
//* 13) "UNSQUEEZE" THE CARD78 MEMBER OF THE SOURCE LIBRARY INTO THE*
//*    TEXT LIBRARY.                                                *
//*******************************************************************
//CARD78   EXEC PROC=EXPAND,MEMBER=CARD78
./ ADD NAME=JOB001   0131-93075-02149-1103-00224-00303-00000-BC0THOR
//BC0THORE JOB (0-0,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,
//   MSGCLASS=Y,NOTIFY=BC0THOR,REGION=104M
//JESOUT OUTPUT GROUPID=HDQTRSF2,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//*****************************************************************
//*         $$UID$$.$$$.SOURCE(JOB001)                            *
//*****************************************************************
//*  PRELIMINARY EDITING NEEDED:                                  *
//*  1) ENTER VALID JOB AND OUTPUT CARDS                          *
//*  2) USE THE EDITMAC MACRO OR:                                 *
//*     A) CHANGE ALL '$$UID$$' TO YOUR TSO USERID.               *
//*     B) CHANGE ALL $$$.TEXTLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS TEXT LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     C) CHANGE ALL $$$.LOADLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS LOAD LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     D) CHANGE ALL $$$.SOURCE TO THE DSNAME YOU CHOSE FOR THIS *
//*        LIBRARY ('$$UID$$' WILL BE THE HIGH-LEVEL NODE.).      *
//*     E) CHECK ALL JCL FOR YOUR SHOP'S STANDARDS. FOR EXAMPLE,  *
//*        UNIT=DISK IS USED FOR ALL DASD ALLOCATIONS, IGYCRCTL IS*
//*        THE COBOL COMPILER PROGRAM, ASMA90 IS THE ASSEMBLER,   *
//*        IEWL IS THE LINK-EDITOR (BINDER). OTHER STANDARD       *
//*        UTILITIES USED INCLUDE IDCAMS AND IEFBR14.             *
//*****************************************************************
//*  1) A PROC TO COBOL COMPILE, LINKEDIT, AND COPY LISTINGS TO   *
//*     THE TEXT LIBRARY.                                         *
//*  2) A PROC TO ASSEMBLE, LINKEDIT, AND COPY LISTINGS TO THE    *
//*     TEXT LIBRARY.                                             *
//*  3) COMPILE/LINKEDIT/COPY LISTINGS FOR SYSDATE SUBROUTINE     *
//*  4) COMPILE/LINKEDIT/COPY LISTINGS FOR PROCNUM SUBROUTINE     *
//*  5) COMPILE/LINKEDIT/COPY LISTINGS FOR COBABEND SUBROUTINE    *
//*  6) ASSEMBLE/LINKEDIT/COPY LISTINGS FOR SYSAD2 SUBROUTINE     *
//*  7) ASSEMBLE/LINKEDIT/COPY LISTINGS FOR SYSADD SUBROUTINE     *
//*  8) ASSEMBLE/LINKEDIT/COPY LISTINGS FOR CVTDATE SUBROUTINE    *
//*  9) COMPILE/LINKEDIT/COPY LISTINGS FOR ABNDCOB PROGRAM        *
//*****************************************************************
//*  1) PROC: COMPILE, LINKEDIT (BIND), AND COPY LISTINGS TO THE  *
//*     TEXT LIBRARY.                                             *
//*****************************************************************
//*
//*        COMPILE THE PROGRAM FROM THIS LIBRARY
//*
//COBLKDCP PROC CALL=CALL
//COB2     EXEC  PGM=IGYCRCTL,PARM=(APOST,OFFSET)
//SYSTERM  DD  SYSOUT=*
//SYSPRINT DD  DSN=&&COBPRNT,DISP=(MOD,PASS),
//         UNIT=DISK,SPACE=(TRK,(10,2),RLSE)
//SYSLIB   DD  DSN=$$UID$$.$$$.SOURCE,
//         DISP=SHR
//SYSLIN   DD  DSN=&&LOADSET,UNIT=DISK,DISP=(MOD,PASS),
//             SPACE=(TRK,(3,3))
//SYSUT1   DD  UNIT=DISK,SPACE=(CYL,(1,1))
//SYSUT2   DD  UNIT=DISK,SPACE=(CYL,(1,1))
//SYSUT3   DD  UNIT=DISK,SPACE=(CYL,(1,1))
//SYSUT4   DD  UNIT=DISK,SPACE=(CYL,(1,1))
//SYSUT5   DD  UNIT=DISK,SPACE=(CYL,(1,1))
//SYSUT6   DD  UNIT=DISK,SPACE=(CYL,(1,1))
//SYSUT7   DD  UNIT=DISK,SPACE=(CYL,(1,1))
//SYSIN    DD  DUMMY
//*
//*        LINKEDIT (BIND) THE PROGRAM TO THE CLASS LOAD LIBRARY
//*
//LKED   EXEC  PGM=IEWL,PARM='LIST,XREF,LET,MAP,&CALL',
//       COND=(5,LT,COB2)
//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)
//SYSLIB   DD  DSN=$$UID$$.$$$.LOADLIB,
//         DISP=SHR
//         DD  DSN=CEE.SCEELKED,DISP=SHR
//SYSUT1   DD  UNIT=DISK,SPACE=(CYL,(1,1))
//SYSPRINT DD  DSN=&&LKEDPRNT,DISP=(,PASS),
//         UNIT=DISK,SPACE=(TRK,(5,1),RLSE)
//SYSLMOD  DD  DUMMY
//*
//*        PROCESS THE COMPILE AND LINKEDIT LISTINGS TO RECFM=FBA,
//*        LRECL=133 AND COPY THEM TO $$UID$$.$$$.TEXTLIB MEMBERS
//*
//COPYLIST EXEC PGM=COPYDUMP
//STEPLIB  DD   DSN=$$UID$$.$$$.LOADLIB,
//         DISP=SHR
//SYSUDUMP DD   SYSOUT=*
//INPUT1   DD   DSN=&&COBPRNT,DISP=(OLD,DELETE,DELETE)
//INPUT2   DD   DSN=&&LKEDPRNT,DISP=(OLD,DELETE,DELETE)
//OUTPUT1  DD   DUMMY
//         PEND
//*****************************************************************
//*     END OF PROC COBLKDCP.                                     *
//*****************************************************************
//*****************************************************************
//*  2) PROC: "UNSQUEEZE" MEMBERS IN THE SOURCE LIBRARY INTO THE  *
//*     TEXT LIBRARY.                                             *
//*****************************************************************
//EXPAND   PROC  MEMBER=
//UNSQUZ80 EXEC  PGM=UNSQUZ80
//STEPLIB  DD    DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSUDUMP DD    SYSOUT=*
//INPUT1   DD    DSN=$$UID$$.$$$.SOURCE(&MEMBER),
//         DISP=SHR
//OUTPUT1  DD    DSN=$$UID$$.$$$.TEXTLIB(&MEMBER),
//         DISP=SHR
//         PEND
//*******************************************************************
//*  END OF PROC EXPAND                                             *
//*******************************************************************
//*****************************************************************
//*  3) PROC: ASSEMBLE, LINKEDIT (BIND), AND COPY LISTINGS TO THE *
//*     TEXT LIBRARY.                                             *
//*****************************************************************
//*
//*        ASSEMBLE THE PROGRAM FROM THIS LIBRARY
//*
//ASMLKDCP PROC CALL=CALL
//ASM      EXEC PGM=ASMA90,PARM='OBJECT,XREF(FULL)'
//SYSLIB   DD DSN=$$UID$$.$$$.SOURCE,
//         DISP=SHR
//         DD DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD DSN=&&SYSUT1,UNIT=DISK,SPACE=(CYL,(10,5))
//SYSPRINT DD  DSN=&&ASMPRNT,DISP=(,PASS),
//         UNIT=DISK,SPACE=(TRK,(10,2),RLSE)
//SYSPUNCH DD DUMMY,DCB=BLKSIZE=80
//SYSLIN   DD DSN=&&LOADSET,DISP=(,PASS),
//         UNIT=DISK,SPACE=(CYL,(5,1),RLSE),
//         BLKSIZE=400
//SYSIN DD DUMMY
//*
//*        LINKEDIT (BIND) THE PROGRAM TO THE CLASS LOAD LIBRARY
//*
//LKED   EXEC  PGM=IEWL,PARM='LIST,XREF,LET,MAP,&CALL',
//       COND=(5,LT,ASM),REGION=512K
//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)
//SYSLIB   DD  DSN=$$UID$$.$$$.LOADLIB,
//         DISP=SHR
//SYSUT1   DD  UNIT=DISK,SPACE=(CYL,(1,1))
//SYSPRINT DD  DSN=&&LKEDPRNT,DISP=(,PASS),
//         UNIT=DISK,SPACE=(TRK,(5,1),RLSE)
//SYSLMOD  DD  DUMMY
//*
//*        PROCESS THE COMPILE AND LINKEDIT LISTINGS TO RECFM=FBA,
//*        LRECL=133 AND COPY THEM TO $$UID$$.$$$.TEXTLIB MEMBERS
//*
//COPYLIST EXEC PGM=COPYDUMP
//STEPLIB  DD   DSN=$$UID$$.$$$.LOADLIB,
//         DISP=SHR
//SYSUDUMP DD   SYSOUT=*
//INPUT1   DD   DSN=&&ASMPRNT,DISP=(OLD,DELETE,DELETE)
//INPUT2   DD   DSN=&&LKEDPRNT,DISP=(OLD,DELETE,DELETE)
//OUTPUT1  DD   DUMMY
//         PEND
//*****************************************************************
//*     END OF PROC ASMLKDCP                                      *
//*****************************************************************
//*****************************************************************
//*  4) COMPILE/LINKEDIT/COPY LISTINGS FOR SYSDATE SUBROUTINE     *
//*****************************************************************
//SYSDATE  EXEC PROC=COBLKDCP,CALL=NCAL
//COB2.SYSIN    DD  DSN=$$UID$$.$$$.SOURCE(SYSDATE),
//         DISP=SHR
//LKED.SYSLMOD  DD  DSN=$$UID$$.$$$.LOADLIB(SYSDATE),
//         DISP=SHR
//COPYLIST.OUTPUT1  DD   DSN=$$UID$$.$$$.TEXTLIB(SYSDATE),
//         DISP=SHR
//*****************************************************************
//*  5) COMPILE/LINKEDIT/COPY LISTINGS FOR PROCNUM SUBROUTINE     *
//*****************************************************************
//*
//*        COMPILE THE PROCNUM SUBROUTINE
//*
//PROCNUM  EXEC PROC=COBLKDCP,CALL=NCAL
//COB2.SYSIN    DD  DSN=$$UID$$.$$$.SOURCE(PROCNUM),
//         DISP=SHR
//LKED.SYSLMOD  DD  DSN=$$UID$$.$$$.LOADLIB(PROCNUM),
//         DISP=SHR
//COPYLIST.OUTPUT1  DD   DSN=$$UID$$.$$$.TEXTLIB(PROCNUM),
//         DISP=SHR
//*****************************************************************
//*  6) COMPILE/LINKEDIT/COPY LISTINGS FOR COBABEND SUBROUTINE    *
//*****************************************************************
//COBABEND EXEC PROC=COBLKDCP,CALL=NCAL
//COB2.SYSIN    DD  DSN=$$UID$$.$$$.SOURCE(COBABEND),
//         DISP=SHR
//LKED.SYSLMOD  DD  DSN=$$UID$$.$$$.LOADLIB(COBABEND),
//         DISP=SHR
//COPYLIST.OUTPUT1  DD   DSN=$$UID$$.$$$.TEXTLIB(COBABEND),
//         DISP=SHR
//*****************************************************************
//*  7) ASSEMBLE/LINKEDIT/COPY LISTINGS FOR SYSAD2 SUBROUTINE     *
//*****************************************************************
//SYSAD2   EXEC ASMLKDCP
//ASM.SYSIN    DD  DSN=$$UID$$.$$$.SOURCE(SYSAD2),
//         DISP=SHR
//LKED.SYSLMOD  DD  DSN=$$UID$$.$$$.LOADLIB(SYSAD2),
//         DISP=SHR
//COPYLIST.OUTPUT1  DD   DSN=$$UID$$.$$$.TEXTLIB(SYSAD2),
//         DISP=SHR
//*****************************************************************
//*  8) ASSEMBLE/LINKEDIT/COPY LISTINGS FOR SYSADD SUBROUTINE     *
//*****************************************************************
//SYSADD   EXEC ASMLKDCP
//ASM.SYSIN    DD  DSN=$$UID$$.$$$.SOURCE(SYSADD),
//         DISP=SHR
//LKED.SYSLMOD  DD  DSN=$$UID$$.$$$.LOADLIB(SYSADD),
//         DISP=SHR
//COPYLIST.OUTPUT1  DD   DSN=$$UID$$.$$$.TEXTLIB(SYSADD),
//         DISP=SHR
//*****************************************************************
//*  9) ASSEMBLE/LINKEDIT/COPY LISTINGS FOR CVTDATE SUBROUTINE    *
//*****************************************************************
//CVTDATE  EXEC ASMLKDCP
//ASM.SYSIN    DD  DSN=$$UID$$.$$$.SOURCE(CVTDATE),
//         DISP=SHR
//LKED.SYSLMOD  DD  DSN=$$UID$$.$$$.LOADLIB(CVTDATE),
//         DISP=SHR
//COPYLIST.OUTPUT1  DD   DSN=$$UID$$.$$$.TEXTLIB(CVTDATE),
//         DISP=SHR
//*****************************************************************
//* 10) COMPILE/LINKEDIT/COPY LISTINGS FOR ABNDCOB PROGRAM        *
//*****************************************************************
//ABNDCOB  EXEC PROC=COBLKDCP
//COB2.SYSIN    DD  DSN=$$UID$$.$$$.SOURCE(ABNDCOB),
//         DISP=SHR
//LKED.SYSLMOD  DD  DSN=$$UID$$.$$$.LOADLIB(ABNDCOB),
//         DISP=SHR
//COPYLIST.OUTPUT1  DD   DSN=$$UID$$.$$$.TEXTLIB(ABNDCOB),
//         DISP=SHR
./ ADD NAME=JOB002A  0108-93078-02149-0833-00051-00030-00000-BC0THOR
//BC0THORA JOB (0-0,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,
//   MSGCLASS=Y,NOTIFY=$$UID$$,REGION=4M
//JESOUT OUTPUT GROUPID=HDQTRSF2,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//*****************************************************************
//*         $$UID$$.$$$.SOURCE(JOB002A)                           *
//*     CREATE DUMP DATASET FOR ABEND-AID DUMP CLASS              *
//*****************************************************************
//*  1) REPLACE THE JOB AND OUTPUT STATEMENTS WITH YOUR OWN.      *
//*  2) USE THE EDITMAC MACRO OR:                                 *
//*     A) CHANGE ALL '$$UID$$' TO YOUR TSO USERID.               *
//*     B) CHANGE ALL $$$.TEXTLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS TEXT LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     C) CHANGE ALL $$$.LOADLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS LOAD LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     D) CHANGE ALL $$$.SOURCE TO THE DSNAME YOU CHOSE FOR THIS *
//*        LIBRARY ('$$UID$$' WILL BE THE HIGH-LEVEL NODE.).      *
//*     E) CHECK ALL JCL FOR YOUR SHOP'S STANDARDS. FOR EXAMPLE,  *
//*        UNIT=DISK IS USED FOR ALL DASD ALLOCATIONS, IGYCRCTL IS*
//*        THE COBOL COMPILER PROGRAM, ASMA90 IS THE ASSEMBLER,   *
//*        IEWL IS THE LINK-EDITOR (BINDER). OTHER STANDARD       *
//*        UTILITIES USED INCLUDE IDCAMS AND IEFBR14.             *
//*****************************************************************
//ABEND00A  EXEC PGM=ABNDCOB,PARM='BBBB'
//STEPLIB   DD   DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSDBOUT  DD   SYSOUT=*
//SYSUDUMP  DD   SYSOUT=*
//ABNLWIDE  DD   DUMMY
//PRINT1    DD   SYSOUT=*,BLKSIZE=133
//READER1   DD   DSN=$$UID$$.$$$.SOURCE(TABLE),DISP=SHR
//          DD   DSN=$$UID$$.$$$.SOURCE(TABLE0A),DISP=SHR
//INPUT2    DD   DSN=$$UID$$.$$$.SOURCE(TRANFILA),DISP=SHR
//SYSIN     DD   *
************************************************************************
* ABEND CODE:      ____                                                *
*                                                                      *
* ABEND LOCATION:  ABNDCOB+______ (IN _____- ROUTINE)                  *
*                                                                      *
* SOURCE LINE IS:                                                      *
*   ___  __________________________________________________      ______*
*   ___      ________________________________                          *
*                                                                      *
* ABEND CAUSED BY: __________________________________________________  *
*                  ______________________________________________      *
*                                                                      *
* DATA STRUCTURES: SUBSCRIPTED TABLE, INDEXED TABLE                    *
*                                                                      *
* DATA TYPES:      INDEX, PACKED DECIMAL, ZONED DECIMAL                *
************************************************************************
./ ADD NAME=JOB002B  0107-93078-02149-0847-00051-00030-00000-BC0THOR
//BC0THORB JOB (1152002-9800039,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,
//   MSGCLASS=Y,NOTIFY=$$UID$$,REGION=4M
//JESOUT OUTPUT GROUPID=HDQTRSF2,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//*****************************************************************
//*         $$UID$$.$$$.SOURCE(JOB002B)                           *
//*     CREATE DUMP DATASET FOR ABEND-AID DUMP CLASS              *
//*****************************************************************
//*  1) REPLACE THE JOB AND OUTPUT STATEMENTS WITH YOUR OWN.      *
//*  2) USE THE EDITMAC MACRO OR:                                 *
//*     A) CHANGE ALL '$$UID$$' TO YOUR TSO USERID.               *
//*     B) CHANGE ALL $$$.TEXTLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS TEXT LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     C) CHANGE ALL $$$.LOADLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS LOAD LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     D) CHANGE ALL $$$.SOURCE TO THE DSNAME YOU CHOSE FOR THIS *
//*        LIBRARY ('$$UID$$' WILL BE THE HIGH-LEVEL NODE.).      *
//*     E) CHECK ALL JCL FOR YOUR SHOP'S STANDARDS. FOR EXAMPLE,  *
//*        UNIT=DISK IS USED FOR ALL DASD ALLOCATIONS, IGYCRCTL IS*
//*        THE COBOL COMPILER PROGRAM, ASMA90 IS THE ASSEMBLER,   *
//*        IEWL IS THE LINK-EDITOR (BINDER). OTHER STANDARD       *
//*        UTILITIES USED INCLUDE IDCAMS AND IEFBR14.             *
//*****************************************************************
//ABEND00B  EXEC PGM=ABNDCOB,PARM='BBBB'
//STEPLIB   DD   DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSDBOUT  DD   SYSOUT=*
//SYSUDUMP  DD   SYSOUT=*
//ABNLWIDE  DD   DUMMY
//PRINT1    DD   SYSOUT=*,BLKSIZE=133
//READER1   DD   DSN=$$UID$$.$$$.SOURCE(TABLE),DISP=SHR
//          DD   DSN=$$UID$$.$$$.SOURCE(TABLE0B),DISP=SHR
//INPUT2    DD   DSN=$$UID$$.$$$.SOURCE(TRANFILB),DISP=SHR
//SYSIN     DD   *
************************************************************************
* ABEND CODE:      ____                                                *
*                                                                      *
* ABEND LOCATION:  ABNDCOB+_____8 (IN ____- ROUTINE)                   *
*                                                                      *
* SOURCE LINE IS:                                                      *
*   ___  __________________________________________________      ______*
*   ___      ___________________________                               *
*                                                                      *
* ABEND CAUSED BY: --------------------------------------------------  *
*                  -------------------------------------------         *
*                                                                      *
* DATA STRUCTURES: SUBSCRIPTED TABLE, INDEXED TABLE                    *
*                                                                      *
* DATA TYPES:      INDEX, PACKED DECIMAL, BINARY.                      *
************************************************************************
./ ADD NAME=JOB0021  0107-93078-02149-1630-00069-00029-00000-BC0THOR
//BC0THOR1 JOB (1152002-9800039,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,
//   MSGCLASS=Y,NOTIFY=$$UID$$,REGION=4M
//JESOUT OUTPUT GROUPID=HDQTRSF2,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//*****************************************************************
//*         $$UID$$.$$$.SOURCE(JOB0021)                           *
//*     CREATE DUMP DATASET #1 FOR ABEND-AID DUMP CLASS           *
//*****************************************************************
//*  1) REPLACE THE JOB AND OUTPUT STATEMENTS WITH YOUR OWN.      *
//*  2) USE THE EDITMAC MACRO OR:                                 *
//*     A) CHANGE ALL '$$UID$$' TO YOUR TSO USERID.               *
//*     B) CHANGE ALL $$$.TEXTLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS TEXT LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     C) CHANGE ALL $$$.LOADLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS LOAD LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     D) CHANGE ALL $$$.SOURCE TO THE DSNAME YOU CHOSE FOR THIS *
//*        LIBRARY ('$$UID$$' WILL BE THE HIGH-LEVEL NODE.).      *
//*     E) CHECK ALL JCL FOR YOUR SHOP'S STANDARDS. FOR EXAMPLE,  *
//*        UNIT=DISK IS USED FOR ALL DASD ALLOCATIONS, IGYCRCTL IS*
//*        THE COBOL COMPILER PROGRAM, ASMA90 IS THE ASSEMBLER,   *
//*        IEWL IS THE LINK-EDITOR (BINDER). OTHER STANDARD       *
//*        UTILITIES USED INCLUDE IDCAMS AND IEFBR14.             *
//*****************************************************************
//ABEND001  EXEC PGM=ABNDCOB,PARM='YNY321'
//STEPLIB   DD   DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSDBOUT  DD   SYSOUT=*
//SYSUDUMP  DD   SYSOUT=*
//ABNLWIDE  DD   DUMMY
//PRINT1    DD   SYSOUT=*,BLKSIZE=133
//READER1   DD   DSN=$$UID$$.$$$.SOURCE(TABLE),DISP=SHR
//          DD   DSN=$$UID$$.$$$.SOURCE(TABLE01),DISP=SHR
//INPUT2    DD   DSN=$$UID$$.$$$.SOURCE(TRANFIL1),DISP=SHR
//SYSIN     DD   *
************************************************************************
* ABEND CODE:      S0C7  (DUMP PAGE 206 LINE 39)                       *
*                                                                      *
* ABEND LOCATION:  ABNDCOB+1972 (DUMP PAGE 206 LINE 55)                *
*                                                                      *
* SOURCE LINE IS: (COMPILE PAGE 66 LINE 55 AND PAGE 50 LINE 99)        *
*   547 MOVE CLAIM-DATA-CHARGES TO CLAIM-TOTAL-CHARGES (IX1).          *
*                                                                      *
*   CLAIM-DATA-CHARGES (COMPILE PAGE 42 LINE 7), BLF=000+01B, LENGTH 5,*
*           DATA TYPE ZONED DECIMAL. IN DATA RECORD FOR FD TABLE-FILE  *
*           (COMPILE PAGE 41 LINE 65) WHICH RELATES TO DDNAME READER1  *
*           (COMPILE PAGE 41 LINES 47, 49)                             *
*           CONTENTS ARE: CHARACTER $1620 OR HEX 5BF1F6F2F0 (DUMP PAGE *
*           268 LINES 11-17). THIS IS NOT VALID ZONED DECIMAL DATA, AND*
*           IS THE CAUSE OF THE ABEND.                                 *
*   IX1 (COMPILE PAGE 44 LINE 81) IS IDX0001.                          *
*           CONTENTS ARE HEX 00002C2E (DUMP PAGE 264 LINE 49) WHICH    *
*           REPRESENTS OCCURRENCE #88 IN THE TABLE.                    *
*   CLAIM-TOTAL-CHARGES(IX1) (COMPILE PAGE 44 LINE 97), BLW0000+1C2,   *
*           LENGTH 4, DATA TYPE PACKED DECIMAL. IN CLAIM-TABLE-ENTRY   *
*           (COMPILE PAGE 44 LINES 79, 81) WHICH IS OF LENGTH 130 AND  *
*           OCCURS 100 TIMES.                                          *
*           CONTENTS AT BLW0000+1C2+2C2E = BLW0000+2DF0 = BLW0002+DF0  *
*           ARE (DUMP PAGE 226 LINE 51) HEX 00B1620F WHICH IS INVALID  *
*           PACKED DECIMAL, HOWEVER THIS IS A RECEIVING FIELD, AND     *
*           COULD NOT HAVE CAUSED THE ABEND.                           *
*                                                                      *
* ABEND CAUSED BY: INVALID ZONED DECIMAL DATA IN THE FIELD             *
*                  CLAIM-DATA-CHARGES.                                 *
*                                                                      *
* DATA STRUCTURES: INPUT DATA RECORD, INDEXED TABLE                    *
*                                                                      *
* DATA TYPES:      INDEX, PACKED DECIMAL, ZONED DECIMAL                *
************************************************************************
./ ADD NAME=JOB0022  0106-93078-02149-0850-00049-00028-00000-BC0THOR
//BC0THOR2 JOB (1152002-9800039,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,
//   MSGCLASS=Y,NOTIFY=$$UID$$,REGION=4M
//JESOUT OUTPUT GROUPID=HDQTRSF2,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//*****************************************************************
//*         $$UID$$.$$$.SOURCE(JOB0022)                           *
//*     CREATE DUMP DATASET FOR ABEND-AID DUMP CLASS              *
//*****************************************************************
//*  1) REPLACE THE JOB AND OUTPUT STATEMENTS WITH YOUR OWN.      *
//*  2) USE THE EDITMAC MACRO OR:                                 *
//*     A) CHANGE ALL '$$UID$$' TO YOUR TSO USERID.               *
//*     B) CHANGE ALL $$$.TEXTLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS TEXT LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     C) CHANGE ALL $$$.LOADLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS LOAD LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     D) CHANGE ALL $$$.SOURCE TO THE DSNAME YOU CHOSE FOR THIS *
//*        LIBRARY ('$$UID$$' WILL BE THE HIGH-LEVEL NODE.).      *
//*     E) CHECK ALL JCL FOR YOUR SHOP'S STANDARDS. FOR EXAMPLE,  *
//*        UNIT=DISK IS USED FOR ALL DASD ALLOCATIONS, IGYCRCTL IS*
//*        THE COBOL COMPILER PROGRAM, ASMA90 IS THE ASSEMBLER,   *
//*        IEWL IS THE LINK-EDITOR (BINDER). OTHER STANDARD       *
//*        UTILITIES USED INCLUDE IDCAMS AND IEFBR14.             *
//*****************************************************************
//ABEND002  EXEC PGM=ABNDCOB,PARM='PDQ039'
//STEPLIB   DD   DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSDBOUT  DD   SYSOUT=*
//SYSUDUMP  DD   SYSOUT=*
//ABNLWIDE  DD   DUMMY
//PRINT1    DD   SYSOUT=*,BLKSIZE=133
//READER1   DD   DSN=$$UID$$.$$$.SOURCE(TABLE),DISP=SHR
//INPUT2    DD   DSN=$$UID$$.$$$.SOURCE(TRANFIL2),DISP=SHR
//SYSIN     DD   *
************************************************************************
* ABEND CODE:      ____                                                *
*                                                                      *
* ABEND LOCATION:  ABNDCOB+______ (IN ____- ROUTINE)                   *
*                                                                      *
* SOURCE LINE IS:                                                      *
*   ___  _________________________________________________    ______   *
*                                                                      *
* ABEND CAUSED BY: _________________________________________________   *
*                  ___________________                                 *
*                                                                      *
* DATA STRUCTURES: INPUT DATA RECORD, SUBSCRIPTED TABLE.               *
*                                                                      *
* DATA TYPES:      ZONED DECIMAL, PACKED DECIMAL.                      *
************************************************************************
./ ADD NAME=JOB0023  0106-93078-02149-0851-00051-00030-00000-BC0THOR
//BC0THOR3 JOB (1152002-9800039,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,
//   MSGCLASS=Y,NOTIFY=$$UID$$,REGION=4M
//JESOUT OUTPUT GROUPID=HDQTRSF2,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//*****************************************************************
//*         $$UID$$.$$$.SOURCE(JOB0023)                           *
//*     CREATE DUMP DATASET FOR ABEND-AID DUMP CLASS              *
//*****************************************************************
//*  1) REPLACE THE JOB AND OUTPUT STATEMENTS WITH YOUR OWN.      *
//*  2) USE THE EDITMAC MACRO OR:                                 *
//*     A) CHANGE ALL '$$UID$$' TO YOUR TSO USERID.               *
//*     B) CHANGE ALL $$$.TEXTLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS TEXT LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     C) CHANGE ALL $$$.LOADLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS LOAD LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     D) CHANGE ALL $$$.SOURCE TO THE DSNAME YOU CHOSE FOR THIS *
//*        LIBRARY ('$$UID$$' WILL BE THE HIGH-LEVEL NODE.).      *
//*     E) CHECK ALL JCL FOR YOUR SHOP'S STANDARDS. FOR EXAMPLE,  *
//*        UNIT=DISK IS USED FOR ALL DASD ALLOCATIONS, IGYCRCTL IS*
//*        THE COBOL COMPILER PROGRAM, ASMA90 IS THE ASSEMBLER,   *
//*        IEWL IS THE LINK-EDITOR (BINDER). OTHER STANDARD       *
//*        UTILITIES USED INCLUDE IDCAMS AND IEFBR14.             *
//*****************************************************************
//ABEND003  EXEC PGM=ABNDCOB,PARM='7RT2K5'
//STEPLIB   DD   DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSDBOUT  DD   SYSOUT=*
//SYSUDUMP  DD   SYSOUT=*
//ABNLWIDE  DD   DUMMY
//PRINT1    DD   SYSOUT=*,BLKSIZE=133
//READER1   DD   DSN=$$UID$$.$$$.SOURCE(TABLE),DISP=SHR
//          DD   DSN=$$UID$$.$$$.SOURCE(TABLE03),DISP=SHR
//INPUT2    DD   DSN=$$UID$$.$$$.SOURCE(TRANFIL3),DISP=SHR
//SYSIN     DD   *
************************************************************************
* ABEND CODE:      ____                                                *
*                                                                      *
* ABEND LOCATION:  ABNDCOB+______ (IN ____- ROUTINE)                   *
*                                                                      *
* SOURCE LINE IS:                                                      *
*   ___  ____________________________________________________    ______*
*            _____________________________-                            *
*                                                                      *
* ABEND CAUSED BY: _________________________________________________   *
*                  __________________________________________________  *
*                                                                      *
* DATA STRUCTURES: SUBSCRIPTED TABLE, INDEXED TABLE                    *
*                                                                      *
* DATA TYPES:      INDEX, PACKED DECIMAL, ZONED DECIMAL, BINARY        *
************************************************************************
./ ADD NAME=JOB0024  0106-93078-02149-0852-00051-00030-00000-BC0THOR
//BC0THOR4 JOB (1152002-9800039,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,
//   MSGCLASS=Y,NOTIFY=$$UID$$,REGION=4M
//JESOUT OUTPUT GROUPID=HDQTRSF2,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//*****************************************************************
//*         $$UID$$.$$$.SOURCE(JOB0024)                           *
//*     CREATE DUMP DATASET FOR ABEND-AID DUMP CLASS              *
//*****************************************************************
//*  1) REPLACE THE JOB AND OUTPUT STATEMENTS WITH YOUR OWN.      *
//*  2) USE THE EDITMAC MACRO OR:                                 *
//*     A) CHANGE ALL '$$UID$$' TO YOUR TSO USERID.               *
//*     B) CHANGE ALL $$$.TEXTLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS TEXT LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     C) CHANGE ALL $$$.LOADLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS LOAD LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     D) CHANGE ALL $$$.SOURCE TO THE DSNAME YOU CHOSE FOR THIS *
//*        LIBRARY ('$$UID$$' WILL BE THE HIGH-LEVEL NODE.).      *
//*     E) CHECK ALL JCL FOR YOUR SHOP'S STANDARDS. FOR EXAMPLE,  *
//*        UNIT=DISK IS USED FOR ALL DASD ALLOCATIONS, IGYCRCTL IS*
//*        THE COBOL COMPILER PROGRAM, ASMA90 IS THE ASSEMBLER,   *
//*        IEWL IS THE LINK-EDITOR (BINDER). OTHER STANDARD       *
//*        UTILITIES USED INCLUDE IDCAMS AND IEFBR14.             *
//*****************************************************************
//ABEND004  EXEC PGM=ABNDCOB,PARM='T8P2S5'
//STEPLIB   DD   DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSDBOUT  DD   SYSOUT=*
//SYSUDUMP  DD   SYSOUT=*
//ABNLWIDE  DD   DUMMY
//PRINT1    DD   SYSOUT=*,BLKSIZE=133
//READER1   DD   DSN=$$UID$$.$$$.SOURCE(TABLE),DISP=SHR
//          DD   DSN=$$UID$$.$$$.SOURCE(TABLE04),DISP=SHR
//INPUT2    DD   DSN=$$UID$$.$$$.SOURCE(TRANFIL4),DISP=SHR
//SYSIN     DD   *
************************************************************************
* ABEND CODE:      ____                                                *
*                                                                      *
* ABEND LOCATION:  ABNDCOB+______ (IN ____- ROUTINE)                   *
*                                                                      *
* SOURCE LINE IS:                                                      *
*   ___  _________________________________________________       ______*
*            __________________________________                        *
*                                                                      *
* ABEND CAUSED BY: __________________________________________________  *
*                  __________                                          *
*                                                                      *
* DATA STRUCTURES: INDEXED TABLE, SUBSCRIPTED TABLE,                   *
*                                                                      *
* DATA TYPES:      INDEX, PACKED DECIMAL, ZONED DECIMAL                *
************************************************************************
./ ADD NAME=JOB0025  0106-93078-02149-0853-00051-00030-00000-BC0THOR
//BC0THOR5 JOB (1152002-9800039,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,
//   MSGCLASS=Y,NOTIFY=$$UID$$,REGION=4M
//JESOUT OUTPUT GROUPID=HDQTRSF2,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//*****************************************************************
//*         $$UID$$.$$$.SOURCE(JOB0025)                           *
//*     CREATE DUMP DATASET FOR ABEND-AID DUMP CLASS              *
//*****************************************************************
//*  1) REPLACE THE JOB AND OUTPUT STATEMENTS WITH YOUR OWN.      *
//*  2) USE THE EDITMAC MACRO OR:                                 *
//*     A) CHANGE ALL '$$UID$$' TO YOUR TSO USERID.               *
//*     B) CHANGE ALL $$$.TEXTLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS TEXT LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     C) CHANGE ALL $$$.LOADLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS LOAD LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     D) CHANGE ALL $$$.SOURCE TO THE DSNAME YOU CHOSE FOR THIS *
//*        LIBRARY ('$$UID$$' WILL BE THE HIGH-LEVEL NODE.).      *
//*     E) CHECK ALL JCL FOR YOUR SHOP'S STANDARDS. FOR EXAMPLE,  *
//*        UNIT=DISK IS USED FOR ALL DASD ALLOCATIONS, IGYCRCTL IS*
//*        THE COBOL COMPILER PROGRAM, ASMA90 IS THE ASSEMBLER,   *
//*        IEWL IS THE LINK-EDITOR (BINDER). OTHER STANDARD       *
//*        UTILITIES USED INCLUDE IDCAMS AND IEFBR14.             *
//*****************************************************************
//ABEND005  EXEC PGM=ABNDCOB,PARM='YAZB55'
//STEPLIB   DD   DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSDBOUT  DD   SYSOUT=*
//SYSUDUMP  DD   SYSOUT=*
//ABNLWIDE  DD   DUMMY
//PRINT1    DD   SYSOUT=*,BLKSIZE=133
//READER1   DD   DSN=$$UID$$.$$$.SOURCE(TABLE),DISP=SHR
//          DD   DSN=$$UID$$.$$$.SOURCE(TABLE05),DISP=SHR
//INPUT2    DD   DSN=$$UID$$.$$$.SOURCE(TRANFIL5),DISP=SHR
//SYSIN     DD   *
************************************************************************
* ABEND CODE:      ____                                                *
*                                                                      *
* ABEND LOCATION:  ABNDCOB+______ (IN ____- ROUTINE)                   *
*                                                                      *
* SOURCE LINE IS:                                                      *
*   ___  ___________________________________________________     ______*
*            ____________________________________                      *
*                                                                      *
* ABEND CAUSED BY: ___________________________________________________ *
*                  _____________________________________________       *
*                                                                      *
* DATA STRUCTURES: SUBSCRIPTED TABLE, INDEXED TABLE                    *
*                                                                      *
* DATA TYPES:      INDEX, PACKED DECIMAL, ZONED DECIMAL, BINARY        *
************************************************************************
./ ADD NAME=JOB0026  0106-93078-02149-0854-00050-00029-00000-BC0THOR
//BC0THOR6 JOB (1152002-9800039,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,
//   MSGCLASS=Y,NOTIFY=$$UID$$,REGION=4M
//JESOUT OUTPUT GROUPID=HDQTRSF2,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//*****************************************************************
//*         $$UID$$.$$$.SOURCE(JOB0026)                           *
//*     CREATE DUMP DATASET FOR ABEND-AID DUMP CLASS              *
//*****************************************************************
//*  1) REPLACE THE JOB AND OUTPUT STATEMENTS WITH YOUR OWN.      *
//*  2) USE THE EDITMAC MACRO OR:                                 *
//*     A) CHANGE ALL '$$UID$$' TO YOUR TSO USERID.               *
//*     B) CHANGE ALL $$$.TEXTLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS TEXT LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     C) CHANGE ALL $$$.LOADLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS LOAD LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     D) CHANGE ALL $$$.SOURCE TO THE DSNAME YOU CHOSE FOR THIS *
//*        LIBRARY ('$$UID$$' WILL BE THE HIGH-LEVEL NODE.).      *
//*     E) CHECK ALL JCL FOR YOUR SHOP'S STANDARDS. FOR EXAMPLE,  *
//*        UNIT=DISK IS USED FOR ALL DASD ALLOCATIONS, IGYCRCTL IS*
//*        THE COBOL COMPILER PROGRAM, ASMA90 IS THE ASSEMBLER,   *
//*        IEWL IS THE LINK-EDITOR (BINDER). OTHER STANDARD       *
//*        UTILITIES USED INCLUDE IDCAMS AND IEFBR14.             *
//*****************************************************************
//ABEND006  EXEC PGM=ABNDCOB,PARM='AOBOC4'
//STEPLIB   DD   DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSDBOUT  DD   SYSOUT=*
//SYSUDUMP  DD   SYSOUT=*
//ABNLWIDE  DD   DUMMY
//PRINT1    DD   SYSOUT=*,BLKSIZE=133
//READER1   DD   DSN=$$UID$$.$$$.SOURCE(TABLE),DISP=SHR
//          DD   DSN=$$UID$$.$$$.SOURCE(TABLE06),DISP=SHR
//INPUT2    DD   DSN=$$UID$$.$$$.SOURCE(TRANFIL6),DISP=SHR
//SYSIN     DD   *
************************************************************************
* ABEND CODE:      ____                                                *
*                                                                      *
* ABEND LOCATION:  ABNDCOB+______ (IN ____- ROUTINE)                   *
*                                                                      *
* SOURCE LINE IS:                                                      *
*   ___  ____________________________________________________    ______*
*   ___      _____________________________________                     *
*                                                                      *
* ABEND CAUSED BY: ____________________________________                *
*                                                                      *
* DATA STRUCTURES: SUBSCRIPTED TABLE, INDEXED TABLE                    *
*                                                                      *
* DATA TYPES:      INDEX, PACKED DECIMAL, ZONED DECIMAL, BINARY        *
************************************************************************
./ ADD NAME=JOB0027  0106-93078-02149-0855-00057-00036-00000-BC0THOR
//BC0THOR7 JOB (1152002-9800039,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,
//   MSGCLASS=Y,NOTIFY=$$UID$$,REGION=4M
//JESOUT OUTPUT GROUPID=HDQTRSF2,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//*****************************************************************
//*         $$UID$$.$$$.SOURCE(JOB0027)                           *
//*     CREATE DUMP DATASET FOR ABEND-AID DUMP CLASS              *
//*****************************************************************
//*  1) REPLACE THE JOB AND OUTPUT STATEMENTS WITH YOUR OWN.      *
//*  2) USE THE EDITMAC MACRO OR:                                 *
//*     A) CHANGE ALL '$$UID$$' TO YOUR TSO USERID.               *
//*     B) CHANGE ALL $$$.TEXTLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS TEXT LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     C) CHANGE ALL $$$.LOADLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS LOAD LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     D) CHANGE ALL $$$.SOURCE TO THE DSNAME YOU CHOSE FOR THIS *
//*        LIBRARY ('$$UID$$' WILL BE THE HIGH-LEVEL NODE.).      *
//*     E) CHECK ALL JCL FOR YOUR SHOP'S STANDARDS. FOR EXAMPLE,  *
//*        UNIT=DISK IS USED FOR ALL DASD ALLOCATIONS, IGYCRCTL IS*
//*        THE COBOL COMPILER PROGRAM, ASMA90 IS THE ASSEMBLER,   *
//*        IEWL IS THE LINK-EDITOR (BINDER). OTHER STANDARD       *
//*        UTILITIES USED INCLUDE IDCAMS AND IEFBR14.             *
//*****************************************************************
//ABEND007  EXEC PGM=ABNDCOB,PARM='4A8M2G'
//STEPLIB   DD   DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSDBOUT  DD   SYSOUT=*
//SYSUDUMP  DD   SYSOUT=*
//ABNLWIDE  DD   DUMMY
//PRINT1    DD   SYSOUT=*,BLKSIZE=133
//READER1   DD   DSN=$$UID$$.$$$.SOURCE(TABLE),DISP=SHR
//          DD   DSN=$$UID$$.$$$.SOURCE(TABLE07),DISP=SHR
//INPUT2    DD   DSN=$$UID$$.$$$.SOURCE(TRANFIL7),DISP=SHR
//SYSIN     DD   *
************************************************************************
* ABEND CODE:      ____                                                *
*                                                                      *
* ABEND LOCATION:  SYSDATE+______                                      *
*                                                                      *
* SOURCE LINE IS:                                                      *
*    __  ________________________________________________        ______*
*    __      ________________________________-                         *
*                                                                      *
* SYSDATE CALLED:  ABNDCOB+______ (IN ____- ROUTINE)                   *
*                                                                      *
* SOURCE LINE IS:                                                      *
*   ___  ________________________________________________        ______*
*             __________________________________________               *
*             _______________________________                          *
*                                                                      *
* ABEND CAUSED BY: _________________________________________________   *
*                                                                      *
* DATA STRUCTURES: SUBSCRIPTED TABLE.                                  *
*                                                                      *
* DATA TYPES:      PACKED DECIMAL.                                     *
************************************************************************
./ ADD NAME=JOB0028  0108-93078-02149-0900-00053-00032-00000-BC0THOR
//BC0THOR8 JOB (1152002-9800039,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,
//   MSGCLASS=Y,NOTIFY=$$UID$$,REGION=4M
//JESOUT OUTPUT GROUPID=HDQTRSF2,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//*****************************************************************
//*         $$UID$$.$$$.SOURCE(JOB0028)                           *
//*     CREATE DUMP DATASET FOR ABEND-AID DUMP CLASS              *
//*****************************************************************
//*  1) REPLACE THE JOB AND OUTPUT STATEMENTS WITH YOUR OWN.      *
//*  2) USE THE EDITMAC MACRO OR:                                 *
//*     A) CHANGE ALL '$$UID$$' TO YOUR TSO USERID.               *
//*     B) CHANGE ALL $$$.TEXTLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS TEXT LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     C) CHANGE ALL $$$.LOADLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS LOAD LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     D) CHANGE ALL $$$.SOURCE TO THE DSNAME YOU CHOSE FOR THIS *
//*        LIBRARY ('$$UID$$' WILL BE THE HIGH-LEVEL NODE.).      *
//*     E) CHECK ALL JCL FOR YOUR SHOP'S STANDARDS. FOR EXAMPLE,  *
//*        UNIT=DISK IS USED FOR ALL DASD ALLOCATIONS, IGYCRCTL IS*
//*        THE COBOL COMPILER PROGRAM, ASMA90 IS THE ASSEMBLER,   *
//*        IEWL IS THE LINK-EDITOR (BINDER). OTHER STANDARD       *
//*        UTILITIES USED INCLUDE IDCAMS AND IEFBR14.             *
//*****************************************************************
//ABEND008  EXEC PGM=ABNDCOB,PARM='Q54P0Q'
//STEPLIB   DD   DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSDBOUT  DD   SYSOUT=*
//SYSUDUMP  DD   SYSOUT=*
//SYSOUT    DD   SYSOUT=*
//ABNLWIDE  DD   DUMMY
//PRINT1    DD   SYSOUT=*,BLKSIZE=133
//READER1   DD   DSN=$$UID$$.$$$.SOURCE(TABLE),DISP=SHR
//          DD   DSN=$$UID$$.$$$.SOURCE(TABLE08),DISP=SHR
//INPUT2    DD   DSN=$$UID$$.$$$.SOURCE(TRANFIL8),DISP=SHR
//SYSIN     DD   *
************************************************************************
* ABEND CODE:      ____                                                *
*                                                                      *
* ABEND LOCATION:  ABNDCOB+______ (IN ____- ROUTINE)                   *
*                                                                      *
* SOURCE LINE IS:                                                      *
*   ___  ______________________________________________          ______*
*   ___  _______________________________________________               *
*   ___  ____________________________                                  *
*                                                                      *
* ABEND CAUSED BY: __________________________________________________  *
*                  ____________________________                        *
*                                                                      *
* DATA STRUCTURES: SUBSCRIPTED TABLE, INDEXED TABLE                    *
*                                                                      *
* DATA TYPES:      INDEX, ZONED DECIMAL, BINARY                        *
************************************************************************
./ ADD NAME=JOB0029  0107-93078-02149-0901-00050-00029-00000-BC0THOR
//BC0THOR9 JOB (1152002-9800039,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,
//   MSGCLASS=Y,NOTIFY=$$UID$$,REGION=4M
//JESOUT OUTPUT GROUPID=HDQTRSF2,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//*****************************************************************
//*         $$UID$$.$$$.SOURCE(JOB0029)                           *
//*     CREATE DUMP DATASET FOR ABEND-AID DUMP CLASS              *
//*****************************************************************
//*  1) REPLACE THE JOB AND OUTPUT STATEMENTS WITH YOUR OWN.      *
//*  2) USE THE EDITMAC MACRO OR:                                 *
//*     A) CHANGE ALL '$$UID$$' TO YOUR TSO USERID.               *
//*     B) CHANGE ALL $$$.TEXTLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS TEXT LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     C) CHANGE ALL $$$.LOADLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS LOAD LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     D) CHANGE ALL $$$.SOURCE TO THE DSNAME YOU CHOSE FOR THIS *
//*        LIBRARY ('$$UID$$' WILL BE THE HIGH-LEVEL NODE.).      *
//*     E) CHECK ALL JCL FOR YOUR SHOP'S STANDARDS. FOR EXAMPLE,  *
//*        UNIT=DISK IS USED FOR ALL DASD ALLOCATIONS, IGYCRCTL IS*
//*        THE COBOL COMPILER PROGRAM, ASMA90 IS THE ASSEMBLER,   *
//*        IEWL IS THE LINK-EDITOR (BINDER). OTHER STANDARD       *
//*        UTILITIES USED INCLUDE IDCAMS AND IEFBR14.             *
//*****************************************************************
//ABEND009  EXEC PGM=ABNDCOB,PARM='8V7B6976B'
//STEPLIB   DD   DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSDBOUT  DD   SYSOUT=*
//SYSUDUMP  DD   SYSOUT=*
//ABNLWIDE  DD   DUMMY
//PRINT1    DD   SYSOUT=*,BLKSIZE=133
//READER1   DD   DSN=$$UID$$.$$$.SOURCE(TABLE),DISP=SHR
//          DD   DSN=$$UID$$.$$$.SOURCE(TABLE09),DISP=SHR
//INPUT2    DD   DSN=$$UID$$.$$$.SOURCE(TRANFIL9),DISP=SHR
//SYSIN     DD   *
************************************************************************
* ABEND CODE:      ____                                                *
*                                                                      *
* ABEND LOCATION:  ABNDCOB+______ (IN ____- ROUTINE)                   *
*                                                                      *
* SOURCE LINE IS:                                                      *
*   ___  __________________________________________________      ______*
*   ___      ___________________________________                       *
*                                                                      *
* ABEND CAUSED BY: _______________________________________________     *
*                                                                      *
* DATA STRUCTURES: SUBSCRIPTED TABLE, INDEXED TABLE                    *
*                                                                      *
* DATA TYPES:      INDEX, PACKED DECIMAL.                              *
************************************************************************
./ ADD NAME=JOB003   0107-93078-02149-0947-00101-00071-00000-BC0THOR
//BC0THORS JOB (1152002-9800039,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,
//   MSGCLASS=Y,NOTIFY=$$UID$$,REGION=4M
//JESOUT OUTPUT GROUPID=HDQTRSF2,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//********************************************************************
//*         $$UID$$.$$$.SOURCE(JOB004)                               *
//* COPIES JCL, JOBLOG, SYSUDUMP, AND OTHER JOB OUTPUT TO THE        *
//* $$UID$$.TST.PRNTDUMP LIBRARY AS A RECFM=FBA,LRECL=133 FILE. ANY  *
//* PRINT CARRIAGE CONTROL ON INPUT IS CONVERTED TO ASA CODES IF     *
//* NECESSARY. IF NO CONTROL CHARACTERS ARE PRESENT ON INPUT, A BLANK*
//* IS SET IN THE FIRST POSITION OF THE OUTPUT RECORD FOR SINGLE     *
//* SPACED PRINTOUT. BEFORE EXECUTING THIS JCL, THE JOB TO BE COPIED *
//* MUST BE EXECUTED IN BATCH, AND THE JOB OUTPUT SAVED TO A DATASET *
//* CALLED A.OUTLIST BY USE OF THE OUTPUT TSO COMMAND:               *
//*           OUTPUT $$UID$$7W PRINT(A)                              *
//* BE SURE TO SET THE MEMBER NAME IN THE OUTPUT1 DD STATEMENT BELOW *
//* BEFORE EXECUTING THIS JOB.                                       *
//*****************************************************************
//*  1) REPLACE THE JOB AND OUTPUT STATEMENTS WITH YOUR OWN.      *
//*  2) USE THE EDITMAC MACRO OR:                                 *
//*     A) CHANGE ALL '$$UID$$' TO YOUR TSO USERID.               *
//*     B) CHANGE ALL $$$.TEXTLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS TEXT LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     C) CHANGE ALL $$$.LOADLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS LOAD LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     D) CHANGE ALL $$$.SOURCE TO THE DSNAME YOU CHOSE FOR THIS *
//*        LIBRARY ('$$UID$$' WILL BE THE HIGH-LEVEL NODE.).      *
//*     E) CHECK ALL JCL FOR YOUR SHOP'S STANDARDS. FOR EXAMPLE,  *
//*        UNIT=DISK IS USED FOR ALL DASD ALLOCATIONS, IGYCRCTL IS*
//*        THE COBOL COMPILER PROGRAM, ASMA90 IS THE ASSEMBLER,   *
//*        IEWL IS THE LINK-EDITOR (BINDER). OTHER STANDARD       *
//*        UTILITIES USED INCLUDE IDCAMS AND IEFBR14.             *
//********************************************************************
//*
//COPYDMP1 EXEC PGM=COPYDUMP
//STEPLIB DD DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSUDUMP DD SYSOUT=*
//INPUT1   DD DSN=$$UID$$.$$UID$$1.OUTLIST,DISP=OLD,RECFM=FBA
//OUTPUT1  DD DSN=$$UID$$.$$$.TEXTLIB(DUMP01),DISP=SHR
//*
//COPYDMP2 EXEC PGM=COPYDUMP
//STEPLIB DD DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSUDUMP DD SYSOUT=*
//INPUT1   DD DSN=$$UID$$.$$UID$$2.OUTLIST,DISP=OLD,RECFM=FBA
//OUTPUT1  DD DSN=$$UID$$.$$$.TEXTLIB(DUMP02),DISP=SHR
//*
//COPYDMP3 EXEC PGM=COPYDUMP
//STEPLIB DD DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSUDUMP DD SYSOUT=*
//INPUT1   DD DSN=$$UID$$.$$UID$$3.OUTLIST,DISP=OLD,RECFM=FBA
//OUTPUT1  DD DSN=$$UID$$.$$$.TEXTLIB(DUMP03),DISP=SHR
//*
//COPYDMP4 EXEC PGM=COPYDUMP
//STEPLIB DD DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSUDUMP DD SYSOUT=*
//INPUT1   DD DSN=$$UID$$.$$UID$$4.OUTLIST,DISP=OLD,RECFM=FBA
//OUTPUT1  DD DSN=$$UID$$.$$$.TEXTLIB(DUMP04),DISP=SHR
//*
//COPYDMP5 EXEC PGM=COPYDUMP
//STEPLIB DD DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSUDUMP DD SYSOUT=*
//INPUT1   DD DSN=$$UID$$.$$UID$$5.OUTLIST,DISP=OLD,RECFM=FBA
//OUTPUT1  DD DSN=$$UID$$.$$$.TEXTLIB(DUMP05),DISP=SHR
//*
//COPYDMP6 EXEC PGM=COPYDUMP
//STEPLIB DD DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSUDUMP DD SYSOUT=*
//INPUT1   DD DSN=$$UID$$.$$UID$$6.OUTLIST,DISP=OLD,RECFM=FBA
//OUTPUT1  DD DSN=$$UID$$.$$$.TEXTLIB(DUMP06),DISP=SHR
//*
//COPYDMP7 EXEC PGM=COPYDUMP
//STEPLIB DD DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSUDUMP DD SYSOUT=*
//INPUT1   DD DSN=$$UID$$.$$UID$$7.OUTLIST,DISP=OLD,RECFM=FBA
//OUTPUT1  DD DSN=$$UID$$.$$$.TEXTLIB(DUMP07),DISP=SHR
//*
//COPYDMP8 EXEC PGM=COPYDUMP
//STEPLIB DD DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSUDUMP DD SYSOUT=*
//INPUT1   DD DSN=$$UID$$.$$UID$$8.OUTLIST,DISP=OLD,RECFM=FBA
//OUTPUT1  DD DSN=$$UID$$.$$$.TEXTLIB(DUMP08),DISP=SHR
//*
//COPYDMP9 EXEC PGM=COPYDUMP
//STEPLIB DD DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSUDUMP DD SYSOUT=*
//INPUT1   DD DSN=$$UID$$.$$UID$$9.OUTLIST,DISP=OLD,RECFM=FBA
//OUTPUT1  DD DSN=$$UID$$.$$$.TEXTLIB(DUMP09),DISP=SHR
//*
//COPYDMPA EXEC PGM=COPYDUMP
//STEPLIB DD DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSUDUMP DD SYSOUT=*
//INPUT1   DD DSN=$$UID$$.$$UID$$A.OUTLIST,DISP=OLD,RECFM=FBA
//OUTPUT1  DD DSN=$$UID$$.$$$.TEXTLIB(DUMP10),DISP=SHR
//*
//COPYDMPB EXEC PGM=COPYDUMP
//STEPLIB DD DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSUDUMP DD SYSOUT=*
//INPUT1   DD DSN=$$UID$$.$$UID$$B.OUTLIST,DISP=OLD,RECFM=FBA
//OUTPUT1  DD DSN=$$UID$$.$$$.TEXTLIB(DUMP11),DISP=SHR
./ ADD NAME=JOB004   0110-93162-02149-1000-00052-00026-00000-BC0THOR
//BC0THORV JOB (0000000-999CCEX,,HNEX01-XR-XXXX),RTHORNTON,CLASS=V,
//   NOTIFY=$$UID$$,MSGCLASS=Y
//JESOUT OUTPUT GROUPID=HDQTRSF2,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//*****************************************************************
//*         $$UID$$.$$$.SOURCE(JOB004)                            *
//*     PRINT THE COMPILE/ASSEMBLY/LINKEDIT LISTINGS AND DUMPS    *
//*****************************************************************
//*  1) REPLACE THE JOB AND OUTPUT STATEMENTS WITH YOUR OWN.      *
//*  2) USE THE EDITMAC MACRO OR:                                 *
//*     A) CHANGE ALL '$$UID$$' TO YOUR TSO USERID.               *
//*     B) CHANGE ALL $$$.TEXTLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS TEXT LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     C) CHANGE ALL $$$.LOADLIB TO THE DSNAME YOU WANT FOR YOUR *
//*        CLASS LOAD LIBRARY. ('$$UID$$' WILL BE THE HIGH-LEVEL  *
//*        NODE).                                                 *
//*     D) CHANGE ALL $$$.SOURCE TO THE DSNAME YOU CHOSE FOR THIS *
//*        LIBRARY ('$$UID$$' WILL BE THE HIGH-LEVEL NODE.).      *
//*     E) CHECK ALL JCL FOR YOUR SHOP'S STANDARDS. FOR EXAMPLE,  *
//*        UNIT=DISK IS USED FOR ALL DASD ALLOCATIONS, IGYCRCTL IS*
//*        THE COBOL COMPILER PROGRAM, ASMA90 IS THE ASSEMBLER,   *
//*        IEWL IS THE LINK-EDITOR (BINDER). OTHER STANDARD       *
//*        UTILITIES USED INCLUDE IDCAMS AND IEFBR14.             *
//*****************************************************************
//COPYNUM  EXEC PGM=COPYNUM
//STEPLIB   DD   DSN=$$UID$$.$$$.LOADLIB,DISP=SHR
//SYSUDUMP DD SYSOUT=*
//OUTPUT1  DD SYSOUT=*,RECFM=FBA,LRECL=151
//INPUT1   DD DSN=$$UID$$.$$$.TEXTLIB(TEXTBOOK),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(CARD12),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(CARD34),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(CARD56),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(CARD78),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(ABNDCOB),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(COBABEND),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(SYSDATE),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(PROCNUM),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(CVTDATE),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(SYSADD),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(SYSAD2),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(DUMP01),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(DUMP02),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(DUMP03),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(DUMP04),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(DUMP05),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(DUMP06),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(DUMP07),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(DUMP08),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(DUMP09),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(DUMP10),DISP=SHR
//         DD DSN=$$UID$$.$$$.TEXTLIB(DUMP11),DISP=SHR
./ ADD NAME=PROCNUM  0101-91352-93076-0939-00046-00046-00000-USER02
000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID. PROCNUM.
000300*REMARKS. TWO PARAMETERS ARE PASSED INTO THIS ROUTINE, THE FIRST
000400*         IS AN ARRAY OF CHARACTERS, AND THE SECOND IS A NUMERIC
000500*         VALUE USED AS A SUBSCRIPT TO POINT TO A SPECIFIC BYTE
000600*         IN THE CHARACTER ARRAY. THIS SUBROUTINE MOVES A RANDOM
000700*         BYTE FROM A TABLE OF SPECIAL CHARACTERS TO THE SPECIFIC
000800*         BYTE IDENTIFIED IN THE CHARACTER ARRAY, THEN RETURNS TO
000900*         THE CALLER.
001000*         THE CHARACTER ARRAY MUST BE 500 BYTES OR LESS, AND THE
001100*         SUBSCRIPT FIELD IS A 2-BYTE BINARY FIELD CONTAINING A
001200*         NUMBER REPRESENTING A BYTE WITHIN THE CHARACTER ARRAY.
001600 DATE-WRITTEN. DEC 1991.
001700 DATE-COMPILED.
001800 ENVIRONMENT DIVISION.
001900 CONFIGURATION SECTION.
002000 INPUT-OUTPUT SECTION.
002100 FILE-CONTROL.
002200 DATA DIVISION.
002300 WORKING-STORAGE SECTION.
002610 01  WORKING-STORAGE-DATA-AREAS.
002611     05  FILLER                        PIC X(36)
002612                 VALUE 'PROCNUM WORKING STORAGE STARTS HERE'.
002613     05  M                             PIC S9(4) COMP.
002620     05  SPECIAL-CHARACTER-TABLE       PIC X(21) VALUE
002630                                       '.<(+|!$*);¬,%_>?:#@="'.
002640     05  SPECIAL-CHARACTER REDEFINES SPECIAL-CHARACTER-TABLE
002650                                       PIC X OCCURS 21 TIMES.
002660     05  TIME-FIELD                    PIC S9(8).
002670     05  QUOTIENT                      PIC S9(7) COMP-3.
002700*
002800*
002900*
003000 LINKAGE SECTION.
003100 01  CHARACTER-ARRAY.
003200     05 SPECIFIC-CHARACTER             PIC X OCCURS 500 TIMES.
003300 01  CHARACTER-POINTER                 PIC S9(4) COMP.
003600*
003700*
003800*
003900 PROCEDURE DIVISION USING CHARACTER-ARRAY, CHARACTER-POINTER.
003910     ACCEPT TIME-FIELD FROM TIME
003920         DIVIDE 22 INTO TIME-FIELD GIVING QUOTIENT REMAINDER M.
003930     MOVE SPECIAL-CHARACTER (M) TO
003940         SPECIFIC-CHARACTER (CHARACTER-POINTER).
005200     GOBACK.
./ ADD NAME=SQUEZE80 0100-02144-02144-1128-00216-00216-00000-BC0THOR
         TITLE '***** SQUEZE80: COPY LONG RECS TO 80-BYTE FILE *****'
         PRINT NOGEN
SQUEZE80 CSECT
SQUEZE80 RMODE 24
SQUEZE80 AMODE 24
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*   THIS PROGRAM COPIES AN INPUT FILE TO AN OUTPUT FILE CONTAINING    *
* FIXED LENGTH 80-BYTE LOGICAL RECORDS. INPUT RECORDS ARE MODIFIED TO *
* FIT THE 80-BYTE OUTPUT RECORD BY USE OF A PSEUDO VBS CONCEPT IN     *
* WHICH INPUT RECORDS ARE BROKEN INTO PARTS OF LESS THAN 78 BYTES     *
* EACH, WHICH ARE PRECEDED BY A TWO BYTE PART DESCRIPTOR. THE FIRST   *
* BYTE OF THE PART DESCRIPTOR IS THE LENGTH OF THE PART. THE SECOND   *
* DESCRIPTOR BYTE SPECIFIES WHETHER THIS PART IS THE FIRST, LAST, OR  *
* AN INTERMEDIATE PART OF A LOGICAL RECORD. THE INPUT FILE MUST HAVE  *
* DSORG=PS, DSORG=DA, OR DSORG=PO SO THAT IT CAN BE READ SEQUENTIALLY *
* USING QSAM. INPUT RECORDS MAY BE FIXED, VARIABLE, UNDEFINED, OR     *
* VARIABLE SPANNED.                                                   *
*                                                                     *
* THE FIRST RECORD IN THE OUTPUT FILE CONTAINS INFORMATION FROM THE   *
* DCB FOR THE INPUT FILE, INCLUDING THE DSORG, RECFM, AND LRECL. THIS *
* IS USED BY THE UNSQUZ80 PROGRAM IN RECONSTRUCTING THE FILE. WHEN    *
* FEWER THAN 3 BYTES REMAIN IN AN 80-BYTE OUTPUT RECORD, NO ADDITIONAL*
* DATA WILL FIT. IN THIS CASE, AND FOR THE LAST 80-BYTE RECORD IN THE *
* FILE, A PART DESCRIPTOR OF ALL HEX ZEROS INDICATES THERE IS NO MORE *
* DATA IN THIS 80-BYTE RECORD.                                        *
*                                                                     *
*    THIS PROGRAM IS INTENDED PRIMARILY FOR THE CREATION OF CLASSROOM *
* HANDOUTS FOR A DUMP CLASS, WHERE COMPILE LISTINGS, ASSEMBLY LISTINGS*
* JCL, AND DUMP LISTINGS ARE WRITTEN AS MEMBERS OF A STANDARD PDS WITH*
* RECFM=FB,LRECL=80. THE UNSQUZ80 PROGRAM MUST BE USED TO PRINT THESE *
* MEMBERS.                                                            *
* AUTHOR R THORNTON    MAY 1986                                       *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*********************************************************************
*        SAVE REGISTERS, SET UP BASE REGS, CHAIN SAVE AREAS         *
*********************************************************************
         USING SQUEZE80,R3,R4
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  SET UP BASE FIRST BASE REG
         LA    R4,4095(R3)             SET UP SECOND
         LA    R4,1(R4)                    BASE REGISTER
         LA    R15,MYSAVE              POINT TO MY REGISTER SAVE AREA
         ST    R15,8(R13)              SET LSA IN CALLER'S SAVE
         ST    R13,4(R15)              SET HSA IN MY SAVE AREA
         LR    R13,R15                 SET UP SAVE AREA POINTER
         B     START                   BRANCH AROUND CONSTANTS
         DC    CL8'SQUEZE80'           PROGRAM NAME IDENTIFIER
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL8'&SYSTIME'           ASSEMBLY TIME
MYSAVE   DS    18F                     MY REGISTER SAVE AREA
START    OPEN  (OUTPUT1,OUTPUT,INPUT1)
         TM    INRECFM,INUNDEF   TEST RECFM
         BZ    BADFORM           RECFM=? NOT ACCEPTABLE
         TM    INRECFM,INFIX     TEST RECFM
         BO    TESTORGN          RECFM=F.. IS O.K.
         TM    INRECFM,INSPAN    RECFM=V, TEST RECFM
         BZ    TESTORGN          NOT SPANNED, CONTINUE
         CLOSE INPUT1            CLOSE NORMAL DEFINITION
         GETMAIN R,LV=32768      GET AREA FOR RECORD ASSEMBLY
         ST    R1,VBSADR         SAVE THE ADDRESS
         MVC   INPUT1(VBSEND-VBSDCB),VBSDCB REPLACE WITH MACRF=GD
         OPEN  INPUT1            OPEN VBS DCB WITH MACRF=GD
         B     TESTORGN
BADFORM  WTO   'ILLEGAL RECFM, USE F, V, OR U ONLY FOR INPUT1',        X
               ROUTCDE=11
         ABEND 111,DUMP
TESTORGN TM    INDSORG,INPS      TEST LRECL
         BO    FRSTRECD          DSORG=PS IS O.K.
         TM    INDSORG,INDA      TEST LRECL
         BO    FRSTRECD          DSORG=DA IS O.K.
         TM    INDSORG,INPO      TEST LRECL
         BO    FRSTRECD          DSORG=PO IS O.K.
         WTO   'ILLEGAL DSORG, USE PS, DA, OR PO ONLY FOR INPUT1',     X
               ROUTCDE=11
         ABEND 222,DUMP
FRSTRECD MVC   OUTREC(1),INDSORG DSORG TO OUTPUT
         MVC   OUTREC+1(1),INRECFM RECFM TO OUTPUT
         MVC   OUTREC+2(2),INLRECL LRECL TO OUTPUT
         PUT   OUTPUT1,OUTREC    WRITE FIRST RECORD
         XC    OUTREC,OUTREC     CLEAR THE RECORD AREA
         LA    R6,OUTREC         POINT TO OUTPUT RECORD
         USING OUTDESC,R6
*
*
*
MAINLINE BAL   R9,GETINP         READ NEXT INPUT RECORD
         OI    PARTYPE,FRSTPART  SET FIRST PART FLAG
CKFIT    CLC   INLEFT,OTLEFT     INPUT WILL FIT IN OUTPUT?
         BH    TOOLONG           NO
         OI    PARTYPE,LASTPART  INDICATE LAST PART OF RECORD
         LH    R1,INLEFT         GET PART LENGTH
         BAL   R9,WRITPART       MOVE PART TO OUTPUT AREA
         B     MAINLINE          GO TO NEXT INPUT RECORD
TOOLONG  LH    R1,OTLEFT         GET PART LENGTH
         BAL   R9,WRITPART       MOVE PART TO OUTPUT AREA
         B     CKFIT             CONTINUE
*
*        MOVE PART OF INPUT RECORD TO OUTPUT AREA, WRITE IF FULL
*
WRITPART STC   R1,PARTLEN        PUT PART LENGTH IN OUTPUT PD
         BCTR  R1,0              COMPUTE MVC LENGTH CODE
         EX    R1,PARTMOVE       MOVE DATA TO OUTPUT RECORD
         LA    R1,1(R1)          REAL LENGTH AGAIN
         LH    R2,INLEFT         DEDUCT BYTES
         SR    R2,R1                MOVED FROM
         STH   R2,INLEFT              INPUT TO OUTPUT
         LH    R2,OTLEFT         DEDUCT BYTES
         SR    R2,R1                MOVED FROM
         SH    R2,H2                  INPUT TO OUTPUT PLUS
         STH   R2,OTLEFT                NEXT DESCRIPTOR LENGTH
         AR    R7,R1             POINT TO NEXT INPUT BYTE
         LA    R6,2(R1,R6)       POINT TO NEXT OUTPUT BYTE
         CH    R2,H3             AT LEAST 3 BYTES LEFT?
         BNL   WRITXIT           YES
         PUT   OUTPUT1,OUTREC    WRITE THE RECORD
         XC    OUTREC,OUTREC     CLEAR THE RECORD
         LA    R6,OUTREC         POINT TO OUTPUT RECORD
         MVC   OTLEFT,H78        SET OUTPUT REC BYTES LEFT
WRITXIT  BR    R9                EXIT
PARTMOVE MVC   PARTDATA(1),0(R7) EXECUTED MOVE
*
*        GET NEXT INPUT RECORD
*
GETINP   TM    INRECFM,INVRBL+INSPAN VARIABLE SPANNED RECORDS?
         BO    INVSPND           YES
         GET   INPUT1            READ NEXT INPUT RECORD
         LR    R7,R1             POINT TO INPUT RECORD
         TM    INRECFM,INVRBL    VARIABLE RECORDS?
         BO    INVBL             YES
         MVC   INLEFT,INLRECL    SET NBR BYTES LEFT
         BR    R9                EXIT
INVBL    LH    R1,0(R7)          GET DATA+RDW LENGTH FROM RDW
         SH    R1,H4             COMPUTE DATA LENGTH
         STH   R1,INLEFT         SET INPUT BYTES LEFT
         LA    R7,4(R7)          POINT PAST THE RDW TO FIRST DATA BYTE
         BR    R9                EXIT
INVSPND  L     R7,VBSADR         POINT TO RECORD ASSEMBLY AREA
         GET   INPUT1,0(R7)      READ NEXT INPUT RECORD
         MVC   INLEFT,INLRECL    SET NBR BYTES LEFT
         BR    R9                RETURN
*
*        END OF JOB
*
EOJ      CLC   OTLEFT,H78        ANYTHING IN LAST OUTPUT RECORD?
         BE    EOJ1              NO
         PUT   OUTPUT1,OUTREC    YES, WRITE IT
EOJ1     CLOSE (OUTPUT1,,INPUT1)   CLOSE FILES
         L     R13,4(R13)        POINT TO CALLER'S SAVE
         LM    R14,R12,12(R13)   RESTORE CALLER'S REGS
         SR    R15,R15           CLEAR RETURN CODE
         BR    R14               RETURN TO CALLER
*
*
*
VBSADR   DC    A(0)               GOTTEN STORAGE FOR VBS MACRF=GD
INLEFT   DC    H'0'               INPUT RECORD BYTES LEFT
OTLEFT   DC    H'78'              OUTPUT RECORD BYTES LEFT
H2       DC    H'2'               CONSTANT 2
H3       DC    H'3'               CONSTANT 3
H4       DC    H'4'               CONSTANT 4
H78      DC    H'78'              CONSTANT 78
H156     DC    H'156'             CONSTANT 156
OUTREC   DC    XL80'00'           OUTPUT RECORD
*
*
*
OUTPUT1  DCB   DSORG=PS,MACRF=PM,DDNAME=OUTPUT1,                       X
               RECFM=FB,LRECL=80
INPUT1   DCB   DSORG=PS,MACRF=GL,DDNAME=INPUT1,EODAD=EOJ
INDSORG  EQU   INPUT1+26          DSORG
INPS     EQU   X'40'              PHYSICAL SEQUENTIAL
INDA     EQU   X'20'              DIRECT ACCESS
INPO     EQU   X'02'              PARTITIONED
INRECFM  EQU   INPUT1+36          RECFM
INUNDEF  EQU   X'C0'              UNDEFINED
INFIX    EQU   X'80'              FIXED
INVRBL   EQU   X'40'              VARIABLE
INSPAN   EQU   X'08'              SPANNED (IF VARIABLE)
INLRECL  EQU   INPUT1+82
VBSDCB   DCB   DSORG=PS,MACRF=GD,DDNAME=INPUT1,EODAD=EOJ
VBSEND   EQU   *
         LTORG
*
*        OUTPUT PART DESCRIPTOR DSECT
*
OUTDESC  DSECT ,                 OUTPUT PART DESCRIPTION
PARTDESC DS    0XL2              PART DESCRIPTOR
PARTLEN  DS    XL1               PART DATA LENGTH (NOT INCL DESC)
PARTYPE  DS    XL1               PART TYPE FLAGS
FRSTPART EQU   X'80'             FIRST PART OF A RECORD
LASTPART EQU   X'01'             LAST PART OF A RECORD
PARTDATA DS    0X                PART DATA, 1-78 BYTES
SQUEZE80 CSECT
*********************************************************************
*                REGISTER EQUATES                                   *
*********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
./ ADD NAME=SQUEZJOB 0100-02144-02144-1130-00023-00023-00000-BC0THOR
//BC0THORD JOB (1152002-9800039,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,
//   MSGCLASS=Y,NOTIFY=BC0THOR,REGION=104M
//JESOUT OUTPUT GROUPID=02A,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//*******************************************************************
//*                 BC0THOR.PDS.JCL(SQUEZE80)                       *
//* SQUEEZE A DATASET INTO RECFM=FB,LRECL=80 FORMAT FOR STORAGE.    *
//* USE PROGRAM UNSQUZ80 TO RESTORE IT TO ORIGINAL FORM.            *
//*******************************************************************
//*
//SCRATCH  EXEC PGM=IDCAMS
//SYSPRINT DD SYSOUT=*
//SYSIN    DD *
 DELETE BC0THOR.DEL.SQUEEZED
//*
//*
//SQUEZE80 EXEC  PGM=SQUEZE80
//STEPLIB  DD    DSN=BC0THOR.LOAD.LOAD,DISP=SHR
//SYSUDUMP DD    SYSOUT=*
//INPUT1   DD    DSN=BC0THOR.TST.TEXTBOOK,DISP=SHR
//OUTPUT1  DD    DSN=BC0THOR.DEL.SQUEEZED,DISP=(,CATLG),
//         UNIT=DISK,SPACE=(TRK,(60,10),RLSE),
//         DSORG=PS,RECFM=FB,LRECL=80
./ ADD NAME=SYSADD   0100-02144-02144-0941-00046-00046-00000-BC0THOR
SYSADD   CSECT
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  INITIALIZE BASE REGISTER
         USING SYSADD,R3
         LA    R15,REGSAVE             POINT TO MY REGISTER SAVE AREA
         ST    R15,8(R13)              CHAIN FORWARD
         ST    R13,4(R15)              CHAIN BACKWARD
         LR    R13,R15                 SET UP SAVE AREA POINTER
         B     START                   GO BEGIN PROCESSING
REGSAVE  DS    18F                     REGISTER SAVE AREA
START    EQU   *
         L      R7,0(R1)               1ST PARM ADDR
         L      R8,4(R1)               2ND PARM ADDR
         CLC    0(3,R7),=X'404040'     BLANKS
         BE     CALLAD2                YES
         ZAP    0(3,R8),0(3,R7)        NO, COPY INCREMENT
         L      R1,16                  @ CVT
         LA     R1,57(R1)              @ CVTDATE
         AP     0(3,R8),0(3,R1)        ADD DATE TO INCREMENT
         B      RETURN                 GOBACK
CALLAD2  STM    R7,R8,PARMS            BUILD SYSAD2 PARM LIST
         LA     R1,PARMS               POINT TO PARAMETER LIST
         L      R15,=V(SYSAD2)         POINT TO ROUTINE'S E.P.
         BALR   R14,R15                LINK TO SYSAD2 TO PROCESS
RETURN   L      R13,4(R13)             POINT TO CALLER'S SAVE
         LM     R14,R12,12(R13)        RESTORE CALLER'S REGS
         SR     R15,R15                CLEAR RETURN CODE
         BR     R14                    RETURN TO CALLER
PARMS    DS     2F                     PARAMETERS FOR SYSAD2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
./ ADD NAME=SYSAD2   0100-02144-02144-0941-00038-00038-00000-BC0THOR
SYSAD2   CSECT
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  INITIALIZE BASE REGISTER
         USING SYSAD2,R3
         LA    R15,REGSAVE             POINT TO MY REGISTER SAVE AREA
         ST    R15,8(R13)              CHAIN FORWARD
         ST    R13,4(R15)              CHAIN BACKWARD
         LR    R13,R15                 SET UP SAVE AREA POINTER
         B     START                   GO BEGIN PROCESSING
REGSAVE  DS    18F                     REGISTER SAVE AREA
START    EQU   *
         L      R7,0(R1)               1ST PARM ADDR
         L      R8,4(R1)               2ND PARM ADDR
         L      R1,16                  @ CVT
         LA     R1,57(R1)              @ CVTDATE
         ZAP    0(3,R8),0(3,R7)        COPY INCREMENT
         AP     0(3,R8),0(3,R1)        ADD DATE
         L      R13,4(R13)             POINT TO CALLER'S SAVE
         LM     R14,R12,12(R13)        RESTORE CALLER'S REGS
         SR     R15,R15                CLEAR RETURN CODE
         BR     R14                    RETURN TO CALLER
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
./ ADD NAME=SYSDATE  0102-92002-93076-0938-00055-00052-00000-USER02
000010 IDENTIFICATION DIVISION.
000020 PROGRAM-ID. SYSDATE.
000030*REMARKS. THIS SUBROUTINE EXPECTS A TWO OR THREE PARAMETER LIST
000040*         ON ENTRY. THE FIRST PARAMETER IS THE REQUEST CODE, AND
000050*         MUST CONTAIN A SINGLE CHARACTER. WHEN REQUEST CODE IS
000060*         A "C", THE SYSTEM DATE IS OBTAINED FROM THE SUBROUTINE
000070*         CVTDATE, AND IS RETURNED TO THE CALLER IN THE SECOND
000080*         PARAMETER, AS A 3-BYTE PACKED DECIMAL FIELD CONTAINING
000090*         THE SYSTEM DATE IN JULIAN: YYDDD. WHEN REQUEST CODE IS
000100*         A "R", THE SECOND PARAMETER MUST BE A 3-BYTE, PACKED
000110*         DECIMAL FIELD CONTAINING A NUMBER TO BE ADDED TO THE
000120*         SYSTEM DATE. THE SYSTEM DATE IS OBTAINED FROM THE
000130*         CVTDATE SUBROUTINE. THE SUM OF THE SYSTEM DATE AND
000140*         THE NUMBER IN THE SECOND PARAMETER IS RETURNED IN THE
000150*         THIRD PARAMETER AS A 3-BYTE PACKED DECIMAL NUMBER.
000160 DATE-WRITTEN. AUG 1979.
000170 DATE-COMPILED.
000180 ENVIRONMENT DIVISION.
000190 CONFIGURATION SECTION.
000200 INPUT-OUTPUT SECTION.
000210 FILE-CONTROL.
000220 DATA DIVISION.
000230 WORKING-STORAGE SECTION.
000240 77  FILLER                            PIC X(36)
000250                 VALUE 'SYSDATE WORKING STORAGE STARTS HERE'.
000260 77  BLANKS                            PIC X(3) VALUE SPACES.
000261 77  CURR-DATE                         PIC 9(5) COMP-3.
000270*
000280*
000290*
000300 LINKAGE SECTION.
000310 01  REQUEST-CODE                      PIC X.
000320 01  INCREMENT                         PIC S9(5) COMP-3.
000330 01  INCREMENT-CHAR                    REDEFINES INCREMENT
000340                                       PIC X(3).
000350 01  DATE-RETURN                       PIC S9(5) COMP-3.
000360*
000370*
000380*
000390 PROCEDURE DIVISION USING REQUEST-CODE, INCREMENT, DATE-RETURN.
000400     IF REQUEST-CODE = 'C'
000410        CALL 'CVTDATE' USING INCREMENT
000420        GO TO END-OF-JOB.
000430     IF REQUEST-CODE = 'R'
000440        CALL 'CVTDATE' USING CURR-DATE
000441        COMPUTE DATE-RETURN =
000450            INCREMENT + CURR-DATE
000460        GO TO END-OF-JOB.
000470     DISPLAY 'INVALID REQUEST CODE RECEIVED BY SYSDATE'.
000471     CALL 'COBABEND'.
000480*
000490*
000500*
000510 END-OF-JOB.
000520     GOBACK.
./ ADD NAME=TABLE    0105-91351-91353-1044-00812-00812-00000-USER02
40000D3800CLAIMS                23209
40000D3900CLARK       DAN       23239
20000G010000458ST AGNES' SCHOOL                   RICHMOND       23200
40000D3901CLARK       SHELIA R  23248
40000D4101PENDLETON   JILL   H  23288
40000D3801PLAIN       DAN       23249
40000D4001TOMLIN      ANN       23254
40000D4201WINGFIELD   KATHY     23290
30000H000100088BASAVA DAY CLINIC                  RICHMOND       23226
20000G000100425RITE AID CORP                      RICHMOND       23200
20000G010100464MUTUAL ASSURANCE SOCIETY           RICHMOND       23200
10000911012G0012H0121D0395401620TONSILLECTOMY
10000911012G0020H0110D0410202100HEMORRHOIDECTOMY
10000911012G0031H0099D0395103050APPENDECTOMY
10000911013G0053H0077D0384207800HYSTERECTOMY
10000911013G0058H0072D0418308560LUNG REMOVAL
10000911013G0064H0066D0421100395SET BROKEN ARM
10000911013G0069H0061D0376207780HEART BYPASS
40000D4202LANGFORD    SALLY  E  23291
40000D4102MANDLEY     IDA       23299
40000D3802SPAIN       CHARLOTT  23240
40000D3902STARK       JOHN W C  23247
40000D4002ZIMMERMAN   LAURA     23265
20000G000200251QUALITY GARMENT COMPANY INC        FREDERICKSBURG 23200
30000H000200292CANCER CENTER OF VIRGINIA          FREDERICKSBURG 23201
20000G010200725E R NEFF EXCAVATING COMPANY        RICHMOND       23200
10000911022G0012H0121D0395200200SET BROKEN RIB
10000911023G0042H0088D0410108550MAMMECTOMY
40000D4203BINGHAM     DEBORAH   23292
40000D3903CLARK       DORIS  J  23246
40000D4003KAMMETER    BARBARA   23266
40000D4103RANDOLPH    REBECCAB  23290
40000D3803SWAIN       VIRGINIA  23241
30000H000300131CARY STREET MEDICAL CENTER         RICHMOND       23229
20000G0003004651607 INC                           RICHMOND       23200
20000G010300575HOPKINS PLUMBING & HEATING INC     RICHMOND       23200
40000D3904CLARK       MELISSA   23255
40000D4004CUMMINGS    MARK      23267
40000D4204KINGKARLA  K          23227
40000D4104SANDRAS     CRAIG  A  23299
40000D3804TRAINING    804354-2  23242
20000G000400176RUBICON INC                        NEWPORT NEWS   23603
30000H000400362CHARTER COLONIAL INSTITUTE         NEWPORT NEWS   23603
20000G010400749ILGWU                              RICHMOND       23200
40000D3905CLARK       C. TED    23254
40000D4005GAMMON      DONNA     23278
40000D4105HENDRICKS   ALLINE    23208
40000D4205TINGLE      ROBERTA   23203
40000D3805TRAINUM     NORMAN    23253
20000G000500458BARROW MANAGEMENT CORP             CHARLOTTESVILLE23200
20000G010500458DEL MAR SPORTSWEAR                 RICHMOND       23200
30000H000503134CHARTER HOSPITAL OF CHARLOTTESVILLECHARLOTTESVILLE23202
40000D3906CLARK       HELEN  L  23253
40000D3806GRAJEWSKI   HELEN  S  23254
40000D4006HAMMOND     PAT       23279
40000D4106HENDRICKS   FAITH     23207
40000D4206JUNGLES     GREG      23280
20000G010600121FED SPORTSWEAR COMPANY INC         RICHMOND       23200
30000H000600139CHARTER WESTBROOK HOSPITAL         RICHMOND       23227
20000G000600869VIRGINIA SOFTWARE INC              RICHMOND       23227
40000D3907CLARK       LISA   R  23262
40000D4007HAMMOND     DAVE      23270
40000D4107HENDRICK    OTHELIA   23206
40000D3807PEAKCYNTHIA 804354-4  23255
40000D4207SINGLETON   GAIL      23204
20000G010700169G & G UNIFORM                      RICHMOND       23200
20000G000700725RAPPAHANNOCK RAPIDAN COMM          RICHMOND       23220
30000H000701120CHILDREN'S HOSPITAL                RICHMOND       23220
40000D3908CLARKE      KAREN  E  23246
40000D4108DANDRIDGE   JOAN   L  23215
40000D4208KINGLINDA   804354-4  23205
40000D3808NOAKES      ELIZABET  23256
40000D4008SIMMONS     RUTH      23289
30000H000800152CHIPPENHAM MEDICAL CENTER          RICHMOND       23225
20000G000800703WILLIAMS AND SON HAULING           RICHMOND       23225
20000G010800947GARRETT MANUFACTURING              RICHMOND       23200
40000D3809BLAKEY      MILDREDJ  23267
40000D3909CLARKE      BENJAMIN  23261
40000D4109DANDRIDGE   ETHEL  C  23214
40000D4209LONGLISA    703985-5  23216
40000D4009SIMMONS     TANYA     23288
20000G000900058B & G GROCERY                      CUMBERLAND     23200
30000H000900105CUMBERLAND A HOSPITAL              CUMBERLAND     23204
20000G010900426HURLOCK SPORTSWEAR CO              RICHMOND       23200
40000D3910CLARKE      CHRISTIN  23261
40000D4210JINGLUSKI   EDWARD J  23217
40000D3810KLAKKAREN             23244
40000D4110LINDSEY     WALTER D  23213
40000D4010SIMMONS     JACQUELI  23291
40000D3810SKALSKY JR  JOSEPH P  23295
30000H001000243EATING DISORDERS CENTER OF VIRGINIANORFOLK        23205
20000G001000349VEGAS TIME ASSOCIATES INC          NORFOLK        23200
20000G011000583JODI SHIRT COMPANY INC             RICHMOND       23200
10000911101G0013H0120D0405100180SET BROKEN RIB
10000911101G0054H0076D0416309790HYSTERECTOMY
10000911101G0057H0073D0382408670LUNG REMOVAL
10000911101G0065H0065D0378100182SET BROKEN ARM
10000911101G0068H0062D0423305470HEART BYPASS
10000910105G0001H0130D0400101250TONSILLECTOMY
10000910105G0022H0108D0400103920HEMORRHOIDECTOMY
10000910105G0033H0097D0394202250APPENDECTOMY
10000910106G0001H0130D0400200130SET BROKEN RIB
10000910106G0018H0119D0394400260KIDNEY DIALYSIS
10000910106G0055H0075D0383207680HYSTERECTOMY
10000910106G0056H0074D0417309780LUNG REMOVAL
10000910106G0066H0064D0422200277SET BROKEN ARM
10000910106G0067H0063D0377207860HEART BYPASS
40000D3811BLAKLEY     GAIL      23268
40000D3911CLARKE      GAYLE  T  23272
40000D4211KINGROBIN   804354-7  23218
40000D4111LANDSHARON R804354-2  23222
40000D4011SIMMS       CONRAD    23292
30000H001100116FAIRBRIDGE RESIDENTIAL TREATMENT   ROCKVILLE      23206
20000G011100363LION BROTHERS COMPANY INC          RICHMOND       23200
20000G001100785GENERAL MOTORS CORP                ROCKVILLE      23200
10000910116G0044H0086D0411108450MAMMECTOMY
40000D4112BONDSHIRLEY 804354-7  23221
40000D3812NEALDIANE  L703985-3  23279
40000D4012SIMMS       JANET     23293
40000D3912STARKE      MARY      23273
40000D4212WINGROVE    JAMES     23229
30000H001200140THE HEART PAVILION                 RICHMOND       23229
20000G001200237HOLSTEIN HEATING AND A/C           RICHMOND       23229
20000G011200632MISTY HARBOR LTD                   RICHMOND       23200
10000911121G0019H0120D0405103170KIDNEY DIALYSIS
10000911122G0043H0087D0389107725MAMMECTOMY
40000D3813BEALES      JOANN  D  23235
40000D3913CLARKE      THERESAK  23274
40000D4113LANDSTEVE   804354-7  23222
40000D4213MANGRUM     CHANTELA  23220
40000D4013SIMMS       GWENDOLY  23204
20000G001300040MERCER RUG & CARPET SALES INC      RICHMOND       23200
30000H001300235HENRICO DOCTOR'S HOSPITAL          RICHMOND       23221
20000G011300717WESTMINISTER KNIT                  RICHMOND       23200
10000911131G0021H0109D0405103010HEMORRHOIDECTOMY
10000911131G0032H0098D0405302150APPENDECTOMY
40000D3914CLARKE      STEPHEN   23285
40000D4214HENGST      RICHARDC  23231
40000D4114MANDWILLA   804354-4  23233
40000D4014SIMON       YOLANDA   23205
40000D3814SWALLEN     JEFFREY   23270
20000G001400628AGECRAFT ASSOCIATION               RICHMOND       23294
30000H001400630HUMANA HOSPITAL - ST LUKE'S        RICHMOND       23294
20000G011400872COUNTY OF WESTMORELAND             RICHMOND       23200
40000D4115HANDY       CAROLYN   23234
40000D4215KINGTHERESA 804354-2  23232
40000D4015SIMON       DAVE      23206
40000D3815STALLINGS   KATHI     23281
40000D3915STARKE      BARBARA   23286
20000G011500270WALTON CONTRACTING                 RICHMOND       23200
30000H001500278JOHN RANDOLPH HOSPITAL             HOPEWELL       23207
20000G001500960GLYNN SOYARS AGENCY                HOPEWELL       23200
40000D3816CHALMERS    PEGGY  A  23282
40000D3916CLARKE-CAMPBELL       23287
40000D4016DEMOND      LUCINDAA  23217
40000D4216DUNHAM      JAMES  M  23233
40000D4116SANDY       WAYNE  G  23234
20000G011600182WHETZEL'S WHOLESALE, INCORPORATED  RICHMOND       23200
20000G001600249SURREY COUNTY SCHOOL BOARD         SURREY         23235
30000H001600425JOHNSTON-WILLIS HOSPITAL           RICHMOND       23235
40000D4217DUNHAM      SUSAN  P  23244
40000D4017EDMONDS     BOBBY  D  23218
40000D4117SANDY       KENNETH   23235
40000D3817STALOCH     LORI      23283
40000D3917STARKES     CORDELIA  23298
20000G001700282VIRGINIA COLLECTION CORPORATION    RICHMOND       23220
20000G011700492MANASSAS TRANSFER, INC             RICHMOND       23200
30000H001701168STUART CIRCLE HOSPITAL             RICHMOND       23220
40000D4218DANIELS     JERRY  A  23245
40000D4018EDMONDS     THALIA    23219
40000D4118HANDY       CAROLYNJ  23246
40000D3818STALOCH     LORI      23284
40000D3918STARKS      BONNIE    23265
30000H001800124MEDICAL COLLEGE OF VIRGINIA        RICHMOND       23228
20000G011800436TOWN OF COLONIAL BEACH, INC        RICHMOND       23200
20000G001800614HANOVER VETERINARIAN SERVICES      RICHMOND       23200
40000D4119BANDY       JAMES  E  23247
40000D4219DANIELS     REBECCAV  23246
40000D4019EDMONDS     P JANE    23220
40000D3819SEALRON     804261-1  23205
40000D3919STARKS      BEVERLY   23299
20000G001900632PORTSMOUTH ORTHOPAEDIC             PORTSMOUTH     23805
20000G011900805HERCULES COVINGTON HOURLY          RICHMOND       23200
30000H001903111POPLAR SPRINGS HOSPITAL            PETERSBURG     23805
40000D4220BENINGHOVE  DONNA  L  23257
40000D4020EDMONDS     DARRELL   23229
40000D4120HANDY       DEBORAHM  23258
40000D3920QUARLES     JAMES     23290
20000G012000455JOHN J WILSON ASSOCIATES, INC      RICHMOND       23200
20000G002000676RAYMOND C HAWKINS CONSTRUCTION     WILLIAMSBURG   23185
30000H002000713WILLIAMSBURG COMMUNITY HOSPITAL    WILLIAMSBURG   23185
40000D4021CAMPBELL    ANGELA    23273
40000D3821HEALTHKEEPERS         23296
40000D3921HOARMELISSA 804354-2  23209
40000D4121MCNEAR      LORRAINE  23259
40000D4221PINION      JEFFREY   23258
30000H002100220MEDICAL ACCESS CENTER              RICHMOND       23228
20000G002100270R & R PIPELINE CONSTRUCTION INC    RICHMOND       23200
20000G012100567FAUBER ARCHITECTS PL               RICHMOND       23200
10000910215G0002H0129D0399101550TONSILLECTOMY
10000910215G0023H0107D0399202830HEMORRHOIDECTOMY
10000910215G0034H0096D0406202350APPENDECTOMY
40000D4022CAMPBELL    CATHERIN  23228
40000D3822HEALTHKEEPERS         23297
40000D3922HEARN       GARY   L  23208
40000D4222KANIPE      MARY   T  23259
40000D4122LANEDENISE  804354-2  23250
20000G002200825STRATFORD SQUARE APARTMENTS        RICHMOND       23200
20000G012200884WISE HUNDLEY ELECTRIC CO           RICHMOND       23200
30000H002203156METRO EMERGENCY ROOM               RICHMOND       23227
10000910224G0045H0085D0388107700MAMMECTOMY
10000910225G0017H0118D0406104950KIDNEY DIALYSIS
10000910225G0055H0075D0383308565LUNG REMOVAL
10000910225G0056H0074D0417408570HYSTERECTOMY
10000910225G0066H0064D0422206350HEART BYPASS
10000910225G0067H0063D0376100364SET BROKEN ARM
40000D4023CAMPBELL    MILDREDJ  23237
40000D4223ENNIS       JOANN     23260
40000D3823HEALTHY VA. IN STAT   23208
40000D4123RENEE       TERRANCE  23222
40000D3923STARNS      RANDY  L  23215
30000H002300375METROPOLITAN CLINIC OF COUNSELING  RICHMOND       23220
20000G002300506VIRGINIA ELECTRICAL COMPONENTS     RICHMOND       23200
40000D4124BENEFITS              23253
40000D4024CAMPBELL    DONNA  L  23236
40000D4224DENITTO     CONSTANC  23265
40000D3824HEALTHY VA. OUT STA   23235
40000D3924SHARO       SANDY     23214
30000H002400257METROPOLITAN HOSPITAL              RICHMOND       23220
20000G002400566INTERGRAPH CORPORATION             RICHMOND       23220
40000D4125BENEFITS    EMPLOYEE  23269
40000D4025CAMPBELL    MARIE  E  23235
40000D3825CHAMBERLAIN KATHY  D  23209
40000D4225NANJUNDARAM LAKSHMAM  23266
40000D3925SHARP       CAROLYN   23276
20000G002500497DIVERSIFIED TRAVEL SERVICE INC     RICHMOND       23200
30000H002502143MULTI-HOSPITAL HIGH-TECH SERVICES  RICHMOND       23222
40000D4226BANK-O-MATIC804354-7  23287
40000D4026CAMPBELL    PRISCILL  23244
40000D3826CHAMBERS    DELORES   23273
40000D4126LANEJIM    W703985-5  23268
40000D3926SHARP       HOWARD F  23213
30000H002600468PERSPECTIVES                       HAMPTON        23666
20000G002600792RYAN HOMES INC                     HAMPTON        23666
40000D4027CAMPBELL    MIDGE     23243
40000D3827CHAMBERS    HARVEY E  23239
40000D4127LANEKELLY   804354-7  23267
40000D4227RENKAMY     703985-5  23277
40000D3927SHARP       CRAIG  A  23222
30000H002700150PINEBROOK PSYCHIATRIC CENTER       CULPEPER       23209
20000G002700903REBCOS ENGINE CITY                 CULPEPER       23200
40000D4028CAMPBELL    JULIA     23242
40000D3828CHAMBERS    DEBRA  M  23200
40000D4128FINELINDA  L804354-7  23278
40000D4228LINKBRIDGETM703985-5  23278
40000D3928OHARRA   MD R MICHAE  23221
30000H002800200PINES TREATMENT CENTER             PORTSMOUTH     23210
20000G002800738TIME INCORPORATED                  PORTSMOUTH     23200
40000D4129BENENSON    SHARON    23279
40000D4029CAMPBELL    SHARON    23251
40000D3829CHAMBLISS   SHARONDA  23201
40000D4229HINKEL      JAMES  S  23279
40000D3929PEARSALL    SUSAN  B  23222
30000H002900151PSYCHIATRIC INSTITUTE OF RICHMOND  RICHMOND       23222
20000G002900878GULF PROPERTIES LTD                RICHMOND       23222
40000D3830BEAMCHRISTINE      B  23212
40000D4030CAMPBELL    KEVIN     23252
40000D4130LANEPAMELA  804354-4  23270
40000D4230LINKENAUGER BLANCHEW  23288
40000D3930PEARSON     PHYLLIS   23233
20000G003000075FIELDEN'S INC                      KILMARNOCK     23200
30000H003000347RAPPAHANNOCK GENERAL HOSPITAL      KILMARNOCK     23211
40000D4131CONEROBERT T804285-8  23289
40000D3831ELAMDONNA   804354-7  23213
40000D3931PEARSON     JAMES  C  23234
40000D4031POMPEY      BETTY  J  23260
40000D4231RANKIN      KIMBERLY  23278
30000H003100190THE RETREAT HOSPITAL               RICHMOND       23220
20000G003100614A J BUCK & SONS INC                RICHMOND       23220
40000D3832ELAMDOROTHYG804354-7  23214
40000D4032HEMPHILL    DORIS     23269
40000D4232JENKINS     MILTON J  23287
40000D4132JONES       WENDY  A  23293
40000D3932SMART       ROBERT T  23235
30000H003200103RICHMOND COMMUNITY HOSPITAL        RICHMOND       23223
20000G003200947W S FREY COMPANY INC               RICHMOND       23200
10000910324G0016H0117D0393103840KIDNEY DIALYSIS
10000910325G0003H0128D0401201000TONSILLECTOMY
10000910325G0024H0106D0401102740HEMORRHOIDECTOMY
10000910325G0035H0095D0393103450APPENDECTOMY
10000910326G0054H0076D0416108750LUNG REMOVAL
10000910326G0057H0073D0382207460HYSTERECTOMY
10000910326G0065H0065D0378306940HEART BYPASS
10000910326G0068H0062D0423200256SET BROKEN ARM
10000910327G0046H0084D0412108650MAMMECTOMY
40000D4033HUMPHREYS   DIANNE    23268
40000D4233JENKINS     MARTHA T  23253
40000D4133JONES       MICHELE   23276
40000D3833KRAMER      SARAH  O  23203
40000D3933SMART       TIMOTHY   23246
30000H003300149RICHMOND EYE AND EAR HOSPITAL      RICHMOND       23224
20000G003300836R R SMITH FARM                     RICHMOND       23200
40000D3834BRAMHAM     ROY       23225
40000D4234JENKINS     DAWN      23242
40000D4134JONES       DANAITA   23280
40000D3934KWARTA      MARY   M  23247
40000D4034LAMPKIN     CYNTHIA   23277
30000H003400353RICHMOND MEMORIAL HOSPITAL         RICHMOND       23227
20000G003400894ACTION VISTA VOLUNTEERS            RICHMOND       23227
40000D3935CLARY       PAUL   L  23248
40000D4135JONES       HERMAN    23288
40000D3835MCAMIS      JUDY      23226
40000D4235SINKKATHY  L703985-5  23291
40000D4035TOMPKINS    BETH      23276
30000H003500120ST JOHN'S HOSPITAL                 RICHMOND       23229
20000G003500503G A BENNINGTON EXCAVATING          RICHMOND       23200
40000D3936CHASE       NITA   L  23259
40000D4236CONKLIN     ANNE      23201
40000D3836DIAMOND     BRIDGETE  23277
40000D4136HINES       GENOVEVE  23287
40000D4036TEMPLETON   REED   J  23275
30000H003600070ST LUKE'S CANCER CENTER            RICHMOND       23227
20000G003600784AMERICAN STONE MIX                 RICHMOND       23200
40000D3937BEASLEY     LINDA     23258
40000D3837CHAMP       MARY   A  23288
40000D4137JONES       KENNETH   23296
40000D4237LINKLYDIA   804354-4  23202
40000D4037SAMPSON     RENEE  G  23267
20000G003700121CENTRAL ELECTRIC SERVICE CORP      RICHMOND       23226
30000H003700130ST MARY'S HOSPITAL                 RICHMOND       23226
40000D3838CHAMPUS     (MILITAR  23299
40000D3938GLASPIE     CHAWANDA  23217
40000D4138JONES       LORRAINE  23295
40000D4038LAMPSON     MICHELLE  23246
40000D4238LINKOUS     JOHN   W  23203
30000H003800158SHELTERING ARMS REHABILITATION HOSPRICHMOND       23227
20000G003800230LEGAL SERVICE CORP                 RICHMOND       23200
40000D3839ADAMS       LILLIE D  23259
40000D3939GLASS       JUDY   W  23266
40000D4139JONES       BEVERLYA  23294
40000D4039SIMPSON     SHELIA P  23284
40000D4239SINKREVONDAS703985-5  23214
30000H003900187SLEEP DISORDERS CENTER OF RICHMOND RICHMOND       23228
20000G003900230CENTRAL VIRGINIA LEGAL AID         RICHMOND       23200
40000D3840ADAMS       DAVID  L  23240
40000D4240BANKS       JASPER L  23215
40000D3940GLASS       LYNDA     23265
40000D4140JONES       AUNDREA   23203
40000D4040SAMPSON     MICHELLE  23283
30000H004000160SOUTHSIDE REGIONAL MEDICAL CENTER  PETERSBURG     23803
20000G004000655SOUTHSIDE VIRGINIA                 PETERSBURG     23803
10000910407G0004H0127D0398101430TONSILLECTOMY
10000910407G0025H0105D0398103650HEMORRHOIDECTOMY
10000910407G0036H0094D0407102550APPENDECTOMY
10000910408G0058H0072D0418506350HYSTERECTOMY
40000D3841ADAMS       CECELIAC  23241
40000D4241BANKS       DORIS  V  23216
40000D3941CHASTEEN    RAY    E  23264
40000D4141JONES       ALVERTAN  23202
40000D3741MC ALLISTER ERNEST G  23201
40000D4041SIMPSON     BARBARA   23282
20000G004100658VIRGINIA POVERTY LAW CTR           RICHMOND       23200
30000H004100744TUCKER PAVILION                    RICHMOND       23227
10000910417G0015H0116D0407303730KIDNEY DIALYSIS
10000910417G0053H0077D0384309650LUNG REMOVAL
10000910417G0064H0066D0421207240HEART BYPASS
10000910417G0069H0061D0375100248SET BROKEN ARM
40000D3842ADAMS       ROSALIND  23242
40000D4242DUNKUM      RICK      23227
40000D4042HAMPTON JR  JAMES     23291
40000D4142JONES       KAREN  E  23201
40000D3742LA BARR     ELLA   R  23280
40000D3942PEAT MARWICKAUDITORS  23273
20000G004200159BLUE RIDGE LEGAL SERVICES INC      RICHMOND       23200
30000H004200180UROSURGICAL CENTER OF RICHMOND, INCRICHMOND       23227
10000910427G0047H0083D0387107550MAMMECTOMY
40000D3843ADAMS       ELIZABET  23253
40000D4243DUNKUM-     SHARON J  23228
40000D4043HAMPTON     MARY   R  23292
40000D4143HYNES       KEN       23212
40000D3743SM BUSINESS MESSAGE   23280
40000D3943STATE       804355-8  23272
30000H004300090VA CENTER FOR COSMETIC & RECONSTR  RICHMOND       23228
20000G004300622BLUE CROSS EMPLOYEES ASSOCIATION   RICHMOND       23200
40000D3844ADAMS       PATRICIA  23254
40000D4044HAMPTON     CHRISTIN  23293
40000D4144JONES       KEN       23213
40000D3744MC GHEE     PATRICIA  23238
40000D3944SLATE       LINDA     23281
40000D4244VANLANDINGHAM         23229
30000H004400167VIRGINIA HEALTH NETWORK INC        RICHMOND       23229
20000G004400719WOODLAKE COMMUNITY CENTER          RICHMOND       23200
40000D3745C & P       804342-0  23202
40000D4045COMPUTER ROOM         23204
40000D3845ELAMSANDRA  804354-2  23255
40000D4245FINLAYSON   MARIE     23230
40000D4145JONES       RONNIE    23223
40000D3945SPATES      CYNTHIAJ  23282
30000H004500172VIRGINIA HEART CENTER              RICHMOND       23229
20000G004500676SEMCO                              RICHMOND       23200
40000D4046COMPUTER CO.804965-7  23205
40000D3946HEATH       SHIRLEYB  23283
40000D4146JONES       BARBARAC  23224
40000D3846REAMY       GIL       23266
40000D3746TPA ACCOUNTSREYNOLDS  23203
40000D4246WANLESS     JANET     23239
30000H004600174VIRGINIA HEART INSTITUTE           RICHMOND       23229
20000G004600349LEONARD SPLAINE COMPANY INC        RICHMOND       23200
40000D3847BRANCH      DEBORAH   23267
40000D4047COMPUTER CO.804965-7  23206
40000D3947HEATH       GERALD    23294
40000D4147JONES       CHRISTOP  23225
40000D4247MANLEY      DEREK     23237
40000D3747TPA ACCOUNTSALL GROU  23204
30000H004700381WILLIAMSBURG COMMUNITY HOSPITAL INCWILLIAMSBURG   23213
20000G004700492T & T INCORPORATED                 WILLIAMSBURG   23200
40000D3848BRANCH      DELORA    23268
40000D4148JONES       RONALD S  23236
40000D4248MANLEY      GLORIA A  23246
40000D3948SEATON      STUART M  23295
40000D4048SIMSANNE    804354-7  23217
40000D3748TPA ACCOUNTSALL GROU  23295
30000H004800119WOMEN'S MEDICAL CENTER             RICHMOND       23222
20000G004800432STROTHER DRUG COMPANY              RICHMOND       23200
40000D3849FRANCIS HUTTGAIL   C  23279
40000D4249HENLEY      COLETTEG  23245
40000D4149JONES       VELMA  H  23237
40000D4049LUMSDEN     JO ELLEN  23218
40000D3949MOATS       KATHY  H  23296
40000D3749TPA ACCTS.  REYNOLDS  23296
30000H004900210WOMEN'S PAVILION AT HENRICO DOCTORSRICHMOND       23229
20000G004900567BTR, INC                           RICHMOND       23200
40000D3850BLAND       OLIVIA G  23270
40000D4250HENLEY      RICHARDA  23244
40000D4150JONES       GORDON    23238
40000D4050LUMSDEN     SUSAN     23219
40000D3750TPA CLAIMS  VA ONLY   23297
40000D3950WYATT       DEAN      23207
30000H005000138SURREY COUNTY GENERAL HOSPITAL     SURREY         23214
20000G005000649TYSON'S HEATING AND A/C INC        RICHMOND       23200
40000D3851BRAND       KAREN     23271
40000D4251HENLEY      JULIE     23253
40000D4151JONES       FLORENCE  23247
40000D4051RAMSEY      KENNETHC  23220
40000D3751TPA MARKETING         23298
40000D3951WYATT       EFFIE     23208
30000H005100124ROANOKE GENERAL                    ROANOKE        23215
20000G005100724INTERTAPE, INC                     RICHMOND       23200
10000910517G0005H0126D0402301870TONSILLECTOMY
10000910517G0026H0104D0402203560HEMORRHOIDECTOMY
10000910517G0037H0093D0392503650APPENDECTOMY
10000910518G0014H0115D0392104620KIDNEY DIALYSIS
10000910518G0052H0078D0415308530LUNG REMOVAL
10000910518G0063H0067D0379205030HEART BYPASS
10000910518G0070H0060D0424200134SET BROKEN ARM
10000910519G0048H0082D0413108475MAMMECTOMY
40000D4252CONLEY      ANITA     23252
40000D3752ISAACS      TERRI  L  23289
40000D4152JONES       ROSA   G  23246
40000D3852STANDARD    MIA    D  23282
40000D4052TOMSFREDA  B703985-2  23239
40000D3952WYATT       TERESA    23209
30000H005200149FREE CLINIC, HURT, VA              HURT           23216
20000G005200448INTERNATIONAL CONTAINER SYSTEM     RICHMOND       23200
10000910527G0059H0071D0381208250HYSTERECTOMY
40000D3953BEATTIE     BONNIE    23210
40000D4253CANNADA     LYNN      23251
40000D3853DEANDAVID  M804354-3  23283
40000D4153JONES       CRYSTALL  23245
40000D3753SLABAUGH    RAYMOND   23280
40000D4053WIMSMARGARET804354-7  23241
30000H005300266APPOMATTOX BAPTIST HOSPITAL        APPOMATTOX     23217
20000G005300983LIFORD ELECTRICAL INC              RICHMOND       23200
40000D4054ARMSTRONG   STEPHEND  23242
40000D3854BRANDON     JUDITH    23284
40000D3954BRATTON     TERESA    23219
40000D4154JONES       CYNITHIA  23254
40000D4254MINNAERT    ELAINE M  23262
40000D3754THABET      GARY      23281
30000H005400110LYNCHBURG GENERAL HOSPITAL         LYNCHBURG      23218
20000G005400381F & S CARPENTRY                    RICHMOND       23200
40000D4055ARMSTRONG   MIRIAM E  23243
40000D3955BEAUCHAMP   BETH ANN  23218
40000D3755CLABO       GLENDA    23282
40000D4255HANNAMAN    STEPHANI  23263
40000D4155JONES       MARINDIA  23253
40000D3855ROANE       BERNADET  23294
30000H005500336GEGGENHEIMER CLINIC                LYNCHBURG      23218
20000G005500349HARRIS LANDSCAPING CO              RICHMOND       23200
40000D3856DRANE       VALERIE   23295
40000D4056EDMUNDS     PATRICIA  23254
40000D3956FRAUD                 23211
40000D3756GLACE       JOHN      23273
40000D4156JONES       GINNY     23252
40000D4256WINNANGELA  804354-7  23271
20000G005600248CHRYSLER CORPORATION               RICHMOND       23200
30000H005600328CONCORD EMERGENCY HOSPITAL         CONCORD        23219
40000D3957CHAULKLIN   DIANE     23227
40000D3857DEANE       EVANS     23296
40000D4157JONES       SHIRLEY   23261
40000D3757SPACE PLANNING        23274
40000D4057VAN HORN    JENNIFER  23255
40000D4257VANNANN     804354-4  23272
30000H005700204RESTON COMMUNITY HOSPITAL          RESTON         23230
20000G005700903HENLEY GROUP, GENERAL CHEMISTRY    RICHMOND       23200
40000D3858FRANEY      TONI      23207
40000D4158JONES       AL        23262
40000D4258MANNANNA    804354-7  23273
40000D3758ROACH       MARLENE   23275
40000D3958SHAUNESSY   BRIAN     23297
40000D4058VAN UNWERTH CATHERIN  23256
20000G005800274CHESAPEAKE PUBLISHING CORPORATION  RICHMOND       23200
30000H005800768FREDERICKSBURG GENERAL HOSPITAL    FREDERICKSBURG 23231
40000D4059CANAAN      SHARON    23267
40000D3859GRANGER     BETH      23208
40000D3959GRAVELY     REBECCA   23226
40000D4259HINNANT     KELLY  G  23284
40000D3759PEACHY      DON       23276
40000D4159VINES       LORETTA   23263
20000G005900453FOREST HILL ANIMAL HOSPITAL        RICHMOND       23200
30000H005900460STAUNTON METHODIST HOSPITAL        STAUNTON       23232
40000D3960BEAVEN      BETH   M  23235
40000D3760BLACK       DONNA     23286
40000D3860BLANKENSHIP ANN    T  23209
40000D4160JONES       LISA      23274
40000D4260MANNBERNIE  804354-4  23285
40000D3760QUADE       JEFFREYA  23245
40000D4060VENABLE     TAMARA    23268
20000G006000005FULKS LANDSCAPE INC                RICHMOND       23200
30000H006000127DANVILLE EMERGENCY CLINIC          DANVILLE       23233
10000910607G0051H0079D0385208420LUNG REMOVAL
10000910607G0062H0068D0420206120HEART BYPASS
10000910607G0071H0059D0374100323SET BROKEN ARM
40000D3761BLACK       DAN       23267
40000D3861BLANKENSHIP JOANNE L  23210
40000D4161JONES       MAXINE M  23275
40000D4061MANAGED CARE804342-2  23269
40000D3961WEAVER      MARTIN    23234
40000D4261WYNNCHELENEE804354-3  23286
30000H006100147NEWPORT NEWS CATHOLIC HOSPITAL     NEWPORT NEWS   23234
20000G006100669ELEGANT BEAUTY INC                 RICHMOND       23200
10000910617G0013H0114D0408204510KIDNEY DIALYSIS
10000910617G0049H0081D0386107725MAMMECTOMY
40000D3762BLACK       CYNTHIA   23268
40000D3862BLANKENSHIP CONNIE L  23211
40000D4062DONAHUE     WADE   M  23270
40000D4262DUNNCHERYL            23204
40000D4162JONES       ANGELA B  23276
40000D3962SHAVER      CARRIE M  23233
30000H006200170MERRIBEE ADAMS EMERGENCY CLINIC    NORFOLKD       23245
20000G006200337PHILLIPS SEAFOOD                   RICHMOND       23200
10000910627G0006H0125D0397101290TONSILLECTOMY
10000910627G0027H0103D0397102470HEMORRHOIDECTOMY
10000910627G0038H0092D0408202750APPENDECTOMY
10000910628G0060H0070D0419107130HYSTERECTOMY
40000D3763BLACKBURN   MOLLY  P  23288
40000D4263DUNNDEBORAH 804354-2  23297
40000D3863FRANKEY     JENNIFER  23266
40000D4163HINES       WANDA  P  23287
40000D4063SONAK       WILBERTJ  23279
40000D3963WEAVER      PENNY  J  23242
20000G006300076DISCOVERY DATA SYSTEMS LTD         RICHMOND       23200
30000H006300107BIG ISLAND GENERAL HOSPITAL        BIG ISLAND     23256
40000D3764ALACKMAN    ETHEL  H  23269
40000D3864BLANKINSHIP DUNCAN    23212
40000D4064DONALDSON   LARRY     23278
40000D4164JONES       MARY   D  23288
40000D3964WEAVER JR   LLOYD  M  23272
20000G006400688IUE AFL/CIO HEALTH FUND            RICHMOND       23200
30000H006402163NATURAL BRIDGE COMMUNITY HOSPITAL  NATURAL BRIDGE 23267
40000D3765BLACKMAN    ETHAL     23260
40000D3865FRANKLIN    SARAH  E  23223
40000D3965GRAVES      CHRISTOP  23241
40000D4165JONES       CHRISTIN  23290
40000D4065MCNAMEE     ANNE   B  23287
30000H006500484BUENA VISTA HOSPITAL               BUENA VISTA    23278
20000G006500545MIMS AND THOMAS                    RICHMOND       23200
40000D3766BLACKWELL   CHERYL A  23251
40000D3966CHAVIS      LINDA  B  23252
40000D4066FINANCE AUDITORS      23278
40000D3866FRANKLIN    LINDA  K  23224
40000D4166JONES       SANDRA F  23299
20000G006600058M W MANUFACTURERS INC              RICHMOND       23200
30000H006600100GOOCHLAND FREE CLINIC              GOOCHLAND      23289
40000D3767BLACKWELL   CATHERIN  23252
40000D3867BLANKS      DONNA  Y  23225
40000D3967CHAVIS      BRENDA E  23253
40000D4067DENBY       NANCY     23286
40000D4167JONES       TOWANDAT  23208
30000H006700151OILVILLE FARMER'S HOSPITAL         OILVILLE       23214
20000G006700863ELKRIDGE DISTRIBUTING              RICHMOND       23200
40000D4068DUNCAN      STUART    23280
40000D4168JONES       CYNTHIAV  23207
40000D3768LEADBETTER  JOAN   L  23253
40000D3968SEAWELL     DOROTHY   23254
40000D3868STANLEY     JOAN      23236
30000H006800080FARMVILLE COMMUNITY HOSPITAL       FARMVILLE      23225
20000G006800646BILT BEST WINDOWS                  RICHMOND       23200
40000D3969CRAWFORD    CRYSTAL   23265
40000D4069DUNCAN      DAVID     23285
40000D3769GOADCHARLA J703985-3  23254
40000D4169JONES       RICHARD   23206
40000D3869STANLEY     ELSIE     23237
30000H006900230CHATTAHOOCHIE HOSPITAL             CHATTAHOOCHIE  23236
20000G006900793STRANGE HATCHER CORPORATION        RICHMOND       23200
40000D3970CRAWFORD    GWENDOLY  23266
40000D4070DUNCAN      PATRICIA  23294
40000D4170JONES       MARION    23215
40000D3870STANLEY     MIRTH  A  23238
30000H007000183PENNINGTON GAP CLINIC              PENNINGTON GAP 23247
20000G007000190VALLEY REFUSE SERVICE, INC         RICHMOND       23200
10000910703G0007H0124D0403201440TONSILLECTOMY
10000910703G0028H0102D0403202380HEMORRHOIDECTOMY
10000910703G0039H0091D0391203800APPENDECTOMY
10000910704G0007H0124D0403100210SET BROKEN RIB
10000910704G0012H0113D0391103400KIDNEY DIALYSIS
10000910704G0072H0058D0425200210SET BROKEN ARM
10000910705G0050H0080D0414108600MAMMECTOMY
40000D3771BEADLE      CYNTHIA   23246
40000D3971CRAWFORD    LINDA  F  23267
40000D4171JONES       CARLA     23214
40000D4071MENCARINI   JOAN   B  23293
40000D3871SPANN       ANGELA D  23249
20000G007100012PENN MAR INCORPORATED              RICHMOND       23200
30000H007100109MARY MEADE HOSPITAL                POWHATAN       23258
10000910713G0061H0069D0380306020HYSTERECTOMY
10000910714G0061H0069D0380208530LUNG REMOVAL
40000D4172JONES       THELMA    23213
40000D4072LYNCH       STEFFANI  23292
40000D3972SHAWKATHERINE      N  23278
40000D3772STADLER     BEN       23247
40000D3872SWANN       ALISON M  23240
30000H007200162BUCHANAN GENERAL HOSPITAL          BUCHANAN       23269
40000D3773BRADLEY     ALLISONC  23291
40000D3973CRAWLEY     SHARON G  23279
40000D3873GIANNINI    SHIRLEEN  23241
40000D4073HINCHBERGER MARY      23201
40000D4173JONES       PAMELA    23222
20000G007300381JAMES MCGRAW INC                   RICHMOND       23200
40000D3774BRADLEY     SHERYL    23248
40000D3974CRAWLEY     MARTHA M  23270
40000D4074DONCKERS    WANDA  B  23202
40000D4174JONES       LESLIE C  23221
40000D3874RYANRAY     804354-3  23252
20000G007400993HERCULES AQUALON                   RICHMOND       23200
40000D3775BRADMAN     JENNIFER  23239
40000D3875DEANRICHARDV804354-3  23253
40000D4175JONES       SYLVIA    23222
40000D3975SHAWLINDA             23290
40000D4075SINCLAIR    ALISON    23214
20000G007500012SECRET SERVICE EMPLOYEES           RICHMOND       23200
40000D3876EVANS       SANDY     23294
40000D3776GOADNANCY  C          23200
40000D4176JONES       CAROL  N  23233
40000D4076KUNCMICHAEL 804354-3  23215
40000D3976SHAWMADELINE       V  23289
20000G007600447THE DELI                           RICHMOND       23200
40000D3877EVANS       BARBARA   23254
40000D4077HANCOCK     PAMELA    23216
40000D4177JONES       ROBIN  B  23234
40000D3777MEADOWS     TERESA M  23231
40000D3977SHAWPATRICIA       A  23288
20000G007700274CITY OF WAYNESBORO                 RICHMOND       23200
40000D3878EVANS       EDWARD B  23265
40000D4078HANCOCK     BRENT  A  23227
40000D4178JONES       BETH   M  23235
40000D3778MEADOWS     KATHY     23232
40000D3978THAXTON     BEDFORD   23215
20000G007800169RICHMOND S.P.C.A.                  RICHMOND       23200
40000D3779BRADY       JAMES     23279
40000D3979BRAXTON     DONNA     23297
40000D3879EVANS       JAN ELLI  23266
40000D4179JONES       DONNA     23246
40000D4079VINCZE      KIMBERLY  23228
20000G007900295ELIZABETH RIVER TERMINALS          RICHMOND       23200
40000D3780BRADY       JIM       23233
40000D3980BRAXTON     SUZANNEA  23296
40000D3880GRANT       EDNA   H  23271
40000D4180JONES JR    ROGERS F  23247
40000D4080RANDALL     ROXANNEL  23229
20000G008000836MARINE PORT TERMINALS              RICHMOND       23200
40000D3981CLAYBERNADINE      P  23295
40000D3781GRADY       BENJAMIN  23224
40000D3881GRANT       SENTHIAS  23272
40000D4081KENDALL     JANE      23230
40000D4181LANESHERI   804354-7  23248
20000G008100670PROCESS ENGINEERS PRODUCTS         RICHMOND       23200
10000910813G0008H0123D0396101290TONSILLECTOMY
10000910813G0029H0101D0396103290HEMORRHOIDECTOMY
10000910813G0040H0090D0409102925APPENDECTOMY
10000910813G0051H0079D0385107450MAMMECTOMY
10000910814G0060H0070D0419108740LUNG REMOVAL
10000910814G0071H0059D0375105690HEART BYPASS
10000910815G0062H0068D0420200310SET BROKEN ARM
40000D3782GRAFBLANCHEL804649-2  23274
40000D3882GRANT       KAREN  S  23273
40000D3982GRAYBILL    ELIZABET  23204
40000D4182HONESTY     JUDITH M  23259
40000D4082MONDAY      WILLIAM   23239
20000G008200539CHARLOTTESVILLE ALBEMARLE          RICHMOND       23200
10000910823G0008H0123D0396200150SET BROKEN RIB
10000910823G0011H0112D0409303350KIDNEY DIALYSIS
40000D3983CLAYBORN    PRICILLA  23203
40000D4083RANDAZZO    ANDREW A  23238
40000D3883STANTON     TODD   E  23284
40000D4183TANEY       LINDA  G  23250
40000D3783TRAFFIC DEPT.         23225
20000G008300894PENINSULA LEGAL AID CTR, INC       RICHMOND       23200
40000D3884BLANTON     DONIA  B  23285
40000D3984CLAYBORN    DANIEL M  23202
40000D4184MONEYHAN    GEORGE    23282
40000D4084RONDEAU     MARC      23247
40000D3784SWAFFORD    LAURA     23226
20000G008400785SCHENKERS INTERNATIONAL            RICHMOND       23200
40000D3985CLAYBORNE   BARBARAH  23211
40000D3785CRAFT       RITA   E  23227
40000D3885FRANZ       PAULA  J  23286
40000D4085LONDEREE    WILLIAM   23246
40000D4185SANFORD     PAIGE  M  23234
20000G008500425PHILIP MORRIS INC                  RICHMOND       23200
40000D3786CRAFTON     JULIE  C  23280
40000D3886FRANZYSHEN  CHERYL    23297
40000D3986GRAYCAROLYN 804354-7  23210
40000D4086PENDERGAST  WENDY  D  23245
40000D4186SANFORD     KEVIN  J  23250
20000G008600091PHILIP MORRIS COBRA                RICHMOND       23200
40000D3887DRAPER      MERRITT   23298
40000D3787FLAGG       TERRI  B  23218
40000D3987GRAYCAROL  D804354-2  23229
40000D4087LANDERS     LINDA  K  23254
40000D4187LONG DISTANCE 79      23261
20000G008700513PHILIP MORRIS CRAFT                RICHMOND       23200
40000D3788BRAGG       LATIZZIA  23219
40000D3988BRAYDANIEL            23240
40000D4188LONG SR     DANIEL    23262
40000D4088RYNDERS     PEGGY     23253
40000D3888STAPLES     TERESA    23299
20000G008800940ALNAVCO INC                        RICHMOND       23200
40000D3889CRAPSER     WILLIAM   23289
40000D4089HENDERSON   DAWN      23263
40000D3789NEAGLE      TINA   R  23210
40000D3989SLAYDEN     JANIE  S  23228
40000D4189WINGATE     LAURA  E  23256
20000G008900545ASPLUNDH MANUFACTURING DIVISION    RICHMOND       23200
40000D3890CHARBONNET  CHRIS     23200
40000D4190GONGAWARE   CHRIS  W  23263
40000D4090HENDERSON   CASSANDR  23252
40000D3790NEAGLE      JOAN      23211
40000D3990SEAYEDDIE   703985-3  23227
20000G009000567KELLY AULT INTERIOR DESIGN         RICHMOND       23200
40000D3791GRAHAM      ANNETTEM  23211
40000D3991GRAYJANET   703985-5  23236
40000D4091HENDERSON   KATHY     23261
40000D4191KINGBARBARAC804354-3  23243
40000D3891SCARBOROUGH ALICE     23201
20000G009100365THE LESTER GROUP INC               RICHMOND       23200
10000910917G0009H0122D0404101490TONSILLECTOMY
10000910917G0030H0100D0404303100HEMORRHOIDECTOMY
10000910918G0009H0122D0404100160SET BROKEN RIB
10000910918G0010H0111D0390104240KIDNEY DIALYSIS
40000D3792GRAHAM      MARSHA H  23222
40000D4092HENDERSON   YVONNE    23262
40000D4192RINGCYNTHIAB804354-3  23274
40000D3892SCARBRO     DONNA  U  23202
40000D3992SEAYJOYCE   804354-4  23235
20000G009200970JIM CARPENTER COMPANY, INC         RICHMOND       23200
10000910927G0052H0078D0415106910HYSTERECTOMY
10000910927G0059H0071D0381309650LUNG REMOVAL
10000910927G0063H0067D0379100205SET BROKEN ARM
10000910927G0070H0060D0424306580HEART BYPASS
10000910928G0041H0089D0390107675MAMMECTOMY
40000D3893BOARD       GRACIE C  23213
40000D3993BRAYLAWRENCE804354-4  23234
40000D3793GRAHAM      GAILEE    23223
40000D4093HENDERSON   WRAY      23263
40000D4193LANGDON     ANNAH     23245
20000G009300207SPEED WAY CENTERS, INC             RICHMOND       23200
40000D3994BLAYLOCK    KAREN  M  23243
40000D3894BOARD       SHARON    23214
40000D3794GRAHAM      CHARLENE  23224
40000D4094VANDERVAL-HAYDEN      23244
40000D4194WINGER      BONNIE R  23275
20000G009400128APPALACHIAN REGIONAL HOSPITAL      RICHMOND       23200
40000D3895BEARD       WANDA  L  23215
40000D3995CLAYMELISSA 804354-7  23242
40000D4195KINGERY     AMANDA    23238
40000D3795LEAHEY      KATHLEEN  23286
40000D4095MENDEZ      LINDA     23274
20000G009500643CUMMINS CUMBERLAND INCORPORATED    RICHMOND       23200
40000D3796BEAHM       JEANNINE  23225
40000D3896BEARD       JACQUELI  23226
40000D3996GRAYR DAWN  703985-2  23241
40000D4196KINGERY     LAVINIAJ  23276
40000D4096SANDIFORD   BERTHA    23275
20000G009600891WILL BRANCH FARMS                  RICHMOND       23200
40000D3897DEARING     DEBBIE    23227
40000D3997GRAYSHALA             23246
40000D4197LONGEST     DORIS  R  23287
40000D4097MUNDIN      ELIZABET  23286
40000D3797SHAIA       ROSE MAR  23236
20000G009700967CYPRESS MINERALS                   RICHMOND       23200
40000D4098CANDLER     DEBORAHH  23287
40000D3898CHARITY     DORETHAL  23228
40000D3998CLAYTOR     F AILEEN  23252
40000D3798CRAIG       JACKIE    23237
40000D4198LONGEST     DEBRA     23288
20000G009800503JANNEY & JANNEY ATTORNEYS          RICHMOND       23200
40000D3799CRAIG       JERALD E  23238
40000D3899VIARJUDY   G703985-5  23238
40000D4199WINGFIELD   WENDY  M  23289
40000D3999WRAYTRIPP   804354-2  23253
20000G009900893BSI INC                            RICHMOND       23200
./ ADD NAME=TABLE0A  0103-92002-93071-1123-00004-00001-00000-USER02
30064H007200162DIAGNOSIS CORRECT HOSPITAL         BUCKINGHAM     23237
*GOOD HOSPITAL ENTRY (64)
40042D4101DISDEDOC UWANT        23277
*SET DOCTOR-PROCEDURES-TOTAL (42) INVALID
./ ADD NAME=TABLE0B  0103-92002-93071-1417-00004-00002-00000-USER02
10025910928G0041H0089D0390107675THISIS THERIGHT CLAIM
*GOOD CLAIM ENTRY (25)
20071G000100425UDISCOVERED GROUP COMPANY          RIGHTSVILLE    23213
*SET GROUP-CLAIMS-TOTAL (71) INVALID
./ ADD NAME=TABLE01  0101-91353-91365-1507-00002-00001-00000-USER02
10000911012G0012H0121D03954$1620TONSILLECTOMY
*CLAIM-DATA-CHARGES DATA INVALID ZONED DECIMAL ($1620)
./ ADD NAME=TABLE02  0100-91365-91365-1507-00001-00001-00000-USER02
*NO ADDITIONAL TABLE DATA REQUIRED FOR DUMP02
./ ADD NAME=TABLE03  0106-91353-92003-1006-00004-00001-00000-USER02
10028901012G0012H0121D0395401635UFOUNDIT
*MAKE CLAIM-TOTAL-CHARGES (28) INVALID
20069G009900893YESITIS OTHER CORP                 RICHLANDS      23291
*GOOD GROUP ENTRY
./ ADD NAME=TABLE04  0101-91365-92003-1049-00002-00001-00000-USER02
30061H007200162EUREKA GENERAL HOSPICE             BUCHANAN       23269
*GOOD HOSPITAL ENTRY (61)
./ ADD NAME=TABLE05  0102-91365-92003-1150-00004-00002-00000-USER02
30066H000200292U R ONTARGET                       CHARLOTTESVILL 23296
*HOSPITAL-NBR-PATIENTS TO BE SET INVALID (POS 65-67 IN TABLE
40033D1482HESTHEONE   TOFIND    23253
*DOCTOR ENTRY (33) IS GOOD
./ ADD NAME=TABLE06  0101-91365-92003-1159-00002-00001-00000-USER02
10024910928G0041H0089D0390107675NAILEDIT THATTIME
*GOOD CLAIM ENTRY (24)
./ ADD NAME=TABLE07  0101-92002-92003-1450-00002-00002-00000-USER02
40039D3900DISBEDEE WAN          23429
*DOCTOR-COST-TOTAL TO BE SET INVALID (POS 37-41 IN TABLE)
./ ADD NAME=TABLE08  0101-92002-92003-1456-00004-00001-00000-USER02
20067G009900893UFOUNDA DAGRUP                     PETERSBURG     23271
*GOOD GROUP ENTRY (67)
40034D3999THERITE DOCTOR        23270
*GOOD DOCTOR ENTRY (4)
./ ADD NAME=TABLE09  0102-92002-93071-1123-00002-00002-00000-USER02
30063H007200162GOTIT RIGHT TEMPLE HOSPITAL        BUCHANAN       23269
*GOOD HOSPITAL ENTRY (63)
./ ADD NAME=TABLE1   0102-91344-91352-0827-00100-00100-00000-USER02
10000911101G0013H0120D0405100180SET BROKEN RIB
10000911101G0054H0076D0416309790HYSTERECTOMY
10000911101G0057H0073D0382408670LUNG REMOVAL
10000911101G0065H0065D0378100182SET BROKEN ARM
10000911101G0068H0062D0423305470HEART BYPASS
10000910703G0007H0124D0403201440TONSILLECTOMY
10000910703G0028H0102D0403202380HEMORRHOIDECTOMY
10000910703G0039H0091D0391203800APPENDECTOMY
10000910704G0007H0124D0403100210SET BROKEN RIB
10000910704G0012H0113D0391103400KIDNEY DIALYSIS
10000910704G0072H0058D0425200210SET BROKEN ARM
10000910105G0001H0130D0400101250TONSILLECTOMY
10000910105G0022H0108D0400103920HEMORRHOIDECTOMY
10000910105G0033H0097D0394202250APPENDECTOMY
10000910705G0050H0080D0414108600MAMMECTOMY
10000910106G0001H0130D0400200130SET BROKEN RIB
10000910106G0018H0119D0394400260KIDNEY DIALYSIS
10000910106G0055H0075D0383207680HYSTERECTOMY
10000910106G0056H0074D0417309780LUNG REMOVAL
10000910106G0066H0064D0422200277SET BROKEN ARM
10000910106G0067H0063D0377207860HEART BYPASS
10000910407G0004H0127D0398101430TONSILLECTOMY
10000910407G0025H0105D0398103650HEMORRHOIDECTOMY
10000910407G0036H0094D0407102550APPENDECTOMY
10000910607G0051H0079D0385208420LUNG REMOVAL
10000910607G0062H0068D0420206120HEART BYPASS
10000910607G0071H0059D0374100323SET BROKEN ARM
10000910408G0058H0072D0418506350HYSTERECTOMY
10000911012G0012H0121D0395401620TONSILLECTOMY
10000911012G0020H0110D0410202100HEMORRHOIDECTOMY
10000911012G0031H0099D0395103050APPENDECTOMY
10000910813G0008H0123D0396101290TONSILLECTOMY
10000910813G0029H0101D0396103290HEMORRHOIDECTOMY
10000910813G0040H0090D0409102925APPENDECTOMY
10000910813G0051H0079D0385107450MAMMECTOMY
10000911013G0053H0077D0384207800HYSTERECTOMY
10000911013G0058H0072D0418308560LUNG REMOVAL
10000910713G0061H0069D0380306020HYSTERECTOMY
10000911013G0064H0066D0421100395SET BROKEN ARM
10000911013G0069H0061D0376207780HEART BYPASS
10000910814G0060H0070D0419108740LUNG REMOVAL
10000910714G0061H0069D0380208530LUNG REMOVAL
10000910814G0071H0059D0375105690HEART BYPASS
10000910215G0002H0129D0399101550TONSILLECTOMY
10000910215G0023H0107D0399202830HEMORRHOIDECTOMY
10000910215G0034H0096D0406202350APPENDECTOMY
10000910815G0062H0068D0420200310SET BROKEN ARM
10000910116G0044H0086D0411108450MAMMECTOMY
10000910517G0005H0126D0402301870TONSILLECTOMY
10000910917G0009H0122D0404101490TONSILLECTOMY
10000910617G0013H0114D0408204510KIDNEY DIALYSIS
10000910417G0015H0116D0407303730KIDNEY DIALYSIS
10000910517G0026H0104D0402203560HEMORRHOIDECTOMY
10000910917G0030H0100D0404303100HEMORRHOIDECTOMY
10000910517G0037H0093D0392503650APPENDECTOMY
10000910617G0049H0081D0386107725MAMMECTOMY
10000910417G0053H0077D0384309650LUNG REMOVAL
10000910417G0064H0066D0421207240HEART BYPASS
10000910417G0069H0061D0375100248SET BROKEN ARM
10000910918G0009H0122D0404100160SET BROKEN RIB
10000910918G0010H0111D0390104240KIDNEY DIALYSIS
10000910518G0014H0115D0392104620KIDNEY DIALYSIS
10000910518G0052H0078D0415308530LUNG REMOVAL
10000910518G0063H0067D0379205030HEART BYPASS
10000910518G0070H0060D0424200134SET BROKEN ARM
10000910519G0048H0082D0413108475MAMMECTOMY
10000911121G0019H0120D0405103170KIDNEY DIALYSIS
10000911022G0012H0121D0395200200SET BROKEN RIB
10000911122G0043H0087D0389107725MAMMECTOMY
10000910823G0008H0123D0396200150SET BROKEN RIB
10000910823G0011H0112D0409303350KIDNEY DIALYSIS
10000911023G0042H0088D0410108550MAMMECTOMY
10000910324G0016H0117D0393103840KIDNEY DIALYSIS
10000910224G0045H0085D0388107700MAMMECTOMY
10000910325G0003H0128D0401201000TONSILLECTOMY
10000910225G0017H0118D0406104950KIDNEY DIALYSIS
10000910325G0024H0106D0401102740HEMORRHOIDECTOMY
10000910325G0035H0095D0393103450APPENDECTOMY
10000910225G0055H0075D0383308565LUNG REMOVAL
10000910225G0056H0074D0417408570HYSTERECTOMY
10000910225G0066H0064D0422206350HEART BYPASS
10000910225G0067H0063D0376100364SET BROKEN ARM
10000910326G0054H0076D0416108750LUNG REMOVAL
10000910326G0057H0073D0382207460HYSTERECTOMY
10000910326G0065H0065D0378306940HEART BYPASS
10000910326G0068H0062D0423200256SET BROKEN ARM
10000910627G0006H0125D0397101290TONSILLECTOMY
10000910627G0027H0103D0397102470HEMORRHOIDECTOMY
10000910627G0038H0092D0408202750APPENDECTOMY
10000910327G0046H0084D0412108650MAMMECTOMY
10000910427G0047H0083D0387107550MAMMECTOMY
10000910927G0052H0078D0415106910HYSTERECTOMY
10000910527G0059H0071D0381208250HYSTERECTOMY
10000910927G0059H0071D0381309650LUNG REMOVAL
10000910927G0063H0067D0379100205SET BROKEN ARM
10000910927G0070H0060D0424306580HEART BYPASS
10000910928G0041H0089D0390107675MAMMECTOMY
10000910628G0060H0070D0419107130HYSTERECTOMY
10000911131G0021H0109D0405103010HEMORRHOIDECTOMY
10000911131G0032H0098D0405302150APPENDECTOMY
./ ADD NAME=TABLE2   0103-91344-91352-0826-00121-00072-00000-USER02
20000G000900058B & G GROCERY                      CUMBERLAND     23200
20000G010700169G & G UNIFORM                      RICHMOND       23200
20000G002100270R & R PIPELINE CONSTRUCTION INC    RICHMOND       23200
20000G005400381F & S CARPENTRY                    RICHMOND       23200
20000G004700492T & T INCORPORATED                 WILLIAMSBURG   23200
20000G003500503G A BENNINGTON EXCAVATING          RICHMOND       23200
20000G003100614A J BUCK & SONS INC                RICHMOND       23220
20000G010200725E R NEFF EXCAVATING COMPANY        RICHMOND       23200
20000G003300836R R SMITH FARM                     RICHMOND       23200
20000G003200947W S FREY COMPANY INC               RICHMOND       23200
20000G006600058M W MANUFACTURERS INC              RICHMOND       23200
20000G007000190VALLEY REFUSE SERVICE, INC         RICHMOND       23200
20000G011500270WALTON CONTRACTING                 RICHMOND       23200
20000G007300381JAMES MCGRAW INC                   RICHMOND       23200
20000G011700492MANASSAS TRANSFER, INC             RICHMOND       23200
20000G009800503JANNEY & JANNEY ATTORNEYS          RICHMOND       23200
20000G001800614HANOVER VETERINARIAN SERVICES      RICHMOND       23200
20000G000700725RAPPAHANNOCK RAPIDAN COMM          RICHMOND       23220
20000G008000836MARINE PORT TERMINALS              RICHMOND       23200
20000G010800947GARRETT MANUFACTURING              RICHMOND       23200
20000G005500349HARRIS LANDSCAPING CO              RICHMOND       23200
20000G000500458BARROW MANAGEMENT CORP             CHARLOTTESVILLE23200
20000G012100567FAUBER ARCHITECTS PL               RICHMOND       23200
20000G002000676RAYMOND C HAWKINS CONSTRUCTION     WILLIAMSBURG   23185
20000G008400785SCHENKERS INTERNATIONAL            RICHMOND       23200
20000G003400894ACTION VISTA VOLUNTEERS            RICHMOND       23227
20000G002700903REBCOS ENGINE CITY                 CULPEPER       23200
20000G007500012SECRET SERVICE EMPLOYEES           RICHMOND       23200
20000G010600121FED SPORTSWEAR COMPANY INC         RICHMOND       23200
20000G003800230LEGAL SERVICE CORP                 RICHMOND       23200
20000G001000349VEGAS TIME ASSOCIATES INC          NORFOLK        23200
20000G010500458DEL MAR SPORTSWEAR                 RICHMOND       23200
20000G009000567KELLY AULT INTERIOR DESIGN         RICHMOND       23200
20000G004500676SEMCO                              RICHMOND       23200
20000G001100785GENERAL MOTORS CORP                ROCKVILLE      23200
20000G008300894PENINSULA LEGAL AID CTR, INC       RICHMOND       23200
20000G005700903HENLEY GROUP, GENERAL CHEMISTRY    RICHMOND       23200
20000G007100012PENN MAR INCORPORATED              RICHMOND       23200
20000G003700121CENTRAL ELECTRIC SERVICE CORP      RICHMOND       23226
20000G003900230CENTRAL VIRGINIA LEGAL AID         RICHMOND       23200
20000G004600349LEONARD SPLAINE COMPANY INC        RICHMOND       23200
20000G001300040MERCER RUG & CARPET SALES INC      RICHMOND       23200
20000G007400993HERCULES AQUALON                   RICHMOND       23200
20000G011900805HERCULES COVINGTON HOURLY          RICHMOND       23200
20000G011300717WESTMINISTER KNIT                  RICHMOND       23200
20000G001400628AGECRAFT ASSOCIATION               RICHMOND       23294
20000G008200539CHARLOTTESVILLE ALBEMARLE          RICHMOND       23200
20000G007600447THE DELI                           RICHMOND       23200
20000G009100365THE LESTER GROUP INC               RICHMOND       23200
20000G005800274CHESAPEAKE PUBLISHING CORPORATION  RICHMOND       23200
20000G011600182WHETZEL'S WHOLESALE, INCORPORATED  RICHMOND       23200
20000G008600091PHILIP MORRIS COBRA                RICHMOND       23200
20000G008700513PHILIP MORRIS CRAFT                RICHMOND       23200
20000G008500425PHILIP MORRIS INC                  RICHMOND       23200
20000G006200337PHILLIPS SEAFOOD                   RICHMOND       23200
20000G005600248CHRYSLER CORPORATION               RICHMOND       23200
20000G007800169RICHMOND S.P.C.A.                  RICHMOND       23200
20000G003000075FIELDEN'S INC                      KILMARNOCK     23200
20000G005300983LIFORD ELECTRICAL INC              RICHMOND       23200
20000G009600891WILL BRANCH FARMS                  RICHMOND       23200
20000G000800703WILLIAMS AND SON HAULING           RICHMOND       23225
20000G006800646BILT BEST WINDOWS                  RICHMOND       23200
20000G009200970JIM CARPENTER COMPANY, INC         RICHMOND       23200
20000G002800738TIME INCORPORATED                  PORTSMOUTH     23200
20000G006500545MIMS AND THOMAS                    RICHMOND       23200
20000G011100363LION BROTHERS COMPANY INC          RICHMOND       23200
20000G001700282VIRGINIA COLLECTION CORPORATION    RICHMOND       23220
20000G002300506VIRGINIA ELECTRICAL COMPONENTS     RICHMOND       23200
20000G004100658VIRGINIA POVERTY LAW CTR           RICHMOND       23200
20000G000600869VIRGINIA SOFTWARE INC              RICHMOND       23227
20000G006300076DISCOVERY DATA SYSTEMS LTD         RICHMOND       23200
20000G012200884WISE HUNDLEY ELECTRIC CO           RICHMOND       23200
20000G011200632MISTY HARBOR LTD                   RICHMOND       23200
20000G000100425RITE AID CORP                      RICHMOND       23200
20000G007700274CITY OF WAYNESBORO                 RICHMOND       23200
20000G002500497DIVERSIFIED TRAVEL SERVICE INC     RICHMOND       23200
20000G006100669ELEGANT BEAUTY INC                 RICHMOND       23200
20000G010400749ILGWU                              RICHMOND       23200
20000G007900295ELIZABETH RIVER TERMINALS          RICHMOND       23200
20000G006700863ELKRIDGE DISTRIBUTING              RICHMOND       23200
20000G008800940ALNAVCO INC                        RICHMOND       23200
20000G004300622BLUE CROSS EMPLOYEES ASSOCIATION   RICHMOND       23200
20000G004200159BLUE RIDGE LEGAL SERVICES INC      RICHMOND       23200
20000G001500960GLYNN SOYARS AGENCY                HOPEWELL       23200
20000G003600784AMERICAN STONE MIX                 RICHMOND       23200
20000G002400566INTERGRAPH CORPORATION             RICHMOND       23220
20000G005200448INTERNATIONAL CONTAINER SYSTEM     RICHMOND       23200
20000G005100724INTERTAPE, INC                     RICHMOND       23200
20000G011000583JODI SHIRT COMPANY INC             RICHMOND       23200
20000G012000455JOHN J WILSON ASSOCIATES, INC      RICHMOND       23200
20000G001200237HOLSTEIN HEATING AND A/C           RICHMOND       23229
20000G004400719WOODLAKE COMMUNITY CENTER          RICHMOND       23200
20000G010300575HOPKINS PLUMBING & HEATING INC     RICHMOND       23200
20000G005900453FOREST HILL ANIMAL HOSPITAL        RICHMOND       23200
20000G001900632PORTSMOUTH ORTHOPAEDIC             PORTSMOUTH     23805
20000G011400872COUNTY OF WESTMORELAND             RICHMOND       23200
20000G004000655SOUTHSIDE VIRGINIA                 PETERSBURG     23803
20000G011800436TOWN OF COLONIAL BEACH, INC        RICHMOND       23200
20000G009300207SPEED WAY CENTERS, INC             RICHMOND       23200
20000G009400128APPALACHIAN REGIONAL HOSPITAL      RICHMOND       23200
20000G008100670PROCESS ENGINEERS PRODUCTS         RICHMOND       23200
20000G009900893BSI INC                            RICHMOND       23200
20000G008900545ASPLUNDH MANUFACTURING DIVISION    RICHMOND       23200
20000G010000458ST AGNES' SCHOOL                   RICHMOND       23200
20000G004900567BTR, INC                           RICHMOND       23200
20000G006900793STRANGE HATCHER CORPORATION        RICHMOND       23200
20000G002200825STRATFORD SQUARE APARTMENTS        RICHMOND       23200
20000G004800432STROTHER DRUG COMPANY              RICHMOND       23200
20000G000200251QUALITY GARMENT COMPANY INC        FREDERICKSBURG 23200
20000G000400176RUBICON INC                        NEWPORT NEWS   23603
20000G006400688IUE AFL/CIO HEALTH FUND            RICHMOND       23200
20000G002900878GULF PROPERTIES LTD                RICHMOND       23222
20000G006000005FULKS LANDSCAPE INC                RICHMOND       23200
20000G009500643CUMMINS CUMBERLAND INCORPORATED    RICHMOND       23200
20000G010900426HURLOCK SPORTSWEAR CO              RICHMOND       23200
20000G001600249SURREY COUNTY SCHOOL BOARD         SURREY         23235
20000G010100464MUTUAL ASSURANCE SOCIETY           RICHMOND       23200
20000G002600792RYAN HOMES INC                     HAMPTON        23666
20000G009700967CYPRESS MINERALS                   RICHMOND       23200
20000G005000649TYSON'S HEATING AND A/C INC        RICHMOND       23200
20000G0003004651607 INC                           RICHMOND       23200
./ ADD NAME=TABLE3   0103-91344-91352-0830-00072-00072-00000-USER02
30000H001200140THE HEART PAVILION                 RICHMOND       23229
30000H006300107BIG ISLAND GENERAL HOSPITAL        BIG ISLAND     23256
30000H003100190THE RETREAT HOSPITAL               RICHMOND       23220
30000H001400630HUMANA HOSPITAL - ST LUKE'S        RICHMOND       23294
30000H001701168STUART CIRCLE HOSPITAL             RICHMOND       23220
30000H000100088BASAVA DAY CLINIC                  RICHMOND       23226
30000H000900105CUMBERLAND A HOSPITAL              CUMBERLAND     23204
30000H004300090VA CENTER FOR COSMETIC & RECONSTR  RICHMOND       23228
30000H000200292CANCER CENTER OF VIRGINIA          FREDERICKSBURG 23201
30000H005400110LYNCHBURG GENERAL HOSPITAL         LYNCHBURG      23218
30000H002900151PSYCHIATRIC INSTITUTE OF RICHMOND  RICHMOND       23222
30000H006600100GOOCHLAND FREE CLINIC              GOOCHLAND      23289
30000H005600328CONCORD EMERGENCY HOSPITAL         CONCORD        23219
30000H005800768FREDERICKSBURG GENERAL HOSPITAL    FREDERICKSBURG 23231
30000H005200149FREE CLINIC, HURT, VA              HURT           23216
30000H002700150PINEBROOK PSYCHIATRIC CENTER       CULPEPER       23209
30000H004800119WOMEN'S MEDICAL CENTER             RICHMOND       23222
30000H004900210WOMEN'S PAVILION AT HENRICO DOCTORSRICHMOND       23229
30000H003900187SLEEP DISORDERS CENTER OF RICHMOND RICHMOND       23228
30000H002800200PINES TREATMENT CENTER             PORTSMOUTH     23210
30000H005500336GEGGENHEIMER CLINIC                LYNCHBURG      23218
30000H004400167VIRGINIA HEALTH NETWORK INC        RICHMOND       23229
30000H004500172VIRGINIA HEART CENTER              RICHMOND       23229
30000H004600174VIRGINIA HEART INSTITUTE           RICHMOND       23229
30000H007200162BUCHANAN GENERAL HOSPITAL          BUCHANAN       23269
30000H003200103RICHMOND COMMUNITY HOSPITAL        RICHMOND       23223
30000H003300149RICHMOND EYE AND EAR HOSPITAL      RICHMOND       23224
30000H003400353RICHMOND MEMORIAL HOSPITAL         RICHMOND       23227
30000H002100220MEDICAL ACCESS CENTER              RICHMOND       23228
30000H001800124MEDICAL COLLEGE OF VIRGINIA        RICHMOND       23228
30000H001000243EATING DISORDERS CENTER OF VIRGINIANORFOLK        23205
30000H003500120ST JOHN'S HOSPITAL                 RICHMOND       23229
30000H004100744TUCKER PAVILION                    RICHMOND       23227
30000H001903111POPLAR SPRINGS HOSPITAL            PETERSBURG     23805
30000H000701120CHILDREN'S HOSPITAL                RICHMOND       23220
30000H002000713WILLIAMSBURG COMMUNITY HOSPITAL    WILLIAMSBURG   23185
30000H004700381WILLIAMSBURG COMMUNITY HOSPITAL INCWILLIAMSBURG   23213
30000H003800158SHELTERING ARMS REHABILITATION HOSPRICHMOND       23227
30000H003600070ST LUKE'S CANCER CENTER            RICHMOND       23227
30000H003700130ST MARY'S HOSPITAL                 RICHMOND       23226
30000H006800080FARMVILLE COMMUNITY HOSPITAL       FARMVILLE      23225
30000H001500278JOHN RANDOLPH HOSPITAL             HOPEWELL       23207
30000H006500484BUENA VISTA HOSPITAL               BUENA VISTA    23278
30000H007000183PENNINGTON GAP CLINIC              PENNINGTON GAP 23247
30000H005100124ROANOKE GENERAL                    ROANOKE        23215
30000H001600425JOHNSTON-WILLIS HOSPITAL           RICHMOND       23235
30000H005300266APPOMATTOX BAPTIST HOSPITAL        APPOMATTOX     23217
30000H003000347RAPPAHANNOCK GENERAL HOSPITAL      KILMARNOCK     23211
30000H006100147NEWPORT NEWS CATHOLIC HOSPITAL     NEWPORT NEWS   23234
30000H000800152CHIPPENHAM MEDICAL CENTER          RICHMOND       23225
30000H001100116FAIRBRIDGE RESIDENTIAL TREATMENT   ROCKVILLE      23206
30000H005000138SURREY COUNTY GENERAL HOSPITAL     SURREY         23214
30000H006200170MERRIBEE ADAMS EMERGENCY CLINIC    NORFOLKD       23245
30000H001300235HENRICO DOCTOR'S HOSPITAL          RICHMOND       23221
30000H002203156METRO EMERGENCY ROOM               RICHMOND       23227
30000H002300375METROPOLITAN CLINIC OF COUNSELING  RICHMOND       23220
30000H002400257METROPOLITAN HOSPITAL              RICHMOND       23220
30000H000400362CHARTER COLONIAL INSTITUTE         NEWPORT NEWS   23603
30000H000503134CHARTER HOSPITAL OF CHARLOTTESVILLECHARLOTTESVILLE23202
30000H000600139CHARTER WESTBROOK HOSPITAL         RICHMOND       23227
30000H002600468PERSPECTIVES                       HAMPTON        23666
30000H004200180UROSURGICAL CENTER OF RICHMOND, INCRICHMOND       23227
30000H004000160SOUTHSIDE REGIONAL MEDICAL CENTER  PETERSBURG     23803
30000H002502143MULTI-HOSPITAL HIGH-TECH SERVICES  RICHMOND       23222
30000H005700204RESTON COMMUNITY HOSPITAL          RESTON         23230
30000H006900230CHATTAHOOCHIE HOSPITAL             CHATTAHOOCHIE  23236
30000H005900460STAUNTON METHODIST HOSPITAL        STAUNTON       23232
30000H006402163NATURAL BRIDGE COMMUNITY HOSPITAL  NATURAL BRIDGE 23267
30000H006000127DANVILLE EMERGENCY CLINIC          DANVILLE       23233
30000H006700151OILVILLE FARMER'S HOSPITAL         OILVILLE       23214
30000H007100109MARY MEADE HOSPITAL                POWHATAN       23258
30000H000300131CARY STREET MEDICAL CENTER         RICHMOND       23229
./ ADD NAME=TABLE4   0101-91344-91352-0834-00519-00101-00000-USER02
40000D3741MC ALLISTER ERNEST G  23201
40000D3742LA BARR     ELLA   R  23280
40000D3743SM BUSINESS MESSAGE   23280
40000D3744MC GHEE     PATRICIA  23238
40000D3745C & P       804342-0  23202
40000D3747TPA ACCOUNTSALL GROU  23204
40000D3748TPA ACCOUNTSALL GROU  23295
40000D3746TPA ACCOUNTSREYNOLDS  23203
40000D3749TPA ACCTS.  REYNOLDS  23296
40000D3750TPA CLAIMS  VA ONLY   23297
40000D3751TPA MARKETING         23298
40000D3752ISAACS      TERRI  L  23289
40000D3753SLABAUGH    RAYMOND   23280
40000D3754THABET      GARY      23281
40000D3755CLABO       GLENDA    23282
40000D3756GLACE       JOHN      23273
40000D3757SPACE PLANNING        23274
40000D3758ROACH       MARLENE   23275
40000D3759PEACHY      DON       23276
40000D3762BLACK       CYNTHIA   23268
40000D3761BLACK       DAN       23267
40000D3760BLACK       DONNA     23286
40000D3763BLACKBURN   MOLLY  P  23288
40000D3765BLACKMAN    ETHAL     23260
40000D3764ALACKMAN    ETHEL  H  23269
40000D3767BLACKWELL   CATHERIN  23252
40000D3766BLACKWELL   CHERYL A  23251
40000D3768LEADBETTER  JOAN   L  23253
40000D3769GOADCHARLA J703985-3  23254
40000D3760QUADE       JEFFREYA  23245
40000D3771BEADLE      CYNTHIA   23246
40000D3772STADLER     BEN       23247
40000D3773BRADLEY     ALLISONC  23291
40000D3774BRADLEY     SHERYL    23248
40000D3775BRADMAN     JENNIFER  23239
40000D3776GOADNANCY  C          23200
40000D3778MEADOWS     KATHY     23232
40000D3777MEADOWS     TERESA M  23231
40000D3781GRADY       BENJAMIN  23224
40000D3779BRADY       JAMES     23279
40000D3780BRADY       JIM       23233
40000D3782GRAFBLANCHEL804649-2  23274
40000D3783TRAFFIC DEPT.         23225
40000D3784SWAFFORD    LAURA     23226
40000D3785CRAFT       RITA   E  23227
40000D3786CRAFTON     JULIE  C  23280
40000D3788BRAGG       LATIZZIA  23219
40000D3787FLAGG       TERRI  B  23218
40000D3790NEAGLE      JOAN      23211
40000D3789NEAGLE      TINA   R  23210
40000D3791GRAHAM      ANNETTEM  23211
40000D3794GRAHAM      CHARLENE  23224
40000D3793GRAHAM      GAILEE    23223
40000D3792GRAHAM      MARSHA H  23222
40000D3795LEAHEY      KATHLEEN  23286
40000D3796BEAHM       JEANNINE  23225
40000D3797SHAIA       ROSE MAR  23236
40000D3798CRAIG       JACKIE    23237
40000D3799CRAIG       JERALD E  23238
40000D3800CLAIMS                23209
40000D3802SPAIN       CHARLOTT  23240
40000D3801PLAIN       DAN       23249
40000D3803SWAIN       VIRGINIA  23241
40000D3804TRAINING    804354-2  23242
40000D3805TRAINUM     NORMAN    23253
40000D3806GRAJEWSKI   HELEN  S  23254
40000D3807PEAKCYNTHIA 804354-4  23255
40000D3808NOAKES      ELIZABET  23256
40000D3809BLAKEY      MILDREDJ  23267
40000D3810KLAKKAREN             23244
40000D3811BLAKLEY     GAIL      23268
40000D3812NEALDIANE  L703985-3  23279
40000D3813BEALES      JOANN  D  23235
40000D3814SWALLEN     JEFFREY   23270
40000D3815STALLINGS   KATHI     23281
40000D3816CHALMERS    PEGGY  A  23282
40000D3817STALOCH     LORI      23283
40000D3818STALOCH     LORI      23284
40000D3819SEALRON     804261-1  23205
40000D3810SKALSKY JR  JOSEPH P  23295
40000D3821HEALTHKEEPERS         23296
40000D3822HEALTHKEEPERS         23297
40000D3823HEALTHY VA. IN STAT   23208
40000D3824HEALTHY VA. OUT STA   23235
40000D3825CHAMBERLAIN KATHY  D  23209
40000D3828CHAMBERS    DEBRA  M  23200
40000D3826CHAMBERS    DELORES   23273
40000D3827CHAMBERS    HARVEY E  23239
40000D3829CHAMBLISS   SHARONDA  23201
40000D3830BEAMCHRISTINE      B  23212
40000D3831ELAMDONNA   804354-7  23213
40000D3832ELAMDOROTHYG804354-7  23214
40000D3833KRAMER      SARAH  O  23203
40000D3834BRAMHAM     ROY       23225
40000D3835MCAMIS      JUDY      23226
40000D3836DIAMOND     BRIDGETE  23277
40000D3837CHAMP       MARY   A  23288
40000D3838CHAMPUS     (MILITAR  23299
40000D3841ADAMS       CECELIAC  23241
40000D3840ADAMS       DAVID  L  23240
40000D3843ADAMS       ELIZABET  23253
40000D3839ADAMS       LILLIE D  23259
40000D3844ADAMS       PATRICIA  23254
40000D3842ADAMS       ROSALIND  23242
40000D3845ELAMSANDRA  804354-2  23255
40000D3846REAMY       GIL       23266
40000D3847BRANCH      DEBORAH   23267
40000D3848BRANCH      DELORA    23268
40000D3849FRANCIS HUTTGAIL   C  23279
40000D3851BRAND       KAREN     23271
40000D3850BLAND       OLIVIA G  23270
40000D3852STANDARD    MIA    D  23282
40000D3853DEANDAVID  M804354-3  23283
40000D3854BRANDON     JUDITH    23284
40000D3855ROANE       BERNADET  23294
40000D3857DEANE       EVANS     23296
40000D3856DRANE       VALERIE   23295
40000D3858FRANEY      TONI      23207
40000D3859GRANGER     BETH      23208
40000D3860BLANKENSHIP ANN    T  23209
40000D3862BLANKENSHIP CONNIE L  23211
40000D3861BLANKENSHIP JOANNE L  23210
40000D3863FRANKEY     JENNIFER  23266
40000D3864BLANKINSHIP DUNCAN    23212
40000D3866FRANKLIN    LINDA  K  23224
40000D3865FRANKLIN    SARAH  E  23223
40000D3867BLANKS      DONNA  Y  23225
40000D3869STANLEY     ELSIE     23237
40000D3868STANLEY     JOAN      23236
40000D3870STANLEY     MIRTH  A  23238
40000D3872SWANN       ALISON M  23240
40000D3871SPANN       ANGELA D  23249
40000D3873GIANNINI    SHIRLEEN  23241
40000D3874RYANRAY     804354-3  23252
40000D3875DEANRICHARDV804354-3  23253
40000D3877EVANS       BARBARA   23254
40000D3878EVANS       EDWARD B  23265
40000D3879EVANS       JAN ELLI  23266
40000D3876EVANS       SANDY     23294
40000D3880GRANT       EDNA   H  23271
40000D3882GRANT       KAREN  S  23273
40000D3881GRANT       SENTHIAS  23272
40000D3884BLANTON     DONIA  B  23285
40000D3883STANTON     TODD   E  23284
40000D3885FRANZ       PAULA  J  23286
40000D3886FRANZYSHEN  CHERYL    23297
40000D3887DRAPER      MERRITT   23298
40000D3888STAPLES     TERESA    23299
40000D3889CRAPSER     WILLIAM   23289
40000D3890CHARBONNET  CHRIS     23200
40000D3891SCARBOROUGH ALICE     23201
40000D3892SCARBRO     DONNA  U  23202
40000D3893BOARD       GRACIE C  23213
40000D3896BEARD       JACQUELI  23226
40000D3894BOARD       SHARON    23214
40000D3895BEARD       WANDA  L  23215
40000D3897DEARING     DEBBIE    23227
40000D3898CHARITY     DORETHAL  23228
40000D3899VIARJUDY   G703985-5  23238
40000D3905CLARK       C. TED    23254
40000D3900CLARK       DAN       23239
40000D3903CLARK       DORIS  J  23246
40000D3906CLARK       HELEN  L  23253
40000D3902STARK       JOHN W C  23247
40000D3907CLARK       LISA   R  23262
40000D3904CLARK       MELISSA   23255
40000D3901CLARK       SHELIA R  23248
40000D3915STARKE      BARBARA   23286
40000D3909CLARKE      BENJAMIN  23261
40000D3910CLARKE      CHRISTIN  23261
40000D3911CLARKE      GAYLE  T  23272
40000D3908CLARKE      KAREN  E  23246
40000D3912STARKE      MARY      23273
40000D3914CLARKE      STEPHEN   23285
40000D3913CLARKE      THERESAK  23274
40000D3916CLARKE-CAMPBELL       23287
40000D3917STARKES     CORDELIA  23298
40000D3919STARKS      BEVERLY   23299
40000D3918STARKS      BONNIE    23265
40000D3920QUARLES     JAMES     23290
40000D3921HOARMELISSA 804354-2  23209
40000D3922HEARN       GARY   L  23208
40000D3923STARNS      RANDY  L  23215
40000D3924SHARO       SANDY     23214
40000D3925SHARP       CAROLYN   23276
40000D3927SHARP       CRAIG  A  23222
40000D3926SHARP       HOWARD F  23213
40000D3928OHARRA   MD R MICHAE  23221
40000D3929PEARSALL    SUSAN  B  23222
40000D3931PEARSON     JAMES  C  23234
40000D3930PEARSON     PHYLLIS   23233
40000D3932SMART       ROBERT T  23235
40000D3933SMART       TIMOTHY   23246
40000D3934KWARTA      MARY   M  23247
40000D3935CLARY       PAUL   L  23248
40000D3936CHASE       NITA   L  23259
40000D3937BEASLEY     LINDA     23258
40000D3938GLASPIE     CHAWANDA  23217
40000D3939GLASS       JUDY   W  23266
40000D3940GLASS       LYNDA     23265
40000D3941CHASTEEN    RAY    E  23264
40000D3942PEAT MARWICKAUDITORS  23273
40000D3944SLATE       LINDA     23281
40000D3943STATE       804355-8  23272
40000D3945SPATES      CYNTHIAJ  23282
40000D3947HEATH       GERALD    23294
40000D3946HEATH       SHIRLEYB  23283
40000D3948SEATON      STUART M  23295
40000D3949MOATS       KATHY  H  23296
40000D3950WYATT       DEAN      23207
40000D3951WYATT       EFFIE     23208
40000D3952WYATT       TERESA    23209
40000D3953BEATTIE     BONNIE    23210
40000D3954BRATTON     TERESA    23219
40000D3955BEAUCHAMP   BETH ANN  23218
40000D3956FRAUD                 23211
40000D3957CHAULKLIN   DIANE     23227
40000D3958SHAUNESSY   BRIAN     23297
40000D3959GRAVELY     REBECCA   23226
40000D3960BEAVEN      BETH   M  23235
40000D3962SHAVER      CARRIE M  23233
40000D3961WEAVER      MARTIN    23234
40000D3963WEAVER      PENNY  J  23242
40000D3964WEAVER JR   LLOYD  M  23272
40000D3965GRAVES      CHRISTOP  23241
40000D3967CHAVIS      BRENDA E  23253
40000D3966CHAVIS      LINDA  B  23252
40000D3968SEAWELL     DOROTHY   23254
40000D3969CRAWFORD    CRYSTAL   23265
40000D3970CRAWFORD    GWENDOLY  23266
40000D3971CRAWFORD    LINDA  F  23267
40000D3972SHAWKATHERINE      N  23278
40000D3974CRAWLEY     MARTHA M  23270
40000D3973CRAWLEY     SHARON G  23279
40000D3975SHAWLINDA             23290
40000D3976SHAWMADELINE       V  23289
40000D3977SHAWPATRICIA       A  23288
40000D3978THAXTON     BEDFORD   23215
40000D3979BRAXTON     DONNA     23297
40000D3980BRAXTON     SUZANNEA  23296
40000D3981CLAYBERNADINE      P  23295
40000D3982GRAYBILL    ELIZABET  23204
40000D3984CLAYBORN    DANIEL M  23202
40000D3983CLAYBORN    PRICILLA  23203
40000D3985CLAYBORNE   BARBARAH  23211
40000D3987GRAYCAROL  D804354-2  23229
40000D3986GRAYCAROLYN 804354-7  23210
40000D3988BRAYDANIEL            23240
40000D3989SLAYDEN     JANIE  S  23228
40000D3990SEAYEDDIE   703985-3  23227
40000D3991GRAYJANET   703985-5  23236
40000D3992SEAYJOYCE   804354-4  23235
40000D3993BRAYLAWRENCE804354-4  23234
40000D3994BLAYLOCK    KAREN  M  23243
40000D3995CLAYMELISSA 804354-7  23242
40000D3996GRAYR DAWN  703985-2  23241
40000D3997GRAYSHALA             23246
40000D3998CLAYTOR     F AILEEN  23252
40000D3999WRAYTRIPP   804354-2  23253
40000D4001TOMLIN      ANN       23254
40000D4002ZIMMERMAN   LAURA     23265
40000D4003KAMMETER    BARBARA   23266
40000D4004CUMMINGS    MARK      23267
40000D4005GAMMON      DONNA     23278
40000D4007HAMMOND     DAVE      23270
40000D4006HAMMOND     PAT       23279
40000D4010SIMMONS     JACQUELI  23291
40000D4008SIMMONS     RUTH      23289
40000D4009SIMMONS     TANYA     23288
40000D4011SIMMS       CONRAD    23292
40000D4013SIMMS       GWENDOLY  23204
40000D4012SIMMS       JANET     23293
40000D4015SIMON       DAVE      23206
40000D4014SIMON       YOLANDA   23205
40000D4016DEMOND      LUCINDAA  23217
40000D4017EDMONDS     BOBBY  D  23218
40000D4020EDMONDS     DARRELL   23229
40000D4019EDMONDS     P JANE    23220
40000D4018EDMONDS     THALIA    23219
40000D4021CAMPBELL    ANGELA    23273
40000D4022CAMPBELL    CATHERIN  23228
40000D4024CAMPBELL    DONNA  L  23236
40000D4028CAMPBELL    JULIA     23242
40000D4030CAMPBELL    KEVIN     23252
40000D4025CAMPBELL    MARIE  E  23235
40000D4027CAMPBELL    MIDGE     23243
40000D4023CAMPBELL    MILDREDJ  23237
40000D4026CAMPBELL    PRISCILL  23244
40000D4029CAMPBELL    SHARON    23251
40000D4031POMPEY      BETTY  J  23260
40000D4032HEMPHILL    DORIS     23269
40000D4033HUMPHREYS   DIANNE    23268
40000D4034LAMPKIN     CYNTHIA   23277
40000D4035TOMPKINS    BETH      23276
40000D4036TEMPLETON   REED   J  23275
40000D4041SIMPSON     BARBARA   23282
40000D4038LAMPSON     MICHELLE  23246
40000D4040SAMPSON     MICHELLE  23283
40000D4037SAMPSON     RENEE  G  23267
40000D4039SIMPSON     SHELIA P  23284
40000D4044HAMPTON     CHRISTIN  23293
40000D4043HAMPTON     MARY   R  23292
40000D4042HAMPTON JR  JAMES     23291
40000D4046COMPUTER CO.804965-7  23205
40000D4047COMPUTER CO.804965-7  23206
40000D4045COMPUTER ROOM         23204
40000D4048SIMSANNE    804354-7  23217
40000D4049LUMSDEN     JO ELLEN  23218
40000D4050LUMSDEN     SUSAN     23219
40000D4051RAMSEY      KENNETHC  23220
40000D4052TOMSFREDA  B703985-2  23239
40000D4053WIMSMARGARET804354-7  23241
40000D4055ARMSTRONG   MIRIAM E  23243
40000D4054ARMSTRONG   STEPHEND  23242
40000D4056EDMUNDS     PATRICIA  23254
40000D4057VAN HORN    JENNIFER  23255
40000D4058VAN UNWERTH CATHERIN  23256
40000D4059CANAAN      SHARON    23267
40000D4060VENABLE     TAMARA    23268
40000D4061MANAGED CARE804342-2  23269
40000D4062DONAHUE     WADE   M  23270
40000D4063SONAK       WILBERTJ  23279
40000D4064DONALDSON   LARRY     23278
40000D4065MCNAMEE     ANNE   B  23287
40000D4066FINANCE AUDITORS      23278
40000D4067DENBY       NANCY     23286
40000D4069DUNCAN      DAVID     23285
40000D4070DUNCAN      PATRICIA  23294
40000D4068DUNCAN      STUART    23280
40000D4071MENCARINI   JOAN   B  23293
40000D4072LYNCH       STEFFANI  23292
40000D4073HINCHBERGER MARY      23201
40000D4074DONCKERS    WANDA  B  23202
40000D4075SINCLAIR    ALISON    23214
40000D4076KUNCMICHAEL 804354-3  23215
40000D4078HANCOCK     BRENT  A  23227
40000D4077HANCOCK     PAMELA    23216
40000D4079VINCZE      KIMBERLY  23228
40000D4081KENDALL     JANE      23230
40000D4080RANDALL     ROXANNEL  23229
40000D4082MONDAY      WILLIAM   23239
40000D4083RANDAZZO    ANDREW A  23238
40000D4084RONDEAU     MARC      23247
40000D4085LONDEREE    WILLIAM   23246
40000D4086PENDERGAST  WENDY  D  23245
40000D4087LANDERS     LINDA  K  23254
40000D4088RYNDERS     PEGGY     23253
40000D4090HENDERSON   CASSANDR  23252
40000D4089HENDERSON   DAWN      23263
40000D4091HENDERSON   KATHY     23261
40000D4093HENDERSON   WRAY      23263
40000D4092HENDERSON   YVONNE    23262
40000D4094VANDERVAL-HAYDEN      23244
40000D4095MENDEZ      LINDA     23274
40000D4096SANDIFORD   BERTHA    23275
40000D4097MUNDIN      ELIZABET  23286
40000D4098CANDLER     DEBORAHH  23287
40000D4101PENDLETON   JILL   H  23288
40000D4102MANDLEY     IDA       23299
40000D4103RANDOLPH    REBECCAB  23290
40000D4104SANDRAS     CRAIG  A  23299
40000D4107HENDRICK    OTHELIA   23206
40000D4105HENDRICKS   ALLINE    23208
40000D4106HENDRICKS   FAITH     23207
40000D4109DANDRIDGE   ETHEL  C  23214
40000D4108DANDRIDGE   JOAN   L  23215
40000D4110LINDSEY     WALTER D  23213
40000D4111LANDSHARON R804354-2  23222
40000D4112BONDSHIRLEY 804354-7  23221
40000D4113LANDSTEVE   804354-7  23222
40000D4114MANDWILLA   804354-4  23233
40000D4115HANDY       CAROLYN   23234
40000D4118HANDY       CAROLYNJ  23246
40000D4120HANDY       DEBORAHM  23258
40000D4119BANDY       JAMES  E  23247
40000D4117SANDY       KENNETH   23235
40000D4116SANDY       WAYNE  G  23234
40000D4121MCNEAR      LORRAINE  23259
40000D4122LANEDENISE  804354-2  23250
40000D4123RENEE       TERRANCE  23222
40000D4124BENEFITS              23253
40000D4125BENEFITS    EMPLOYEE  23269
40000D4126LANEJIM    W703985-5  23268
40000D4127LANEKELLY   804354-7  23267
40000D4128FINELINDA  L804354-7  23278
40000D4129BENENSON    SHARON    23279
40000D4130LANEPAMELA  804354-4  23270
40000D4131CONEROBERT T804285-8  23289
40000D4158JONES       AL        23262
40000D4141JONES       ALVERTAN  23202
40000D4162JONES       ANGELA B  23276
40000D4140JONES       AUNDREA   23203
40000D4146JONES       BARBARAC  23224
40000D4178JONES       BETH   M  23235
40000D4139JONES       BEVERLYA  23294
40000D4171JONES       CARLA     23214
40000D4176JONES       CAROL  N  23233
40000D4165JONES       CHRISTIN  23290
40000D4147JONES       CHRISTOP  23225
40000D4153JONES       CRYSTALL  23245
40000D4154JONES       CYNITHIA  23254
40000D4168JONES       CYNTHIAV  23207
40000D4134JONES       DANAITA   23280
40000D4179JONES       DONNA     23246
40000D4151JONES       FLORENCE  23247
40000D4136HINES       GENOVEVE  23287
40000D4156JONES       GINNY     23252
40000D4150JONES       GORDON    23238
40000D4135JONES       HERMAN    23288
40000D4142JONES       KAREN  E  23201
40000D4143HYNES       KEN       23212
40000D4144JONES       KEN       23213
40000D4137JONES       KENNETH   23296
40000D4174JONES       LESLIE C  23221
40000D4160JONES       LISA      23274
40000D4159VINES       LORETTA   23263
40000D4138JONES       LORRAINE  23295
40000D4155JONES       MARINDIA  23253
40000D4170JONES       MARION    23215
40000D4164JONES       MARY   D  23288
40000D4161JONES       MAXINE M  23275
40000D4133JONES       MICHELE   23276
40000D4173JONES       PAMELA    23222
40000D4169JONES       RICHARD   23206
40000D4177JONES       ROBIN  B  23234
40000D4148JONES       RONALD S  23236
40000D4145JONES       RONNIE    23223
40000D4152JONES       ROSA   G  23246
40000D4166JONES       SANDRA F  23299
40000D4157JONES       SHIRLEY   23261
40000D4175JONES       SYLVIA    23222
40000D4172JONES       THELMA    23213
40000D4167JONES       TOWANDAT  23208
40000D4149JONES       VELMA  H  23237
40000D4163HINES       WANDA  P  23287
40000D4132JONES       WENDY  A  23293
40000D4180JONES JR    ROGERS F  23247
40000D4181LANESHERI   804354-7  23248
40000D4182HONESTY     JUDITH M  23259
40000D4183TANEY       LINDA  G  23250
40000D4184MONEYHAN    GEORGE    23282
40000D4186SANFORD     KEVIN  J  23250
40000D4185SANFORD     PAIGE  M  23234
40000D4187LONG DISTANCE 79      23261
40000D4188LONG SR     DANIEL    23262
40000D4189WINGATE     LAURA  E  23256
40000D4190GONGAWARE   CHRIS  W  23263
40000D4191KINGBARBARAC804354-3  23243
40000D4192RINGCYNTHIAB804354-3  23274
40000D4193LANGDON     ANNAH     23245
40000D4194WINGER      BONNIE R  23275
40000D4195KINGERY     AMANDA    23238
40000D4196KINGERY     LAVINIAJ  23276
40000D4198LONGEST     DEBRA     23288
40000D4197LONGEST     DORIS  R  23287
40000D4201WINGFIELD   KATHY     23290
40000D4199WINGFIELD   WENDY  M  23289
40000D4202LANGFORD    SALLY  E  23291
40000D4203BINGHAM     DEBORAH   23292
40000D4204KINGKARLA  K          23227
40000D4205TINGLE      ROBERTA   23203
40000D4206JUNGLES     GREG      23280
40000D4207SINGLETON   GAIL      23204
40000D4208KINGLINDA   804354-4  23205
40000D4209LONGLISA    703985-5  23216
40000D4210JINGLUSKI   EDWARD J  23217
40000D4211KINGROBIN   804354-7  23218
40000D4212WINGROVE    JAMES     23229
40000D4213MANGRUM     CHANTELA  23220
40000D4214HENGST      RICHARDC  23231
40000D4215KINGTHERESA 804354-2  23232
40000D4216DUNHAM      JAMES  M  23233
40000D4217DUNHAM      SUSAN  P  23244
40000D4218DANIELS     JERRY  A  23245
40000D4219DANIELS     REBECCAV  23246
40000D4220BENINGHOVE  DONNA  L  23257
40000D4221PINION      JEFFREY   23258
40000D4222KANIPE      MARY   T  23259
40000D4223ENNIS       JOANN     23260
40000D4224DENITTO     CONSTANC  23265
40000D4225NANJUNDARAM LAKSHMAM  23266
40000D4226BANK-O-MATIC804354-7  23287
40000D4227RENKAMY     703985-5  23277
40000D4228LINKBRIDGETM703985-5  23278
40000D4229HINKEL      JAMES  S  23279
40000D4230LINKENAUGER BLANCHEW  23288
40000D4231RANKIN      KIMBERLY  23278
40000D4234JENKINS     DAWN      23242
40000D4233JENKINS     MARTHA T  23253
40000D4232JENKINS     MILTON J  23287
40000D4235SINKKATHY  L703985-5  23291
40000D4236CONKLIN     ANNE      23201
40000D4237LINKLYDIA   804354-4  23202
40000D4238LINKOUS     JOHN   W  23203
40000D4239SINKREVONDAS703985-5  23214
40000D4241BANKS       DORIS  V  23216
40000D4240BANKS       JASPER L  23215
40000D4242DUNKUM      RICK      23227
40000D4243DUNKUM-     SHARON J  23228
40000D4244VANLANDINGHAM         23229
40000D4245FINLAYSON   MARIE     23230
40000D4246WANLESS     JANET     23239
40000D4252CONLEY      ANITA     23252
40000D4249HENLEY      COLETTEG  23245
40000D4247MANLEY      DEREK     23237
40000D4248MANLEY      GLORIA A  23246
40000D4251HENLEY      JULIE     23253
40000D4250HENLEY      RICHARDA  23244
40000D4253CANNADA     LYNN      23251
40000D4254MINNAERT    ELAINE M  23262
40000D4255HANNAMAN    STEPHANI  23263
40000D4256WINNANGELA  804354-7  23271
40000D4257VANNANN     804354-4  23272
40000D4258MANNANNA    804354-7  23273
40000D4259HINNANT     KELLY  G  23284
40000D4260MANNBERNIE  804354-4  23285
40000D4261WYNNCHELENEE804354-3  23286
40000D4262DUNNCHERYL            23204
40000D4263DUNNDEBORAH 804354-2  23297
./ ADD NAME=TEXTBOOK 0100-02148-02148-1427-03034-03034-00000-BC0THOR
 m e                                                                            
+Ø1         ***** DUMP READING - NUMBER SYSTEM FUNDAMENTALS *****   Page 1
                                                       Ø0   I. Fundamentals o
+ f number systems. This section deals with general
                                  Ø       information about number systems, p
+ erforming arithmetic in and
             Ø       conversion between numbers of different systems.
ã                                                                      Ø
+ 
                                                 Ø       A. Properties of num
+ ber systems. Any number system has a base,
                            Ø          which is the number of digits used by
+ the system.  Examples
       áØ          are:
                                                                 Ø
+ 
                                           Ø          Base 2 (Binary)  Two di
+ gits: 0 and 1
                      Ø          Base 8 (Octal)   Eight digits: 0, 1, 2, 3, 4
+ , 5, 6, and 7
 .Ø          Base 10 (Decimal) Ten digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, AND 9
                                                          Ø          Base 16
+ (Hexadecimal) Sixteen digits: 0, 1, 2, 3, 4, 5, 6, 7,

                                     Ø
+      8, 9, A, B, C, D, E, and F
                Ø
ñ                                                                         Ø
+     B. In any number system, a number is composed of one or more of
                                                    Ø          the digits val
+ id for the system. The number may be expanded to
                               Ø          the left indefinitely. Examples are
+ :
          âØ
ä                                                                   Ø
+               Base 2 : 0100010101
                                              Ø                       Base 8
+ : 12506
                         Ø                       Base 10: 9037256
+ 
    çØ                       Base 16: 12A970B3
                                                             Ø
+ 
                                        Ø       C. As an exercise, let's coun
+ t 17 times (in decimal) in each of
                   Ø          the number systems commonly in use by computers
<:                                                                             
+Ø
                                                       Ø          Decimal....
+ ..  0   1    2    3     4     5     6     7
                                  Ø          Binary.......  0   1    10   11
+    100   101   110   111
             Ø          Octal........  0   1    2    3     4     5     6
ã7                                                                     Ø
+     Hexadecimal..  0   1    2    3     4     5     6     7
                                                 Ø
+ 
                            Ø          Decimal......  8      9      10     11
+      12     13     14
       áØ          Binary.......  1000   1001   1010   1011   1100   1101   11
 10                                                              Ø          Oc
+ tal........  10     11     12     13     14     15     16
                                           Ø          Hexadecimal..  8      9
+       A      B      C      D      E
                      Ø
+ 
 .Ø          Decimal......  15      16     17
                                                          Ø          Binary..
+ .....  1111    10000  10001

                                     Ø          Octal........  17      20
+  21
                Ø          Hexadecimal..  F       10     11
ñ                                                                         Ø
+ 
                                                    Ø          This table sho
+ ws the equivalent number in any of the other
                               Ø          number systems. For example, the de
+ cimal equivalent of a
          âØ          hexadecimal C is 12, the octal equivalent of a binary 10
ä0 is                                                               Ø
+  4, etc. The most important equivalents are those for decimal,
                                              Ø          hexadecimal, and bin
+ ary, however.
                         Ø
+ 
    çØ       D. Converting Hex to Decimal:  As a number is incremented, and a
                                                             Ø          digit
+  position is increased beyond the highest valued digit in
                                        Ø          the system, a "carry" is m
+ ade to the next digit position to
                   Ø          the left, and only the remainder past the numbe
<r system base                                                                 
+Ø          is used in the incremented position. Because of this, the
                                                       Ø          right-most
+ position of any number is the units position, and
                                  Ø          is equal in value to the digit o
+ ccupying this place. The next
             Ø          digit position to the left is incremented by one only
ã when the                                                             Ø
+     units position exceeds the number system base, so the value of
                                                 Ø1         ***** DUMP READIN
+ G - NUMBER SYSTEM FUNDAMENTALS *****   Page 2
                            Ø0         this position is equal to the product
+ of the digit occupying
       áØ          the position and the base of the system. For the decimal
                                                                 Ø          sy
+ stem, this is the "tens" position.  For binary, it is the
                                           Ø          "twos" position, for oc
+ tal, the "eights" position, and for
                      Ø          hexadecimal the "sixteens" position. The nex
+ t position to the
 .Ø          left is incremented by one each time the position to its right
                                                          Ø          exceeds
+ the base value, which is once each time the number is

                                     Ø          increased base times base tim
+ es. The value of this position is
                Ø          then equal to the product of the digit occupying t
ñhe position                                                              Ø
+        and the square of the base. The value of the next position to
                                                    Ø          the left is th
+ e product of the digit in that position and the
                               Ø          cube of the base, etc.  The "value"
+  referred to in this
          âØ          discussion is the decimal equivalent of the digit positi
äon. In                                                             Ø
+  order to find the decimal equivalent of a number, find the sum
                                              Ø          of the values of all
+  digit positions. Examples:
                         Ø
+ 
    çØ          HEX: 2ABC
                                                             Ø
+    ---- C=12 ------------------->   12  Units position
                                        Ø                 -------- B=11, 11X1
+ 6= -------->  176  16's position
                   Ø                ----------- A=10, 10X16X16=----> 2560  25
<6's position                                                                  
+Ø               -------------- 2X16X16X16= -----> 8192  4096's pos.
                                                       Ø
+                            -----
                                  Ø                       Decimal Equivalent-
+ ----> 10940  (Sum)
             Ø
ã                                                                      Ø
+     BINARY: 10110
                                                 Ø                      -- 0
+ -------------------->  0   Units position
                            Ø                     ----- 1X2= --------------->
+   2   2's position
       áØ                    --------- 1X2X2= ---------->  4   4's position
                                                                 Ø
+        ------------- 0X2X2X2= ----->  0   8's position
                                           Ø                  ---------------
+ - 1X2X2X2X2 --> 16   16's position
                      Ø                                                ---
+ 
 .Ø                        Decimal Equivalent = --> 22   (Sum)
                                                          Ø
+ 

                                     Ø       E. Converting Decimal to Hex:  I
+ n the previous paragraph, we
                Ø          converted a non-decimal number to its decimal equi
ñvalent. Now                                                              Ø
+        let's reverse the procedure to find the equivalent in another
                                                    Ø          system of a de
+ cimal number. This is done by dividing the
                               Ø          decimal number by the base of the o
+ ther system, saving the
          âØ          remainders, until the quotient is less than the base we'
äre                                                                 Ø
+  dividing by.  The number is then the concatenation of the
                                              Ø          final quotient and a
+ ll the remainders taken in reverse order.
                         Ø          As example convert the decimal number 62,
+ 593 to hexadecimal:
    çØ
                                                             Ø          62,59
+ 3 / 16 = 3,912  Remainder 1 -----------------------
                                        Ø           3,912 / 16 =   244  Remai
+ nder 8 ----------------------
                   Ø             244 / 16 =    15  Remainder 4 --------------
<-------                                                                       
+Ø                            -----------------------------------
                                                       Ø
+ 
                                  Ø                                     Hexad
+ ecimal equivalent = F481
             Ø
ã                                                                      Ø
+  F. Hex Addition:  Since most arithmetic done when using dumps
                                                 Ø          uses either decim
+ al, hexadecimal, or a combination of these,
                            Ø          only hexadecimal and combined hexadeci
+ mal and decimal will be
       áØ          shown from this point on.  Before adding two numbers, both
                                                                 Ø          mu
+ st be written in the same number base. That is, a decimal
                                           Ø          number cannot be added
+ meaningfully to a hex number. Since we
                      Ø1         ***** DUMP READING - NUMBER SYSTEM FUNDAMENT
+ ALS *****   Page 3
 .Ø0         normally think in decimal terms, it is usually easier to
                                                          Ø          convert
+ hex numbers to decimal and convert the sums back to

                                     Ø          hex. The digits 0-9 require n
+ o conversion, as they are the
                Ø          same in both systems. Beyond 9, however, you must
ñremember the                                                             Ø
+        following:
                                                    Ø
+ 
                               Ø               Hex A = Decimal 10
+ 
          âØ               Hex B = Decimal 11
ä                                                                   Ø
+       Hex C = Decimal 12
                                              Ø               Hex D = Decimal
+  13
                         Ø               Hex E = Decimal 14
+ 
    çØ               Hex F = Decimal 15
                                                             Ø
+ 
                                        Ø          When adding in hex, each d
+ igit position sum is the simple sum
                   Ø          of the two digits, so long as the sum is less t
<han decimal 16                                                                
+Ø          (hex 10). When the sum is 16 or more, carry 1 to the next
                                                       Ø          position to
+  the left, and write only the amount in excess of
                                  Ø          16. Note that this is equivalent
+  to converting each column
             Ø          from hex to decimal, doing the addition, then convert
ãing the                                                               Ø
+     sum back to hex.  For example, add the hex numbers 4ABC and
                                                 Ø          5048:
+ 
                            Ø
+ 
       áØ           4ABC  Hex C = Decimal 12; 12 + 8 = 20; 20 = 16 + 4;
                                                                 Ø          +5
+ 048          the excess over 16 is 4, and 1 is carried.
                                           Ø          -----  Hex B = Decimal
+ 11; 1 (carry) + 11 + 4 = 16;
                      Ø           9B04          16 = 16 + 0; the excess over
+ 16 is 0, and 1 is
 .Ø                         carried.
                                                          Ø                 H
+ ex A = Decimal 10; 1 (carry) + 10 = 11; decimal

                                     Ø                         11 = hex B; si
+ nce the sum is less than 16,
                Ø                         there is no carry.
ñ                                                                         Ø
+               4 + 5 = 9; the sum is less than 16, so there is no
                                                    Ø
+  carry.
                               Ø
+ 
          âØ       G. Hex Subtraction:  As in addition, an intermediate conver
äsion                                                               Ø
+  to decimal is the simplest approach. When a "borrow" is
                                              Ø          necessary, remember
+ that we borrow 1 from the next position to
                         Ø          the left, and we bring over 16 (decimal),
+  not 10 (decimal).
    çØ          For an example, subtract 90B14 (hex) from E1273 (hex):
                                                             Ø
+ 
                                        Ø           E1273  .Since 3 is less t
+ han 4, we borrow 1 from the 7,
                   Ø          -90B14   leaving 6; the 16 borrowed plus 3 = 19
<; 19 - 4 = 15;                                                                
+Ø          ------   decimal 15 = hex F.
                                                       Ø           5075F  .Th
+ e next column does not require a borrow, as 6 (we
                                  Ø                   borrowed 1 from the 7)
+ minus 1 = 5.
             Ø                  .In the next column, 2 is less than B, so bor
ãrow 1                                                                 Ø
+              from the adjacent 1, leaving 0; adding the borrowed
                                                 Ø                   16 to 2
+ = 18; hex B = decimal 11; 18 - 11 = 7.
                            Ø                  .Since the 1 was reduced to 0
+ by the last borrow,
       áØ                   0 - 0 = 0.
                                                                 Ø
+       .In the last column, hex E = decimal 14; 14 - 9 = 5.
                                           Ø
+ 
                      Ø       H. Hex Multiplication and Division:  Multiplica
+ tion and division
 .Ø          of hexadecimal numbers is best done by first converting both
                                                          Ø          numbers
+ to decimal, doing the multiplication or division, then

                                     Ø          converting the product or quo
+ tient back to hexadecimal. as
                Ø          example, find the product of hex 2ABC and hex 3D:
ñ                                                                         Ø1
+        ***** DUMP READING - NUMBER SYSTEM FUNDAMENTALS *****   Page 4
                                                    Ø0
+ 
                               Ø           2ABC           1. Convert hex 2ABC
+  to decimal:
          âØ          X  3D
ä                                                                   Ø
+  -----                 2ABC
                                              Ø
+      - 12 X 1 = ---------->   12
                         Ø                                  ---- 11 X 16 = --
+ ----->  176
    çØ                                 ------ 10 X 256 = -----> 2560
                                                             Ø
+                  --------- 2 X 4096 = ---> 8192
                                        Ø
+                      -----
                   Ø                                Decimal equivalent ---->
<10940                                                                         
+Ø
                                                       Ø
+     2. Convert hex 3D to decimal:
                                  Ø
+ 
             Ø                                  3D
ã                                                                      Ø
+                              ---------------------> 13
                                                 Ø
+        -------- 3 X 16 = ----> 48
                            Ø
+          ---
       áØ                                  Decimal equivalent ---> 61
                                                                 Ø
+ 
                                           Ø                         3. Multi
+ ply the resulting decimal numbers:
                      Ø                            10,940 X 61 = 667,340
+ 
 .Ø
                                                          Ø
+        4. Convert the decimal product 667,340 to hex:

                                     Ø
+ 
                Ø                            667,340 / 16 = 41,708 remainder
ñ12 ---------                                                             Ø
+                           41,708 / 16 =  2,606 remainder 12 --------
                                                    Ø
+       2,606 / 16 =    162 remainder 14 -------
                               Ø                                162 / 16 =
+   10 remainder 2 -------
          âØ                                                ------------------
ä--                                                                 Ø
+ 
                                              Ø
+          The desired product is thus A2ECC
                         Ø1            ***** DUMP READING - MEMORY INTERPRETA
+ TION *****     Page 5
    çØ0  II. Interpretation of the content of memory.
                                                             Ø
+ 
                                        Ø       A. Main storage, or memory, i
+ s composed of data elements called
                   Ø          bytes.  Each byte is identified by its location
< relative to                                                                  
+Ø          zero, also called its address. The lowest byte address is
                                                       Ø          zero, and t
+ he highest is 2,147,483,648 (decimal), or 7FFFFFFF
                                  Ø          (hex). A byte is an 8-bit binary
+  field. As such, it can
             Ø          contain any of 256 possible values, from 00000000 to
ã11111111                                                              Ø
+     (binary), which correspond to 00-FF (hex), or 0- 255
                                                 Ø          (decimal).
+ 
                            Ø
+ 
       áØ       B. Since binary is cumbersome to print (and read), memory
                                                                 Ø          pr
+ intouts, or dumps, are usually printed in hexadecimal.  This
                                           Ø          is possible, as a singl
+ e hexadecimal digit can represent any
                      Ø          of 16 different values.  Four binary bits ca
+ n also contain 16
 .Ø          different values, so two hexadecimal digits can be used to
                                                          Ø          print an
+ y byte, if the byte is divided into two groups of 4

                                     Ø          bits each. A half-byte is oft
+ en called a "nibble" or "nybble".
                Ø          Some examples are:
ñ                                                                         Ø
+ 
                                                    Ø                       B
+ inary 1101 0010 ------> Hexadecimal D2
                               Ø                       Binary 0000 1100 -----
+ -> Hexadecimal 0C
          âØ                       Binary 1110 0001 ------> Hexadecimal E1
ä                                                                   Ø
+ 
                                              Ø       C. When divided into gr
+ oups of 4 bits, the leftmost group is
                         Ø          called the "zone" portion, and the rightm
+ ost the "numeric"
    çØ          portion. This terminology is sometimes useful in describing
                                                             Ø          chara
+ cter data, but can result in confusion when discussing
                                        Ø          packed decimal numbers, wh
+ ere the sign occupies the numeric
                   Ø          portion, and the number the zone portion of the
< last byte of                                                                 
+Ø          the field.
                                                       Ø
+ 
                                  Ø       D. Bytes may be grouped in two's, f
+ our's, and eight's, to produce
             Ø          halfwords, fullwords (also called words), and doublew
ãords. A                                                               Ø
+     halfword, in addition to being two bytes long, must exist in
                                                 Ø          memory at a locat
+ ion where its left-most byte address is
                            Ø          evenly divisible by 2. Similarly, a fu
+ llword is four bytes
       áØ          long, with address evenly divisible by 4, and of course the
                                                                 Ø          8-
+ byte doubleword has an address evenly divisible by 8. Memory
                                           Ø          dumps ordinarily print
+ in groups of 4- bytes (words). Some
                      Ø          examples of these groups are:
+ 
 .Ø
                                                          Ø              0F13
+                 a halfword (two bytes)

                                     Ø              5F612713            a wor
+ d, or fullword (four bytes)
                Ø              00002137  80467139  a doubleword (eight bytes)
ñ shown as                                                                Ø
+                                two groups of 4-bytes each.
                                                    Ø
+ 
                               Ø       E. Packed Decimal Data:  This data typ
+ e is used by the computer
          âØ          for all decimal arithmetic. A packed decimal field is de
äfined                                                              Ø
+  in COBOL by use of "COMP-3" with a numeric field. Because it
                                              Ø          is very inefficient
+ in memory and CPU time to pack and unpack
                         Ø          numbers, any fields used for arithmetic s
+ hould be defined as
    çØ          packed decimal whenever possible. A packed decimal number may
                                                             Ø          be fr
+ om 1 to 16 bytes long, and contains two decimal digits
                                        Ø          per byte except for the la
+ st byte, which contains one digit
                   Ø          and the sign of the field. the sign must be C (
<positive), D                                                                  
+Ø1            ***** DUMP READING - MEMORY INTERPRETATION *****     Page 6
                                                       Ø0         (negative),
+  or F (unsigned, assumed positive). If a digit
                                  Ø          position contains a non-decimal
+ digit, or the sign is not C,
             Ø          D, or F, a program check will occur when arithmetic o
ãr a move                                                              Ø
+     is done on the field. This causes an S0C7 abend. Note that a
                                                 Ø          packed decimal fi
+ eld must always contain an odd number of
                            Ø          digits, and COBOL may be more efficien
+ t if the field is
       áØ          defined with an odd number of digits.  Examples of packed
                                                                 Ø          de
+ cimal fields are:
                                           Ø
+ 
                      Ø               0010739D         A 4-byte packed decima
+ l field containing
 .Ø                                the value -10,739
                                                          Ø               357
+ C             A 2-byte packed decimal field containing

                                     Ø                                the val
+ ue +357
                Ø               99376F           A 3-byte packed decimal fiel
ñd containing                                                             Ø
+                              the value 99,376 (unsigned)
                                                    Ø               0
+ 4       An invalid 5-byte packed decimal field
                               Ø                                (sign is not
+ C, D, or F). This might
          âØ                                have been created by packing a fie
äld of                                                              Ø
+                        blanks.
                                              Ø
+ 
                         Ø       F. Unpacked (Zoned) Decimal Data:  This is a
+  type of character
    çØ          data, which contains one decimal digit per byte. It is
                                                             Ø          ineff
+ icient in memory and CPU time, and should not be used for
                                        Ø          fields which are used for
+ arithmetic.  Unpacked decimal fields
                   Ø          are defined by writing PIC 9 or PIC S9 without
<the COMP-3 or                                                                 
+Ø          COMP qualifier. Each digit of an unpacked number contains a
                                                       Ø          decimal dig
+ it in its numeric portion. The zone portion of all
                                  Ø          bytes but the last is "F". The z
+ one of the last byte of the
             Ø          field contains the sign for the entire field, which m
ãay be C                                                               Ø
+     (positive), D (negative), or F (unsigned).  Unpacked numbers
                                                 Ø          must be converted
+  to packed format before arithmetic can be
                            Ø          done. Moves and compares also result i
+ n packing these fields.
       áØ          Note that the rightmost digit of a signed, unpacked number
                                                                 Ø          wi
+ ll print as an alphabetic character, since C1-C9 print as
                                           Ø          A-I, and D1-D9 print as
+  J- R.  examples of unpacked fields
                      Ø          are:
+ 
 .Ø
                                                          Ø               F1F
+ 1F3F5F7F9       A 6-byte unpacked decimal field

                                     Ø                                  conta
+ ining 113,579 (unsigned)
                Ø                                  (prints as 113579)
ñ                                                                         Ø
+ 
                                                    Ø               F0F6F3F7C
+ 8         A 5-byte unpacked decimal field
                               Ø                                  containing
+ +6,379 (prints as 637H)
          âØ
ä                                                                   Ø
+       F9F7D3             A 3-byte unpacked decimal field
                                              Ø
+     containing -973 (prints as 97L)
                         Ø
+ 
    çØ       G. Packing and Unpacking Numbers:  Before an unpacked decimal
                                                             Ø          numbe
+ r can be used in arithmetic, moved (as a number), or used
                                        Ø          in an algebraic comparison
+ , it must be converted to packed
                   Ø          decimal format.  This is called packing. The pa
<cked field must                                                               
+Ø          be unpacked when moved to an unpacked field, and when setting
                                                       Ø          the result
+ of a calculation in an unpacked decimal field. The
                                  Ø          pack operation consists of rever
+ sing the zone and digit
             Ø          portions of the last byte of the field, then moving t
ãhe                                                                    Ø
+     numeric portions of the unpacked bytes to half-bytes in the
                                                 Ø1            ***** DUMP REA
+ DING - MEMORY INTERPRETATION *****     Page 7
                            Ø0         packed decimal field. Operation is fro
+ m right-to-left.
       áØ          Unpacking is the reverse of packing.  First, the zone and
                                                                 Ø          nu
+ meric portions of the last byte are reversed, then each
                                           Ø          packed decimal digit is
+  placed in the numeric portion of an
                      Ø          unpacked byte, and the zone portion is set t
+ o "F". Note that
 .Ø          packing and unpacking a field may cause a change if the
                                                          Ø          original
+  field was not a valid unpacked decimal number. Here

                                     Ø          are some examples:
+ 
                Ø
ñ                                                                         Ø
+            Unpacked: F1F3F5F7F9 -----> Packed: 13579F
                                                    Ø              Unpacked:
+ F5F3D4 ---------> Packed: 534D
                               Ø              Unpacked: F6F6F0F1F4C5 ---> Pac
+ ked: 0660145C note leading
          âØ                                                  zero insertion
ä                                                                   Ø
+      Unpacked: 40404040 -------> Packed: 000004 -------------
                                              Ø              Unpacked: ABCDEF
+ 01 -------> Packed: BDF10 -------------
                         Ø              Packed: 13579F -----------> Unpacked:
+  F1F3F5F7F9
    çØ              Packed: 534D -------------> Unpacked: F5F3D4
                                                             Ø              P
+ acked: 0660145C ---------> Unpacked: F0F6F6F0F1F4C5
                                        Ø              Packed: 000004 -------
+ ----> Unpacked: F0F0F0F040  <----Ù
                   Ø              Packed: BDF10 ------------> Unpacked: FBFDF
<F01 <--------Ù                                                                
+Ø
                                                       Ø       H. Binary Data
+ :  This data type can also be used by the computer
                                  Ø          for arithmetic. Binary fields ar
+ e either 2, 4, or 8 bytes
             Ø          long, and are defined in COBOL by use of "COMP" with
ãa numeric                                                             Ø
+     picture. A 2-byte field results for pictures of 9(1) thru
                                                 Ø          9(4), a 4-byte fi
+ eld for pictures of 9(5) thru 9(8), and an
                            Ø          8-byte field if the picture is 9(9) or
+  more. Binary fields are
       áØ          usually used as subscripts, or counters. Any value is valid
                                                                 Ø          fo
+ r a binary field. The sign of a binary field is its
                                           Ø          beginning bit. If the l
+ eading bit is 0, the number is
                      Ø          positive. Thus, a positive binary number wil
+ l have a leading
 .Ø          hex digit of 7 or less, and a negative number in binary will
                                                          Ø          have a l
+ eading hex digit of 8 or greater. To find the true

                                     Ø          value of the negative number,
+  subtract each digit from F, and
                Ø          add 1 to the result.  Some binary fields are:
ñ                                                                         Ø
+ 
                                                    Ø              0415
+  A 2-byte (halfword) positive number
                               Ø              FFFFFFFD   A 4-byte (fullword)
+ negative number whose value
          âØ                         is -3. To find the true (negative) number
ä:                                                                  Ø
+                     1. Subtract each digit from F: 00000002
                                              Ø                             2
+ . Add 1                     : 00000003
                         Ø
+ 
    çØ       J. Character Data:  This is defined in a COBOL program by use of
                                                             Ø          pictu
+ re X, A, or 9 (if no COMP clause is used). Fields may be
                                        Ø          any length, and are, (or s
+ hould be), used principally for data
                   Ø          read in from a card reader or terminal, or to b
<e printed. Each                                                               
+Ø          character occupies one byte. For a complete list of all valid
                                                       Ø          EBCDIC char
+ acters, refer to the System/370 Reference Summary
                                  Ø          in the code translation table un
+ der the EBCDIC column. Some
             Ø          examples of character data are:
ã                                                                      Ø
+ 
                                                 Ø             C1 thru C9 = c
+ haracters "A" thru "I",
                            Ø             40 = character blank
+ 
       áØ             D1 thru D9 = characters "J" thru "R",
                                                                 Ø
+  5B = character $
                                           Ø             E2 thru E9 = charact
+ ers "S" thru "Z",
                      Ø             61 = character /
+ 
 .Ø             F0 thru F9 = characters "0" thru "9",
                                                          Ø1           *****
+ DUMP READING - ABEND-AID DUMP CONTENT *****     Page 8

                                     Ø0 III. Abend-Aid Dump Contents:
+ 
                Ø
ñ                                                                         Ø
+     A. Abend-AID is a registered trademark of the Compuware Corp. IBM
                                                    Ø          is a registere
+ d trademark of International Business Machines
                               Ø          Corp.
+ 
          âØ
ä                                                                   Ø       B.
+  Special Abend-Aid DD Statements:  Abend-Aid permits a number
                                              Ø          of special DD statem
+ ents which it uses to control its
                         Ø          operation. The most important of these ar
+ e shown below.  In
    çØ          addition, the abending step MUST contain an ordinary
                                                             Ø          //SYS
+ UDUMP or //SYSABEND DD statement in order for any dump
                                        Ø          output to be processed.
+ 
                   Ø
<                                                                              
+Ø                    *** Controlling the IBM Dump Output ***
                                                       Ø
+ 
                                  Ø             //ABNLDUMP DD DUMMY     Force
+ s a normal IBM dump after
             Ø                                     Abend-Aid finishes its pri
ãntout.                                                                Ø
+ 
                                                 Ø             //ABNLNODP DD
+ DUMMY     Stops the normal IBM dump from
                            Ø                                     printing.
+ 
       áØ
                                                                 Ø
+  //ABNLFMTD DD DUMMY     Forces the IBM dump to print only
                                           Ø
+     the formatted control blocks
                      Ø                                     portion (ASCB, TC
+ B, RB, etc.).
 .Ø
                                                          Ø                 *
+ ** Controlling the Abend-AID Dump Output ***

                                     Ø
+ 
                Ø             //ABNLIGNR DD DUMMY     Prevents the Abend-AID
ñdump from                                                                Ø
+                                   printing. Goes directly to the IBM
                                                    Ø
+              dump routines.
                               Ø
+ 
          âØ             //ABENDAID DD           If present, Abend-AID dump wi
äll be                                                              Ø
+                             written here instead of to SYSUDUMP.
                                              Ø
+        Can specify SYSOUT= or DSN=.
                         Ø
+ 
    çØ             //ABNLTERM DD           Writes Abend-AID dump in 72 column
                                                             Ø
+                       format for ease in TSO EDITing. Can
                                        Ø
+  Can be SYSOUT= or DSN=
                   Ø
<                                                                              
+Ø               *** Controlling Content of the Abend-AID Dump ***
                                                       Ø
+ 
                                  Ø             //ABNLALL DD DUMMY      Force
+ s formatting of all program
             Ø                                     storage and control blocks
ã.                                                                     Ø
+ 
                                                 Ø             //ABNLPCBS DD
+ DUMMY     Forces printing of the Data
                            Ø                                     Management
+ control blocks for all
       áØ                                     OPEN FILES.
                                                                 Ø
+ 
                                           Ø             //ABNLWSPT DD DUMMY
+     Forces printing of the Abend-AID
                      Ø                                     program storage s
+ ection.
 .Ø
                                                          Ø             //ABN
+ LSPRT DD DUMMY     Forces the entire record to print

                                     Ø                                     in
+  the Data Management section if
                Ø                                     Abend-Aid is configured
ñ to print                                                                Ø
+                                   only the first portion.
                                                    Ø1           ***** DUMP R
+ EADING - ABEND-AID DUMP CONTENT *****     Page 9
                               Ø0      C. Header Section: This section contai
+ ns identifying information
          âØ          about the abending job, including job name, step name, a
änd                                                                 Ø
+  date and time of abend.
                                              Ø  ----------------------------
+ ----------------  EXAMPLE OF HEADER SECTION  ---------------------------------
---------------          Ø
+ 
    çØ                                                      A B E N D - A I D
                                           PAGE   1          Ø   MODEL 3090
+ MVS/SP 3.1.0  THURSDAY      A B E N D - A I D   D I A G N O S T I C S
 05 APR 90    871222-R 5.4.2            Ø                              *
+ ABEND-AID COPYRIGHT COMPUWARE CORPORATION 1976, 1987      *
                   Ø                              *
<                                     *                                        
+Ø                              *                      LICENSED FOR USE AT:
                *                                      Ø
+          *                     ACME STEAMSHOVEL CO                       *
                                  Ø   JOB - BSFITHOA   STEP - ABND
+         COMPLETION CODE - S0C7                         TIME OF ABEND - 15.08.4
0            Ø
ã                                                                      Ø -----
+ ------------------------------------------------------------------------------
---------------------------------------Ù         Ø
+ 
                            Ø      D.  Next Sequential Instruction Section: T
+ his paragraph will tell
       áØ          you the displacement to the next instruction in your progra
 m                                                               Ø          wh
+ ich would have been executed if the program had not abended.
                                           Ø          This is a very importan
+ t element of information which can be
                      Ø          used to locate the instruction in the progra
+ m which caused the
 .Ø          abend.
                                                          Ø
+ 

                                     Ø  ---------------------------------  EX
+ AMPLE OF NEXT SEQUENTIAL INSTRUCTION SECTION  --------------------------------
------          Ø                                       *********************
ñ**********************                                                   Ø
+                                     *   NEXT SEQUENTIAL INSTRUCTION SECTION
*                                                   Ø
+                *******************************************
                               Ø
+ 
          âØ                                THE NEXT SEQUENTIAL INSTRUCTION TO
ä BE EXECUTED IN PROGRAM                                            Ø
+                                   INVNTORY WAS AT DISPLACEMENT 0002B4.
                                              Ø
+ 
                         Ø                             THE PROGRAM WAS COMPIL
+ ED ON 03 JAN 79 AND IS 002B50 BYTES LONG.
    çØ
                                                             Ø
+                             IT IS PART OF LOAD MODULE ORDERALL.
                                        Ø                                THE
+ MODULE WAS LOADED FROM STEPLIB LIBRARY
                   Ø                                PRODUCTION.LOAD
<                                                                              
+Ø                                IT WAS LINK EDITED ON 05 MAY 88 AND IS 027D08
BYTES LONG.                                            Ø --------------------
+ ------------------------------------------------------------------------------
------------------------Ù         Ø
+ 
             Ø1           ***** DUMP READING - ABEND-AID DUMP CONTENT *****
ã  Page 10                                                             Ø0
+ E.  Supporting Environmental Data: The most important information
                                                 Ø          in this section i
+ s the PARM data from the EXEC JCL statement.
                            Ø          PSW and register information is ordina
+ rily not useful in
       áØ          debugging COBOL programs.
                                                                 Ø
+ 
                                           Ø  -------------------------------
+   EXAMPLE OF THE SUPPORTING ENVIRONMENTAL DATA SECTION  ----------------------
------------          Ø                                              SUPPORTI
+ NG ENVIRONMENTAL DATA
 .Ø
                                                          Ø            ABEND
+ PSW - 078D3000 00011C6E                                           PROG PSW  -

 078D3000 00011C6E                   Ø            LOAD MODULE - ABNDMAIN
+                                              ENTRY POINT ADDRESS - 00006DD8
                Ø
ñ                        LOAD  POINT ADDRESS - 00006DD8                   Ø
+ 
                                                    Ø
+                         REGISTERS AT TIME OF ABEND
                               Ø                                REG   HEX
+      DECIMAL          DESCRIPTION
          âØ                                R0    00000428             1,064
ä                                                                   Ø
+                        R1    00011E24            73,252   A(SYSDATE ) + 0003C4
                                              Ø
+   R2    0000C199            49,561   A(ABNDCOB ) + 0053C1
                         Ø                                R3    00011E28
+        73,256   A(SYSDATE ) + 0003C8
    çØ                                R4    3000C19A       805,355,930   A(ABN
DCOB ) + 0053C2                                              Ø
+                  R5    00009FD8            40,920   A(ABNDCOB ) + 003200
                                        Ø                                R6
+   00011AB4            72,372   A(SYSDATE ) + 000054
                   Ø                                R7    00015EA0
< 89,760   A(ABNDMAIN) + 00F0C8                                                
+Ø                                R8    0000AB61            43,873   A(ABNDCOB )
 + 003D89                                              Ø
+            R9    0000C19A            49,562   A(ABNDCOB ) + 0053C2
                                  Ø                                R10   0001
+ 1AE8            72,424   A(SYSDATE ) + 000088
             Ø                                R11   00011BC0            72,64
ã0   A(SYSDATE ) + 000160                                              Ø
+                           R12   00011AE0            72,416   A(SYSDATE ) + 000
080                                              Ø
+      R13   00011CB8            72,888   A(SYSDATE ) + 000258
                            Ø                                R14   50011C5E
+    1,342,250,078   A(SYSDATE ) + 0001FE
       áØ                                R15   00000000                 0
                                                                 Ø
+ 
                                           Ø
+              PARM DATA - YYY003
                      Ø -----------------------------------------------------
+ ---------------------------------------------------------------------Ù
 .Ø
                                                          Ø1           *****
+ DUMP READING - ABEND-AID DUMP CONTENT *****    Page 11

                                     Ø0     F.  Diagnostic Section: This sect
+ ion contains a textual
                Ø          description of the error. In addition, it normally
ñ contains a                                                              Ø
+        list of some of the common causes of the error. Very often,
                                                    Ø          one of the cau
+ ses will be the exact reason for your abend,
                               Ø          solving the problem without further
+  investigation!
          âØ
ä                                                                   Ø  -------
+ ---------------------------------  EXAMPLE OF THE DIAGNOSTIC SECTION  --------
------------------------------------          Ø
+                     **********************
                         Ø                                                  *
+  DIAGNOSTIC SECTION *
    çØ                                                  **********************
                                                             Ø
+ 
                                        Ø                                 S0C
+ 7, DATA EXCEPTION, IS CAUSED WHEN A COMPUTATIONAL-3
                   Ø                                 FIELD HAS AN INVALID DIG
<IT (NOT 0-9), OR ITS LAST BYTE                                                
+Ø                                 CONTAINS AN INVALID SIGN (NOT F, C, OR D).
                                                       Ø
+ 
                                  Ø                                 ---------
+ ----------------------------------------------
             Ø
ã                                                                      Ø
+                                               COBOL INFORMATION
                                                 Ø
+ 
                            Ø                                 THE DATA CAUSIN
+ G THE ERROR IS LOCATED IN PROGRAM
       áØ                                 ABNDCOB. IT IS REFERENCED AT DISPLAC
 EMENT 000 FROM THE                                              Ø
+                      START OF BLL CELL 02 IN THE LINKAGE-SECTION OF PROGRAM
                                           Ø
+ SYSDATE. THE FIELD CONTAINS X'120707'. REFER TO THE
                      Ø                                 DATA DIVISION MAP IN
+ THE PROGRAM LISTING TO LOCATE THE
 .Ø                                 FIELD NAME.
                                                          Ø -----------------
+ ------------------------------------------------------------------------------

---------------------------Ù         Ø
+ 
                Ø      G.  Specific Information: Information in this section
ñis seldom of                                                             Ø
+        much help in debugging a COBOL program problem. The machine
                                                    Ø          instruction wh
+ ich caused the abend is analyzed in detail.
                               Ø
+ 
          âØ  -------------------------------------  EXAMPLE OF SPECIFIC INFOR
äMATION  -------------------------------------------------          Ø
+                                            SPECIFIC
                                              Ø
+                      INFORMATION
                         Ø
+ 
    çØ                                        LOAD
                                                             Ø
+  ABSOLUTE  PROG     DISPL/ MODULE   DISPL/ DISPL/        MACHINE
                                        Ø                  ADDR    NAME     P
+ ROG   NAME      EPA    LOAD   LEN INSTRUCTION
                   Ø                00011C68  SYSDATE  000208 ABNDMAIN 00AE90
< 00AE90   6  FA22 9000 8000 - AP - ADD DECIMAL                                
+Ø
                                                       Ø
+                                                A-OPERAND (TO FIELD)
                                  Ø
+ 
             Ø                0000C19A  ABNDCOB  0053C2 ABNDMAIN 0053C2 0053C
ã2   3  90102C                                                         Ø
+ 
                                                 Ø
+                                          B-OPERAND (FROM FIELD)
                            Ø
+ 
       áØ                0000AB61  ABNDCOB  003D89 ABNDMAIN 003D89 003D89   3
  120707                                                         Ø
+                                                                #
                                           Ø
+                                      THE ABOVE FIELD IS IN ERROR
                      Ø
+                 # - SIGN IS INVALID
 .Ø
                                                          Ø -----------------
+ ------------------------------------------------------------------------------

---------------------------Ù         Ø
+ 
                Ø1           ***** DUMP READING - ABEND-AID DUMP CONTENT ****
ñ*    Page 12                                                             Ø0
+    H.  Call Trace Summary: This contains a chart of the calls from
                                                    Ø          program to pro
+ gram beginning with the call from the operating
                               Ø          system to your program, and continu
+ ing to the point of abend.
          âØ          Calls may be shown even if the called program successful
äly                                                                 Ø
+  returned to the calling program. Abend-AID will show the
                                              Ø          abending program by
+ an asterisk at the right, if possible.
                         Ø          Another important element of information
+ given here is the
    çØ          displace- ment to the return point of the calling program,
                                                             Ø          shown
+  in the return value column. This can be used to locate
                                        Ø          the CALL statement in the
+ calling COBOL program.
                   Ø
<                                                                              
+Ø  ----------------------------------------  EXAMPLE OF THE CALL TRACE SUMMARY
 --------------------------------------------          Ø
+                              **********************
                                  Ø
+         * CALL TRACE SUMMARY *
             Ø                                                  *************
ã*********                                                             Ø
+ 
                                                 Ø                         **
+ ****CALLING******     ***RETURN***            ******CALLED*******
                            Ø                         LOAD-MOD   PROGRAM
+  TYPE   VALUE            PROGRAM    LOAD-MOD
       áØ
                                                                 Ø
+              *SYSTEM                                  CALLS  ABNDCOB    ABNDMA
IN                                         Ø
+ 
                      Ø                         ABNDMAIN   ABNDCOB      DISP
+  00116C     CALLS  SYSDATE    ABNDMAIN  *
 .Ø
                                                          Ø
+        ABNDMAIN   SYSDATE      DISP  0001FE     CALLS  CVTDATE    ABNDMAIN

                                     Ø
+ 
                Ø                                                    ABENDING
ñ PROGRAM *                                                               Ø --
+ ------------------------------------------------------------------------------
------------------------------------------Ù         Ø
+ 
                               Ø      I.  Application Program Attributes: Att
+ ributes for the
          âØ          identifiable programs in the abending load module are fo
äund                                                                Ø
+  here, including the compile date, program length, and language
                                              Ø          used.
+ 
                         Ø
+ 
    çØ  ------------------------------------  EXAMPLE OF APPLICATION PROGRAM A
TTRIBUTES  ----------------------------------------          Ø
+              *****************************************************************
*                                       Ø                            *
+           APPLICATION PROGRAM ATTRIBUTES                 *
                   Ø                            *****************************
<*************************************                                         
+Ø
                                                       Ø
+        LOAD-MOD   PROGRAM   COMPILE DATE  LENGTH     LANGUAGE
                                  Ø
+ 
             Ø                            ABNDMAIN   ABNDCOB     11 APR 90
ã0053F9     VS COBOL II V1R3M0                                         Ø
+ 
                                                 Ø
+  ABNDMAIN   SYSDATE     11 APR 90   000429     VS COBOL II V1R3M0
                            Ø
+ 
       áØ                            ABNDMAIN   CVTDATE     12 APR 90   000084
      ASM H                                                      Ø -----------
+ ------------------------------------------------------------------------------
---------------------------------Ù         Ø
+ 
                      Ø1           ***** DUMP READING - ABEND-AID DUMP CONTEN
+ T *****    Page 13
 .Ø0     J.  Working-Storage Section: Abend-AID will print the
                                                          Ø          WORKING-
+ STORAGE SECTIONs of all COBOL programs it finds in the

                                     Ø          abending load module.  Note t
+ hat the addresses are printed so
                Ø          that they match the DMAP of your compile listing.
ñThis section                                                             Ø
+        will contain Working Storage broken down by BL CELL, and shows
                                                    Ø          the displaceme
+ nt (DSPL) at the left side, making it easy for
                               Ø          you to find a data item by getting
+ the BLW CELL and the
          âØ          displacement from the COBOL compile DMAP, and then findi
äng                                                                 Ø
+  that displacement under the display for the BLW CELL in the
                                              Ø          Abend-AID dump print
+ out.
                         Ø
+ 
    çØ  --------------------------------------  EXAMPLE OF WORKING STORAGE (PA
RTIAL)  -------------------------------------------          Ø
+                   **********************************************************
                                        Ø                                 *
+          DATA DIVISION OF PROGRAM ABNDCOB             *
                   Ø                                 *         COMPILED ON  0
<4/04/90    AT  14.55.57          *                                            
+Ø                                 *
            *                                          Ø
+             *   VS COBOL II EXECUTION / DEBUGGING OPTIONS IN EFFECT  *
                                  Ø                                 *
+                                                 *
             Ø                                 *   NOADV       NOFDUMP
ã     NORENT        TRUNC   *                                          Ø
+                            *     DATA(31)    OPTIMIZE         NORESIDENT    ZW
B     *                                          Ø
+       *   NODYNAM       OUTDD(SYSOUT  )    SSRANGE             *
                            Ø                                 *     FASTSRT
+  NOPFDSGN           NOTEST                *
       áØ                                 ************************************
 **********************                                          Ø
+ 
                                           Ø       WORKING STORAGE REFERENCED
+  BY BLW CELL   0
                      Ø   DSPL ADDRESS  --------------------------------- DAT
+ A ---------------------------------
 .Ø  00000 00008FC8 C4E4D4D7 C3D3C1E2 40E6D6D9 D2C9D5C7  40E2E3D6 D9C1C7C5 40E
2E3C1 D9E3E240 DUMPCLAS WORKING STORAGE STARTS            Ø  00020 00008FE8 C
+ 8C5D9C5 00000000 000C0000 00000000  030C0000 00000000 F5F70000 00000000 HERE..

..................57......           Ø  00040 00009008 00147C00 00000000 0000
+ 0000 00000000  00123456 7C000000 00000000 00000000 ...........................
.....           Ø  00060 00009028 00000000 00000000 00000000 00000000  000000
ñ00 00000000 00000000 00000000 ................................           Ø
+            LINES 00009048-00009F88 SAME AS ABOVE
                                                    Ø  00FE0 00009FA8 0000000
+ 0 00000000 00000000 00000000  00000000 00000000 00000000 00000000 ............
....................           Ø
+ 
          âØ       WORKING STORAGE REFERENCED BY BLW CELL   1
ä                                                                   Ø   DSPL A
+ DDRESS  --------------------------------- DATA -------------------------------
--                                            Ø  00000 00009FC8 00000000 0000
+ 0000 00000000 00000000  00000000 00000000 00000000 00000000 ..................
..............           Ø              LINES 00009FE8-0000A3A8 SAME AS ABOVE
+ 
    çØ  00400 0000A3C8 00000000 00000000 00000000 00000000  00000000 00000000
00000000 31470CC2 ...............................B           Ø --------------
+ ------------------------------------------------------------------------------
------------------------------Ù         Ø
+ 
                   Ø1           ***** DUMP READING - ABEND-AID DUMP CONTENT *
<****    Page 14                                                               
+Ø0     K.  Supporting data: this area contains a listing of fields you
                                                       Ø          may need to
+  find data passed by a calling program (BLL CELLS),
                                  Ø          or the content of tables (INDEX
+ CELLS). Since these fields may
             Ø          be listed for you, it will save looking them up in th
ãe Task                                                                Ø
+     Global Table (TGT).
                                                 Ø
+ 
                            Ø  ---------------------------------------------
+  EXAMPLE OF SUPPORTING DATA -----------------------------------------------
       áØ                                                      SUPPORTING DATA
                                                                 Ø
+ 
                                           Ø
+                  CONTENTS OF BLW CELLS
                      Ø
+ 
 .Ø                             BLW   0 - 00008FC8     BLW   1 - 00009FC8
BLW   2 - 0000AFC8                                        Ø
+            BLW   3 - 0000BFC8

                                     Ø
+ 
                Ø                                                  CONTENTS O
ñF BLL CELLS                                                              Ø
+ 
                                                    Ø
+      BLL   0 - 00000000
                               Ø
+ 
          âØ                                                  CONTENTS OF BLF
äCELLS                                                              Ø
+ 
                                              Ø                             B
+ LF   0 - 000228D0     BLF   1 - 0001D640     BLF   2 - 00008F40
                         Ø
+ 
    çØ                                                 CONTENTS OF INDEX CELLS
                                                             Ø
+ 
                                        Ø                             IDX   1
+  - 00000188     IDX   3 - 00000000     IDX   5 - 00000000
                   Ø                             IDX   7 - 00000000     IDX
< 9 - 00000306                                                                 
+Ø -----------------------------------------------------------------------------
---------------------------------------------Ù         Ø
+ 
                                  Ø      L.  COBOL Task Global Table: The Tas
+ k Global Table (TGT) will be
             Ø          printed for each COBOL program found in the load modu
ãle, if                                                                Ø
+     Abend-AID feels it may be of help in solving the problem.
                                                 Ø          This listing show
+ s displacement from the start of the TGT, the
                            Ø          actual address in virtual memory, and
+ the data content of the
       áØ          TGT. The fields in the TGT are not identified, however, and
                                                                 Ø          th
+ e TGT printout in the COBOL program compile listing must be
                                           Ø          used to find fields of
+ interest.
                      Ø
+ 
 .Ø  ------------------------------------------  EXAMPLE OF TASK GLOBAL TABLE
 -----------------------------------------------          Ø
+                                 TASK GLOBAL TABLE (TGT)

                                     Ø   DSPL ADDRESS  ----------------------
+ ----------- DATA ---------------------------------
                Ø  00000 00008870 00108001 00005FA8 0001D720 6000866C  0000D7
ñ28 00000001 00006902 000228D0 ..........P.-.....P.............           Ø  0
+ 0020 00008890 0000036C 00015EA0 5000845A 00008F40  00007200 0001D640 00008FC8
000062B4 ............... ......O ...H....           Ø  00040 000088B0 0000814
+ E 00006298 C3F2E3C7 E34EF4F8  02000000 65118020 0001CCC8 00015EA0 ...+....C2TG
T+48...........H....           Ø  00060 000088D0 00000000 00000003 000031D5 0
+ 0000000  00000000 0001D6A8 00000000 00000000 ...........N..........O.........
          âØ  00080 000088F0 00000000 00000000 30300000 00000000  0000000E 000
ä00000 E2E8E2D6 E4E34040 ........................SYSOUT             Ø  000A0 0
+ 0008910 C9C7E9E2 D9E3C3C4 00000000 00000000  00000000 00000000 00000000 000000
00 IGZSRTCD........................           Ø  000C0 00008930 00000000 0000
+ 0000 00000000 00000000  00000000 00000000 00000000 00000000 ..................
..............           Ø  000E0 00008950 00000000 00000000 00000000 0000000
+ 1  00008A98 00000000 0000677E 00000000 ...........................=....
    çØ  00100 00008970 00006218 000062C0 000089FC 000062AC  00008A8C 00008FC8
00000000 40404040 .......................H....               Ø  00120 0000899
+ 0 40404040 40404040 40404040 40404040  40404040 40404040 0000C1A0 00008FC8
                     ..A....H           Ø  00140 000089B0 00009FC8 0000AFC8 0
+ 000BFC8 00000000  000228D0 0001D640 00008F40 00000000 ...H...H...H..........O
... ....           Ø  00160 000089D0 00000000 00000000 00000000 00000000  000
<00000 00000000 00000000 00000000 ................................             
+Ø  00180 000089F0 00000000 00000000 00000000 000070E4  00007200 50008442 000077
A2 00007930 ...............U................           Ø  001A0 00008A10 0000
+ 7A7A 00007B28 00007CA0 00007DEE  00007F2A 0000806A 0000816A 000082AE .........
.....'.................           Ø  001C0 00008A30 000083DC 00000188 0000000
+ 0 00000000  00000000 00000306 00000000 00000000 ..............................
..           Ø  001E0 00008A50 00000000 00000000 00000000 00000000  00000000
ã00000000 00000000 00000000 ................................           Ø -----
+ ------------------------------------------------------------------------------
---------------------------------------Ù         Ø
+ 
                            Ø1           ***** DUMP READING - ABEND-AID DUMP
+ CONTENT *****    Page 15
       áØ0     M.  Program Storage: This section may not be present. If presen
 t,                                                              Ø          it
+  will contain the program instructions for your program,
                                           Ø          and/or any non- COBOL p
+ rograms which had been called by your
                      Ø          program, and had not successfully returned.
+ Information here
 .Ø          is of little value in debugging a COBOL program.
                                                          Ø
+ 

                                     Ø  -------------------------------------
+ ------- EXAMPLE OF PROGRAM STORAGE -------------------------------------------
------          Ø                                           *****************
ñ*********************                                                    Ø
+                                         * PROGRAM STORAGE FOR CSECT CVTDATE  *
                                                    Ø
+                    * LOCATED IN LOAD MODULE ABNDMAIN    *
                               Ø                                           *
+ LANGUAGE IS ASM H                  *
          âØ                                           ***********************
ä***************                                                    Ø   DSPL A
+ DDRESS  --------------------------------- DATA -------------------------------
--                                            Ø  00000 00011E90 90ECD00C 183F
+ 41F0 301850FD 000850DF  000418DF 47F03060 00000000 00011CB8 .......0..........
...0.-........           Ø  00020 00011EB0 00000000 00000000 00000000 0000000
+ 0  00000000 00000000 00000000 00000000 ................................
    çØ              LINES 00011ED0-00011ED0 SAME AS ABOVE
                                                             Ø  00060 00011EF
+ 0 58410000 58100010 F8224000 103958DD  000498EC D00C1BFF 07FE0000 00000000 ...
.....8. .....................           Ø  00080 00011F10 00000000
+                                                       ....
                   Ø --------------------------------------------------------
<------------------------------------------------------------------Ù           
+Ø
                                                       Ø      N.  File Inform
+ ation: For each open file Abend-AID will provide
                                  Ø          you with important information,
+ including the DDNAME, DCB
             Ø          parameters (RECFM, LRECL, BLKSIZE), block counts, and
ã the                                                                  Ø
+     current record. This information can be very important in I/O
                                                 Ø          related problems.
+ 
                            Ø
+ 
       áØ  ---------------------------------------  EXAMPLE OF FILE INFORMATIO
 N ----------------------------------------------------          Ø
+                      DATA MANAGEMENT CONTROL BLOCKS FOR DDNAME - READER1
                                           Ø
+ 
                      Ø  IOB STANDARD SECTION
+ 
 .Ø  00000 00005840 02000000 0000583C 00000000 00000000  00000000 00008AD0 000
00000 00000000 ................................           Ø  00020 00005860 0
+ 0000008 40000B0A 06024FE0 A0001810  00000000 00000000 00000000 00000000 .... .

..........................           Ø
+ 
                Ø  IOB5
ñ                                                                         Ø  I
+ OB PREFIX
                                                    Ø  00000 00005760 010057A
+ 8 00000000                                                        ........
                               Ø  IOB STANDARD SECTION
+ 
          âØ  00000 00005768 02000000 00005764 00000000 00000000  00000000 000
ä08AD0 00000000 00000000 ................................           Ø  00020 0
+ 0005788 00000008 40000B08 060207B0 A0001810  00000000 00000000 00000000 000000
00 .... ...........................           Ø
+ 
                         Ø  UCB
+ 
    çØ  00000 00F9B3E8 018AFF8C 03410000 00F9B488 00F3F4F1  3030200E 00F9B398
33630100 E3E2D6E6 .........9...341.....9......TSOW           Ø  00020 00F9B40
+ 8 D2F10433 00000052 28688000 00C3F8C0  00000000 00000000 DC000A60 0A6D2323 K1.
..........C8............-....           Ø
+ 
                   Ø  PREVIOUS RECORD
<                                                                              
+Ø  00022880   CHAR  21300CTL2
                                                       Ø             ZONE  FF
+ FFFCEDF444444444444444444444444444444444444444444444444444444444444444
                                  Ø            DIGIT  213003332000000
+ 000000000000000000000000000000000000000000000000000000000
             Ø                   1...5...10....*...20....*...30....*...40....
ã*...50....*...60....*...70....*...80                                  Ø
+ 
                                                 Ø  CURRENT RECORD
+ 
                            Ø  000228D0   CHAR  21478BKS7
+ 
       áØ             ZONE  FFFFFCDEF444444444444444444444444444444444
 444444444444444444444444444444                                  Ø
+ DIGIT  214782227000000000000000000000000000000000000000000000000000000
000000000                                  Ø                   1...5...10....
+ *...20....*...30....*...40....*...50....*...60....*...70....*...80
                      Ø -----------------------------------------------------
+ ---------------------------------------------------------------------Ù
 .Ø
                                                          Ø1      ***** DUMP
+ READING - COMPILE AND LINKEDIT CONTENTS *****  Page 16

                                     Ø0  IV. COBOL Compile and Link-Edit List
+ ing Contents.
                Ø
ñ                                                                         Ø
+     A. Header Section: This is the first page of the COBOL Compile
                                                    Ø          listing.  It c
+ ontains the date and time compiled, and
                               Ø          compiler/optimizer options used.
+ 
          âØ
ä                                                                   Ø  -------
+ --------------------------------------  EXAMPLE OF COMPILE HEADER  -----------
------------------------------------          Ø  PP 5668-958 IBM VS COBOL II
+ Release 3.0 09/13/88                           Date 04/04/90  Time 14:55:57
Page     1               Ø  Invocation parameters:
+ 
    çØ  APOST,OBJECT,MAP,OFFSET,NOCOMPILE(S),BUFSIZE(12288),NOADV,FASTSRT,OPTI
MIZE,SSRANGE,XREF,LIB                                        Ø  Options in ef
+ fect:
                                        Ø      NOADV
+ 
                   Ø        APOST
<                                                                              
+Ø      NOAWO
                                                       Ø        BUFSIZE(12288
+ )
                                  Ø      NOCMPR2
+ 
             Ø        DATA(31)
ã                                                                      Ø
+ NODECK
                                                 Ø      NODUMP
+ 
                            Ø      NODYNAM
+ 
       áØ      NOEXIT
                                                                 Ø      NOFDUM
+ P
                                           Ø        FLAG(I)
+ 
                      Ø      NOFLAGMIG
+ 
 .Ø      NOFLAGSAA
                                                          Ø      NOFLAGSTD
+ 

                                     Ø        LANGUAGE(EN)
+ 
                Ø        LIB
ñ                                                                         Ø
+      LINECOUNT(60)
                                                    Ø      NOLIST
+ 
                               Ø        MAP
+ 
          âØ      NONAME
ä                                                                   Ø      NON
+ UMBER
                                              Ø        NUMPROC(NOPFD)
+ 
                         Ø        OBJECT
+ 
    çØ        OFFSET
                                                             Ø        OPTIMIZ
+ E
                                        Ø      NORENT
+ 
                   Ø      NORESIDENT
<                                                                              
+Ø        SIZE(MAX)
                                                       Ø        SOURCE
+ 
                                  Ø        SPACE(1)
+ 
             Ø        SSRANGE
ã                                                                      Ø
+ NOTEST
                                                 Ø        TRUNC(STD)
+ 
                            Ø      NOVBREF
+ 
       áØ      NOWORD
                                                                 Ø        XREF
+ 
                                           Ø        ZWB
+ 
                      Ø -----------------------------------------------------
+ ---------------------------------------------------------------------Ù
 .Ø
                                                          Ø1      ***** DUMP
+ READING - COMPILE AND LINKEDIT CONTENTS *****  Page 17

                                     Ø0      B. Data Name Cross Reference. Th
+ is shows a cross reference to the
                Ø          data names in the program. If XREF(SHORT) is speci
ñfied, only                                                               Ø
+        the data fields referenced in the program are shown. This can
                                                    Ø          result in a mu
+ ch shorter listing. Information shown includes
                               Ø          the line on which the data item is
+ defined, its name, and all
          âØ          references to it.  If a reference modifies the item, the
ä line                                                              Ø
+  number is preceded by the letter M.shown at right is as
                                              Ø          printed by the CA-Op
+ timizer product. It would be found at the
                         Ø          end of the compile listing in the DMAP, i
+ f the Optimizer is
    çØ          not used.
                                                             Ø
+ 
                                        Ø  ----------------------------------
+ ----  EXAMPLE OF DATA NAME CROSS REFERENCE -----------------------------------
---------          Ø  An "M" preceding a data-name reference indicates that t
<he data-name is modified by this reference.                                   
+Ø
                                                       Ø  Defined   Cross-ref
+ erence of data names   References
                                  Ø
+ 
             Ø       72   CNTL-VALUE1. . . . . . . . . .  169 170 171 172 173
ã 174 175 176 177 245                                                  Ø
+  73   CNTL-VALUE2. . . . . . . . . .  178 179 180 181 182 183 184 185 186 245
                                                 Ø       85   CONTROL-CHAR .
+ . . . . . . . .  M144 370 M375
                            Ø       68   CONTROL-REC. . . . . . . . . .  155
+ 
       áØ      133   CUR-DATE . . . . . . . . . . .  145
                                                                 Ø      127
+ DATE-AREAS
                                           Ø      115   DESCRIP-1. . . . . .
+ . . . . .  M392
                      Ø      124   DESCRIP-2. . . . . . . . . . .  M404
+ 
 .Ø      119   DESCRIP-3. . . . . . . . . . .  M419
                                                          Ø      137   END-DA
+ TE . . . . . . . . . . .  145 M230 233 234 M247 250 251 M263 265 266 287 288 M

298 300 301 310 M312 314             Ø
+      315 M324 326 327 M336 338 339 M348 350 351 M360 362 363
                Ø       48   ENT-DESC1. . . . . . . . . . .  392
ñ                                                                         Ø
+     53   ENT-DESC2. . . . . . . . . . .  404
                                                    Ø       57   ENT-DESC3. .
+  . . . . . . . . .  419
                               Ø       44   ENT-NBR. . . . . . . . . . . .  3
+ 89 401 416
          âØ       49   ENT-NBR1 . . . . . . . . . . .  395 396
ä                                                                   Ø       54
+    ENT-NBR2 . . . . . . . . . . .  407 408
                                              Ø       58   ENT-NBR3 . . . . .
+  . . . . . .  420 421
                         Ø       47   ENT-VAL1 . . . . . . . . . . .  393 394
+ 
    çØ       52   ENT-VAL2 . . . . . . . . . . .  405 406
                                                             Ø      104   ENT
+ RY-WORK . . . . . . . . . .  M234 M235 236 M251 M252 253 M262 M266 267 M288 28
9 M301 302 M311 M315 316 M327           Ø
+         328 M339 340 M351 352 M363 364
                   Ø       84   EXCEPTION-PRT. . . . . . . . .  M143 M370 M37
<2                                                                             
+Ø      110   HOLD-AREA-1
                                                       Ø      126   HOLD-AREA
+ -2
                                  Ø      106   I. . . . . . . . . . . . . . .
+   M228 M229 230 236 289 M295 298 302 M322 M323 324 328 M334 M335 340 M346 M347
             Ø                                            352 M358 M359 364
ã                                                                      Ø
+ 113   INDX1
                                                 Ø      113   IX1. . . . . .
+ . . . . . . . .  M159 M160 M170 M179 221 M231 233 277 285 M286 287 M299 300 M3
25 326 362 M391             Ø      122   IX2. . . . . . . . . . . . . .  M163
+  M164 M173 M182 235 M248 277 M403 404 406 408
       áØ      118   IX3. . . . . . . . . . . . . .  M167 M168 M176 M185 M264
 265 M313 314 M337 338 M349 M361 M418 419 421                    Ø      108
+ J
                                           Ø      128   JUL-DATE . . . . . .
+ . . . . .  145
                      Ø       99   LINE-COUNT . . . . . . . . . .  M261 262 M
+ 371 373 M374
 .Ø --------------------------------------------------------------------------
------------------------------------------------Ù         Ø
+ 

                                     Ø1      ***** DUMP READING - COMPILE AND
+  LINKEDIT CONTENTS *****  Page 18
                Ø0      C. Procedure Name Cross-Reference. All Procedure (par
ñagraph and                                                               Ø
+        section) names are shown in alphabetic order with the line
                                                    Ø          number of the
+ statement where the name is defined, the
                               Ø          procedure name, and the line number
+ s of all statements
          âØ          referring to this name. Each reference is preceded by a
äletter                                                             Ø
+  showing whether the reference is an ALTER (A), a GO TO
                                              Ø          DEPENDING ON (D), th
+ e end of a PERFORM range (E), a simple GO
                         Ø          TO (G), a PERFORM (P), or others. A legen
+ d is provided to show
    çØ          the meanings of the letters used.
                                                             Ø  -------------
+ --------- EXAMPLE OF PROCEDURE NAME CROSS REFERENCE --------------------------
------------------------------          Ø  Context usage is indicated by the
+ letter preceding a procedure-name reference.
                   Ø  hese letters and their meanings are:
<                                                                              
+Ø     A = ALTER (procedure-name)
                                                       Ø     D = GO TO (proce
+ dure-name) DEPENDING ON
                                  Ø     E = End of range of (PERFORM) through
+  (procedure-name)
             Ø     G = GO TO (procedure-name)
ã                                                                      Ø     P
+  = PERFORM (procedure-name)
                                                 Ø     T = (ALTER) TO PROCEED
+  TO (procedure-name)
                            Ø     U = USE FOR DEBUGGING (procedure-name)
+ 
       áØ
                                                                 Ø  Defined
+ Cross-reference of procedures   References
                                           Ø
+ 
                      Ø      398   CHECK-TABLE2 . . . . . . . . .  G388
+ 
 .Ø      410   CHECK-TABLE3 . . . . . . . . .  G400
                                                          Ø      427   END-OF
+ -JOB . . . . . . . . . .  G153

                                     Ø      376   EXIT-PRT . . . . . . . . .
+ . .  E156 E386 E414
                Ø      423   EXIT-TL. . . . . . . . . . . .  E146 G383
ñ                                                                         Ø
+    227   PARA1. . . . . . . . . . . . .  P188
                                                    Ø      345   PARA10 . . .
+  . . . . . . . . .  P218
                               Ø      357   PARA11 . . . . . . . . . . . .  P
+ 222
          âØ      241   PARA2. . . . . . . . . . . . .  P191
ä                                                                   Ø      272
+    PARA4. . . . . . . . . . . . .  P197
                                              Ø      282   PARA5. . . . . . .
+  . . . . . .  P200
                         Ø      294   PARA6. . . . . . . . . . . . .  P203
+ 
    çØ      321   PARA8. . . . . . . . . . . . .  P212
                                                             Ø      333   PAR
+ A9. . . . . . . . . . . . .  P215
                                        Ø      369   PRINT-ROUTINE. . . . . .
+  . . .  P156 P386 P414
                   Ø      237   P1-EXIT. . . . . . . . . . . .  E188
<                                                                              
+Ø      353   P10-EXIT . . . . . . . . . . .  E218
                                                       Ø      365   P11-EXIT
+ . . . . . . . . . . .  E222
                                  Ø      254   P2-EXIT. . . . . . . . . . . .
+   E191
             Ø      278   P4-EXIT. . . . . . . . . . . .  E197
ã                                                                      Ø
+ 290   P5-EXIT. . . . . . . . . . . .  E200
                                                 Ø      317   P7-EXIT. . . .
+ . . . . . . . .  E206 E209
                            Ø      329   P8-EXIT. . . . . . . . . . . .  E212
+ 
       áØ      150   READ-TRAN. . . . . . . . . . .  G189 G192 G195 G198 G201
 G204 G207 G210 G213 G216 G219 G223                              Ø      380
+ TABLE-LOAD . . . . . . . . . .  P146 G397 G409 G422
                                           Ø  EXTERNAL   COBABEND . . . . . .
+  . . . . .  415
                      Ø  EXTERNAL   SYSDAT . . . . . . . . . . . .  265 326
+ 
 .Ø  EXTERNAL   SYSDATE. . . . . . . . . . . .  145 233 250 287 300 314 338 35
0 362                                                     Ø -----------------
+ ------------------------------------------------------------------------------

---------------------------Ù         Ø
+ 
                Ø1      ***** DUMP READING - COMPILE AND LINKEDIT CONTENTS **
ñ***  Page 19                                                             Ø0
+     D. Data Division Map. Here is the detailed analysis of the Data
                                                    Ø          Map, showing a
+ ll data items in the order of definition. The
                               Ø          defining line number, data name, ba
+ se locator or index number,
          âØ          displacement from the base, data type, and other informa
ätion                                                               Ø
+  are shown.
                                              Ø
+ 
                         Ø  -------------------------  EXAMPLE OF THE DATA DI
+ VISION MAP -----------------------------------------------------------------
    çØ  Data Division Map
                                                             Ø  Data Definiti
+ on Attribute codes (rightmost column) have the following meanings:
                                        Ø     D = Object of OCCURS DEPENDING
+    G = GLOBAL                             S = Spanned file
                   Ø     E = EXTERNAL                      O = Has OCCURS cla
<use                  U = Undefined format file                                
+Ø     F = Fixed length file             OG= Group has own length definition
V = Variable length file                               Ø     FB= Fixed length
+  blocked file     R = REDEFINES                          VB= Variable length b
locked file                       Ø  Source   Hierarchy and
+                   Base       Hex-Displacement  Asmblr Data                  Da
ta Def       Ø  LineID   Data Name                                        Loc
ãator    Blk   Structure   Definition    Data Type      Attribut       Ø
+ 2  PROGRAM-ID ABNDCOB --------------------------------------------------------
-----------------------------------------        Ø     63   FD TRAN-FILE . .
+ . . . . . . . . . . . . . . . .            001                             QSA
M           F               Ø     68   01 CONTROL-REC . . . . . . . . . . . .
+  . . . . . BLF=0001   000               DS 0CL80      Group
       áØ     69     02 REC-TYPE. . . . . . . . . . . . . . . . . . BLF=0001
  000   0 000 000   DS 2C         Display                        Ø     70
+ 02 TBL1-ID . . . . . . . . . . . . . . . . . . BLF=0001   002   0 000 002   DS
 1C         Display                        Ø     71     02 TBL2-ID . . . . .
+ . . . . . . . . . . . . . BLF=0001   003   0 000 003   DS 1C         Display
                      Ø     72     02 CNTL-VALUE1 . . . . . . . . . . . . . .
+  . . BLF=0001   004   0 000 004   DS 5C         Disp-Num
 .Ø     73     02 CNTL-VALUE2 . . . . . . . . . . . . . . . . BLF=0001   009
 0 000 009   DS 5C         Disp-Num                       Ø     74     02 FIL
+ LER. . . . . . . . . . . . . . . . . . . BLF=0001   00E   0 000 00E   DS 66C

      Display                        Ø     78   FD PRT-FILE. . . . . . . . .
+ . . . . . . . . . .            001                             QSAM
FB              Ø     84   01 EXCEPTION-PRT . . . . . . . . . . . . . . . . B
ñLF=0002   000               DS 0CL133     Group                          Ø
+   85     02 CONTROL-CHAR. . . . . . . . . . . . . . . . BLF=0002   000   0 000
 000   DS 1C         Disp-Num                       Ø     86     02 PRINT-LIN
+ E. . . . . . . . . . . . . . . . . BLF=0002   001   0 000 001   DS 0CL132
Group                          Ø     87       03 PRT-REASON. . . . . . . . .
+ . . . . . . . BLF=0002   001   0 000 001   DS 20C        Display
          âØ     88       03 FILLER. . . . . . . . . . . . . . . . . . BLF=000
ä2   015   0 000 015   DS 3C         Display                        Ø     89
+      03 PRT-RECD. . . . . . . . . . . . . . . . . BLF=0002   018   0 000 018
 DS 80C        Display                        Ø     95   77 FILLER. . . . . .
+  . . . . . . . . . . . . . . BLW=0000   000               DS 36C        Displa
y                        Ø     97   77 PAGE-NO . . . . . . . . . . . . . . .
+ . . . . BLW=0000   028               DS 2P         Packed-Dec
    çØ     99   77 LINE-COUNT. . . . . . . . . . . . . . . . . . BLW=0000   03
0               DS 2P         Packed-Dec                     Ø    101   77 SU
+ B-1 . . . . . . . . . . . . . . . . . . . . BLW=0000   038               DS 2C
         Disp-Num                       Ø    102   77 SUB-2 . . . . . . . . .
+  . . . . . . . . . . . BLW=0000   040               DS 3P         Packed-Dec
                   Ø    104   77 ENTRY-WORK. . . . . . . . . . . . . . . . .
<. BLW=0000   050               DS 5P         Packed-Dec                       
+Ø    106   77 I . . . . . . . . . . . . . . . . . . . . . . BLW=0000   058
          DS 2C         Disp-Num                       Ø    107   77 N . . .
+ . . . . . . . . . . . . . . . . . . . BLW=0000   060               DS 3P
   Packed-Dec                     Ø    108   77 J . . . . . . . . . . . . . .
+  . . . . . . . . BLW=0000   068               DS 4C         Index
             Ø    110   01 HOLD-AREA-1 . . . . . . . . . . . . . . . . . BLW=
ã0000   078               DS 5000C      Display                        Ø    11
+ 1   01 TABLES-AREA . . . . . . . . . . . . . . . . . BLW=0001   400
    DS 0CL2618    Group                          Ø    112     02 TABLE1. . .
+ . . . . . . . . . . . . . . . . BLW=0001   400   0 000 000   DS 0CL7       Gro
up          O               Ø    113        IX1 . . . . . . . . . . . . . . .
+  . . . . . IDX=0001   000                             Index-Name
       áØ    113        INDX1 . . . . . . . . . . . . . . . . . . . IDX=0002
  000                             Index-Name                     Ø    114
+   03 TABLE1-VALUE. . . . . . . . . . . . . . . BLW=0001   400   0 000 000   DS
 3P         Packed-Dec                     Ø    116       03 NUMBER-1. . . .
+ . . . . . . . . . . . . . BLW=0001   406   0 000 006   DS 1C         Disp-Num
                      Ø    117     02 TABLE3. . . . . . . . . . . . . . . . .
+  . . BLW=0001   5CE   0 000 1CE   DS 0CL8       Group          O
 .Ø    118        IX3 . . . . . . . . . . . . . . . . . . . . IDX=0003   000
                           Index-Name                     Ø    119       03 D
+ ESCRIP-3 . . . . . . . . . . . . . . . . BLW=0001   5CE   0 000 1CE   DS 3C

      Display                        Ø --------------------------------------
+ ------------------------------------------------------------------------------
----------Ù     Ø
ñ                                                                         Ø1
+     ***** DUMP READING - COMPILE AND LINKEDIT CONTENTS *****  Page 20
                                                    Ø0      E. Program Global
+  Table. This area, including the Constant Global
                               Ø          Table contains little of value in m
+ ost debugging situations.
          âØ
ä                                                                   Ø  -------
+ ----------------- EXAMPLE OF PROGRAM and CONSTANT GLOBAL TABLES --------------
----------------------------------------      Ø  PROGRAM GLOBAL TABLE BEGINS
+ AT LOCATION 000080 FOR 00001C BYTES
                         Ø  THE PGT CONTAINS 000001 CELL(S) FOR ADDRESSABILIT
+ Y TO THE CGT
    çØ  PBL1    AT LOCATION 000EF8 FOR LINE 2
                                                             Ø  PBL2    AT LO
+ CATION 001F36 FOR LINE 340
                                        Ø  LITERAL POOL MAP FOR SYSTEM LITERA
+ LS IN THE PGT:
                   Ø  000080  (LIT+0)      00002710 40404040 40404040 0C
<                                       ]....        .                         
+Ø
                                                       Ø  CONSTANT GLOBAL TAB
+ LE BEGINS AT LOCATION 00009C FOR 000C4F BYTES
                                  Ø  LITERAL POOL MAP FOR LITERALS IN THE CGT
+ :
             Ø
ã                                                                      Ø  0000
+ E0  (LIT+0)      00000560 FFFFFFF8 FFFFFFFA 0000030C FFFFFFF9 000001CE 0000000
1 00080006  ]...-...8...........9.........       Ø  000100  (LIT+32)     0007
+ 0003 E3C1C2D3 C540C6C9 D3C540D9 C5C3D6D9 C4C5D9D9 D6D940C9 D540E3C1  ]....TABL
E FILE RECORDERROR IN       Ø  000120  (LIT+64)     C2D3C5E2 C3D6D5E3 D9D6D34
+ 0 D9C5C3D6 D9C4C1C2 D5C4C3D6 C240F0F0 F0F4F2F1  ]BLESCONTROL RECORDABNDCOB 000
       áØ  000140  (LIT+96)     F0F0F0F4 F1F9F0F0 F0F4F1F7 F0F0F0F4 F0F8F0F0 F
 0F4F0F6 F0F0F0F4 F0F4F0F0  ]00041900041700040800040600040       Ø  000160  (L
+ IT+128)    F0F4F0F2 F0F0F0F3 F9F6F0F0 F0F3F9F4 F0F0F0F3 F9F2F0F0 F0F3F9F0 F0F0
F0F3  ]04020003960003940003920003900       Ø  000180  (LIT+160)    F6F4F0F0 F
+ 0F3F6F2 F0F0F0F3 F6F0F0F0 F0F3F5F2 F0F0F0F3 F5F0F0F0 F0F3F4F8  ]640003
000352000350000       Ø  0001A0  (LIT+192)    F0F0F0F3 F4F0F0F0 F0F3F3F8 F0F0
+ F0F3 F2F8F0F0 F0F3F2F6 F0F0F0F3 F2F4F0F0  ]00034000033800032800032600032
 .Ø  0001C0  (LIT+224)    F0F3F1F6 F0F0F0F3 F1F4F0F0 F0F3F1F2 F0F0F0F3 F0F2F0F
0 F0F3F0F0 F0F0F0F2  ]03160003140003120003020003000       Ø  0001E0  (LIT+256
+ )    F9F8F0F0 F0F2F8F9 F0F0F0F2 F8F7F0F0 F0F2F8F5 F0F0F0F2 F7F7F0F0 F0F2F6F7

]98000289000287000285000277000       Ø  000200  (LIT+288)    F0F0F0F2 F6F5F0F
+ 0 F0F2F6F3 E3C1C2D3 C5F3F0F0 F0F2F5F3 F0F0F0F2 F5F2F0F0  ]000265000263TABLE300
025300025       Ø  000220  (LIT+320)    F0F2F4F7 F0F0F0F2 F3F6F0F0 F0F2F3F5 E
ñ3C1C2D3 C5F2F0F0 F0F2F3F3 F0F0F0F2  ]0247000236000235TABLE20002330       Ø --
+ ------------------------------------------------------------------------------
----------------------------------------------Ù     Ø
+ 
                               Ø       F. Condensed Procedure Listing. This a
+ rea is of critical
          âØ          importance in locating the PROCEDURE DIVISION statement
äwhere                                                              Ø
+  an abend occurred. It is produced only if the OFFSET option is
                                              Ø          selected via the PAR
+ M field of the EXEC statement for the
                         Ø          compile. The listing is neatly hidden imm
+ ediately after the
    çØ          CONSTANT GLOBAL TABLE and contains one line for each PROCEDURE
                                                             Ø          DIVIS
+ ION statement that contains a COBOL verb. The line
                                        Ø          number, hex displacement f
+ rom the beginning of the program,
                   Ø          and the first verb on the statement are display
<ed.                                                                           
+Ø
                                                       Ø  -------------------
+ ----------------- EXAMPLE OF THE CONDENSED PROCEDURE LISTING -----------------
----------------------------      Ø  LINE #  HEXLOC  VERB
+     LINE #  HEXLOC  VERB                        LINE #  HEXLOC  VERB
             Ø  000142 000F62 OPEN                          000143 000F92 MOV
ãE                          000144 000FA0 MOVE                         Ø  0001
+ 45 000FA4 CALL                          000146 000FD8 PERFORM
      000151 000FEC READ                         Ø  000153 00102E GO
+                    000154 001036 MOVE                          000155 001046 M
OVE                         Ø  000156 00104C PERFORM                       00
+ 0157 001060 MOVE                          000158 001066 ADD
       áØ  000159 00106C SET                           000160 001072 SET
                      000161 001078 MOVE                         Ø  000162 001
+ 07E ADD                           000163 001084 SET
000164 00108A SET                          Ø  000165 001090 MOVE
+              000166 001096 ADD                           000167 0010AC SET
                      Ø  000168 0010B2 SET                           000169 0
+ 010B8 IF                            000170 0010DA SET
 .Ø  000171 0010EE MOVE                          000172 0010F8 IF
               000173 001116 SET                          Ø  000174 00112A MO
+ VE                          000175 001136 IF                            000176

 001154 SET                          Ø  000177 001168 MOVE
+        000178 001174 IF                            000179 001192 SET
                Ø  000180 0011A6 MOVE                          000181 0011B0
ñIF                            000182 0011CE SET                          Ø  0
+ 00183 0011E2 MOVE                          000184 0011EE IF
         000185 00120C SET                          Ø  000186 001220 MOVE
+                       000187 00122E IF                            000188 00123
8 PERFORM                      Ø  000189 001248 GO
+  000190 001250 IF                            000191 00125A PERFORM
          âØ -----------------------------------------------------------------
ä-------------------------------------------------------------Ù     Ø
+ 
                                              Ø1      ***** DUMP READING - CO
+ MPILE AND LINKEDIT CONTENTS *****  Page 21
                         Ø0      G. TGT Memory Map. Prior to COBOL II, this w
+ as an important area
    çØ          for debugging, as it was required to permit location of INDEX
                                                             Ø          CELLS
+  and BLL CELLS. Abend-Aid shows these fields directly in
                                        Ø          the SUPPORTING DATA sectio
+ n now, however, so the TGT is more
                   Ø          of intrerest than of real value.
<                                                                              
+Ø
                                                       Ø  -------------------
+ ------------------------------------------------------------------------------
----------------------------      Ø                    *** TGT MEMORY MAP ***
+ 
             Ø            PGMLOC  TGTLOC
ã                                                                      Ø
+       002658  000000  72 BYTE SAVE AREA
                                                 Ø            0026A0  000048
+  TGT IDENTIFIER
                            Ø            0026BC  000064  NUMBER OF FCB'S
+ 
       áØ            0026C0  000068  WORKING STORAGE LENGTH
                                                                 Ø
+ 0026C4  00006C  POINTER TO PREVIOUS TGT IN TGT CHAIN
                                           Ø            0026D0  000078  FULLW
+ ORD RETURN CODE
                      Ø            0026D2  00007A  RETURN CODE SPECIAL REGIST
+ ER
 .Ø            0026D4  00007C  SORT-RETURN SPECIAL REGISTER
      -----------------------------                       Ø            0026E4
+   00008C  NUMBER OF SECONDARY FCB CELLS                         NOTE: Some lin

es removed for                       Ø            0026EC  000094  ADDRESS OF
+ IGZEBST TERMINATION ROUTINE                brevity.
                Ø            0026F0  000098  DDNAME FOR DISPLAY OUTPUT
ñ                     -----------------------------                       Ø
+          0026F8  0000A0  SORT-CONTROL SPECIAL REGISTER
                                                    Ø            002700  0000
+ A8  POINTER TO COM-REG SPECIAL REGISTER
                               Ø            00273C  0000E4  ADDRESS OF SORT G
+ .N. ADDRESS BLOCK
          âØ            002750  0000F8  POINTER TO ABEND INFORMATION TABLE
ä                                                                   Ø
+    002758  000100  ADDRESS OF START OF COBOL PROGRAM
                                              Ø            002764  00010C  PO
+ INTER TO FIRST PBL IN THE PGT
                         Ø            002768  000110  POINTER TO FIRST FCB CE
+ LL
    çØ            00276C  000114  WORKING STORAGE ADDRESS
                                                             Ø
+ 
                                        Ø                    *** VARIABLE POR
+ TION OF TGT ***
                   Ø            002794  00013C  BASE LOCATORS FOR WORKING-STO
<RAGE                                                                          
+Ø            0027A4  00014C  BASE LOCATORS FOR LINKAGE-SECTION
                                                       Ø            0027A8  0
+ 00150  BASE LOCATORS FOR FILES
                                  Ø            0027B4  00015C  CLLE ADDR. CEL
+ LS FOR CALL LIT. SUB-PGMS.
             Ø            00281C  0001C4  INDEX CELLS
ã                                                                      Ø
+       002830  0001D8  PERFORM SAVE CELLS
                                                 Ø            002874  00021C
+  FCB CELLS
                            Ø            002890  000238  TEMPORARY STORAGE-1
+ 
       áØ            0028A0  000248  TEMPORARY STORAGE-2
                                                                 Ø
+ 
                                           Ø  PGT      LOCATED AT 002658 FOR
+ 00000260 BYTES
                      Ø  DCB00001 LOCATED AT 0028B8 FOR 00000060 BYTES
+ 
 .Ø  FCB00001 LOCATED AT 002918 FOR 00000100 BYTES
                                                          Ø  FCB00002 LOCATED
+  AT 002A78 FOR 00000100 BYTES

                                     Ø  DCB00003 LOCATED AT 002B78 FOR 000000
+ 60 BYTES
                Ø  GDT00001 LOCATED AT 002CD8 FOR 00000050 BYTES
ñ                                                                         Ø  R
+ CD00001 LOCATED AT 002D28 FOR 00000085 BYTES
                                                    Ø  WRK-STOR LOCATED AT 00
+ 2DB0 FOR 000031D5 BYTES
                               Ø  SPEC-REG LOCATED AT 005F88 FOR 00000031 BYT
+ ES
          âØ -----------------------------------------------------------------
ä-------------------------------------------------------------      Ø
+ 
                                              Ø1      ***** DUMP READING - LI
+ NKAGE EDITOR LISTING *****         Page 22
                         Ø0      H. Link-Edit listing. This listing shows a m
+ ap of the load module
    çØ          which includes all the subroutines linked with your program to
                                                             Ø          creat
+ e an executable load module. The displacement from the
                                        Ø          beginning of the load modu
+ le to each subroutine is printed, as
                   Ø          well as the total length of the module.
<                                                                              
+Ø
                                                       Ø  -------------------
+ ---------------  EXAMPLE OF THE LINKAGE EDITOR LISTING (PARTIAL) -------------
------------------------          Ø  MVS/XA DFP VER 3 LINKAGE EDITOR
+        14:56:26  THU  APR 05, 1990
             Ø  JOB RUX1077W   STEP COMPILE2   PROCEDURE LKED
ã                                                                      Ø  INVO
+ CATION PARAMETERS - LIST,XREF,CALL,LET,MAP,SIZE=(1000K,500K)
                                                 Ø  ACTUAL SIZE=(948224,49459
+ 2)
                            Ø  OUTPUT DATA SET USER02.LOAD.LOAD IS ON VOLUME
+ TSOWK2
       áØ  IEW0132  SYSDAT
                                                                 Ø
+                                      CROSS REFERENCE TABLE
                                           Ø   CONTROL SECTION
+         ENTRY
                      Ø     NAME    ORIGIN  LENGTH                NAME   LOCA
+ TION     NAME   LOCATION     NAME   LOCATION     NAME   LOCATION
 .Ø   ABNDCOB       00    5FB9
                                                          Ø   COBABEND*   5FC
+ 0      7C

                                     Ø   IGZENRI *   EE90     C14
+ 
                Ø                                         IGZERRE     F65C
ñ                                                                         Ø
+ IGZEOPD *   FAA8      48
                                                    Ø   SYSADD  *   FAF0
+  B7
                               Ø   IGZCONVX*  106B0     A60
+ 
          âØ                                         IGZCONVI   106C0    IGZCO
äNVO   109AC    IGZCONVL   110E8                                    Ø   IGZEBS
+ T *  122C0     428
                                              Ø
+            IGZEBS2    1254E
                         Ø   IGZEPRM *  126E8     908
+ 
    çØ   SYSAD2  *  15800      88
                                                             Ø   IGZECMS *  1
+ 5888     55C
                                        Ø
+ 
                   Ø
<                                                                              
+Ø   LOCATION  REFERS TO SYMBOL  IN CONTROL SECTION             LOCATION  REFERS
 TO SYMBOL  IN CONTROL SECTION                         Ø        6C
+  IGZENRI         IGZENRI                       9C            SYSDATE         S
YSDATE                            Ø        A0            SYSDAT         $UNRE
+ SOLVED                    A4            COBABEND        COBABEND
             Ø      B8B4            IGZENRI         IGZENRI
ã   B8D0            CVTDATE         CVTDATE                            Ø
+ B8D4            SYSADD          SYSADD                      FA7C            IG
ZEOPD         IGZEOPD                            Ø      FA80            ILBOS
+ TP0       $UNRESOLVED(W)               FA74            ILBOCOM        $UNRESOL
VED(W)                      Ø      FA78            IGZEOPT        $UNRESOLVED
+ (W)               FA38            IGZCCCO         IGZCCCO
       áØ      FA3C            IGZENRT         IGZENRT                     FA4
 0            IGZESPM         IGZESPM                            Ø      FA44
+           IGZCTCO         IGZCTCO                     FA48            IGZETUN
        IGZETUN                            Ø     11538            IGZEXIT
+     $UNRESOLVED(W)              126BC            IGZETUN         IGZETUN
                      Ø     126C0            IGZEOPT        $UNRESOLVED(W)
+ 
 .Ø  ENTRY ADDRESS       00
                                                          Ø  TOTAL LENGTH
+  15DE8

                                     Ø  ** ABNDMAIN REPLACED AND HAS AMODE 24
+ 
                Ø  ** LOAD MODULE HAS RMODE 24
ñ                                                                         Ø  *
+ * AUTHORIZATION CODE IS         0.
                                                    Ø
+                       DIAGNOSTIC MESSAGE DIRECTORY
                               Ø    IEW0132 ERROR - SYMBOL PRINTED IS AN UNRE
+ SOLVED EXTERNAL REFERENCE.
          âØ -----------------------------------------------------------------
ä---------------------------------------------------------Ù         Ø1      **
+ *** DUMP READING - DEBUGGING PROCEDURES *****           Page 23
                                              Ø0   V. Debugging Procedures.
+ 
                         Ø
+ 
    çØ       A. JES2 Job Log. Always check this listing first. If an error
                                                             Ø          occur
+ red in file processing, check the DDNAME for the file.
                                        Ø          Note the abending step nam
+ e. Be sure you understand any system
                   Ø          messages printed. Look them up in the System Me
<ssages manual                                                                 
+Ø          if there is any doubt.
                                                       Ø
+ 
                                  Ø       B. Scan the JCL listing for any unu
+ sual messages. Are all
             Ø          overriding DD cards in the correct sequence?  Are any
ã "NOT                                                                 Ø
+     CATALOGED 2" messages found? Are STEPLIB DD cards correct?
                                                 Ø          Check block sizes
+  on DD cards.  Check for correct PARM data on
                            Ø          the EXEC card, if any. Is the program
+ name on the EXEC card
       áØ          correct?  Did the compile and linkedit both end with condit
 ion                                                             Ø          co
+ de 4 or less? Check the Linkedit listing if the condition
                                           Ø          code is greater than ze
+ ro.
                      Ø
+ 
 .Ø       C. If the above information does not solve the problem, you'll
                                                          Ø          have to
+ do some dump reading.  Always double-check everything

                                     Ø          you do in a dump, or you'll f
+ ind yourself totally lost with
                Ø          the first incorrect hex addition.
ñ                                                                         Ø
+ 
                                                    Ø       D. Identifying th
+ e Compile Matching the Dump:  Step 1 in dump
                               Ø          reading is to be sure you have the
+ correct COBOL compile
          âØ          listing for the dump. There is no way to be absolutely
ä                                                                   Ø
+  certain, but several ways to be pretty sure. First, find the
                                              Ø          length given in the
+ Next Sequential Instruction section and
                         Ø          compare it to the length at the bottom of
+  the Link-Edit
    çØ          listing. If these lengths are not equal, you have the wrong
                                                             Ø          listi
+ ng.
                                        Ø
+ 
                   Ø       E. Read the Abend-AID diagnostic section carefully
<.  Be sure you                                                                
+Ø          understand the problem. Try to think of reasons why the error
                                                       Ø          might have
+ occurred, but be sure to keep an open mind.
                                  Ø
+ 
             Ø1      ***** DUMP READING - DEBUGGING PROCEDURES *****
ã  Page 24                                                             Ø0
+  F. Next, find the last instruction executed in the COBOL program.
                                                 Ø          To do this, look
+ in the "Next Sequential Instruction" block
                            Ø          printed by Abend-AID. Use the displace
+ ment given and find the
       áØ          instruction in the Procedure Division with the highest
                                                                 Ø          di
+ splacement less than the displacement shown by Abend-AID. Be
                                           Ø          sure to locate a statem
+ ent whose displacement is lower than
                      Ø          the displacement given by Abend-AID. Note th
+ at Abend-AID
 .Ø          provides the address of the NEXT instruction to be executed.
                                                          Ø          therefor
+ e, if you find a statement whose displacement is equal

                                     Ø          to the displacement, it is th
+ e NEXT to be executed
                Ø          instruction, and the real culprit is the instructi
ñon preceding                                                             Ø
+        it. If you have found a source statement by the above
                                                    Ø          procedure, con
+ tinue with step H. An example is:
                               Ø
+ 
          âØ                                        THE NEXT SEQUENTIAL INSTRU
äCTION TO BE EXECUTED IN PROGRAM                                    Ø
+                                           ABNDCOB WAS AT DISPLACEMENT 001084 -
-                                             Ø
+           Ú-----------------------------------------------Ù
                         Ø
+ 
    çØ          LINE #  HEXLOC  VERB                   LINE #  HEXLOC  VERB
                LINE #  HEXLOC  VERB                         Ø          00014
+ 2 000F62 OPEN                     000143 000F92 MOVE                     00014
4 000FA0 MOVE                           Ø          000145 000FA4 CALL
+              000146 000FD8 PERFORM                  000151 000FEC READ
                   Ø          000153 00102E GO                       000154 0
<01036 MOVE                     000155 001046 MOVE                             
+Ø          000156 00104C PERFORM                  000157 001060 MOVE
          000158 001066 ADD                            Ø          000159 0010
+ 6C SET                      000160 001072 SET                      000161 0010
78 MOVE                           Ø          000162 00107E ADD  <----------Ù
+        000163 001084 SET                      000164 00108A SET
             Ø          000165 001090 MOVE                     000166 001096
ãADD                      000167 0010AC SET                            Ø
+ 
                                                 Ø       G. If the displaceme
+ nt given by Abend-AID is lower than the first
                            Ø          Procedure Division statement, or is gr
+ eater than the length of
       áØ          the load module, see a Technical Services person for
                                                                 Ø          as
+ sistance.
                                           Ø
+ 
                      Ø       H. When the error is found to be in a called su
+ broutine, first
 .Ø          check the Abend-AID Call-Trace Summary for the return
                                                          Ø          displace
+ ment to your program. Use this displacement with the

                                     Ø          COBOL compile Condensed Proce
+ dure Division Listing to locate
                Ø          the CALL statement to the subroutine.  Now, having
ñ located the                                                             Ø
+        CALL statement in the COBOL program using the procedure above,
                                                    Ø          check the para
+ meters passed with the documentation for the
                               Ø          subroutine. The parameters must be
+ named in the COBOL CALL
          âØ          statement in the same order expected by the subroutine.
äIn                                                                 Ø
+  addition, there must be the correct number of parameters, and
                                              Ø          their sizes and cont
+ ents must be as expected by the called
                         Ø          subroutine.
+ 
    çØ
                                                             Ø       I. Now t
+ hat you have located the last executed statement in the
                                        Ø          COBOL program, problem det
+ ermination is up to you and your
                   Ø          knowledge of the program and the system in whic
<h it runs. The                                                                
+Ø          remainder of this guide shows how to locate fields in the
                                                       Ø          Abend-AID d
+ ump.
                                  Ø1      ***** DUMP READING - LOCATING FIELD
+ S IN A DUMP *****      Page 25
             Ø0  VI. Locating Fields in a Dump by Address or Offset Data loca
ãtion is a                                                             Ø
+  process of identifying the line which contains the data, then
                                                 Ø       counting across from
+  the first data byte on the line, byte-
                            Ø       by-byte (in hex), until the desired data
+ byte is found. Most
       áØ       people have no problem finding the line containing the data.
                                                                 Ø       Howev
+ er, many make mistakes counting in hex, and it is common to
                                           Ø       mistake displacement or ad
+ dress columns for data.
                      Ø
+ 
 .Ø       The principal problem in hex counting seems to be the count from
                                                          Ø       9 to A, whi
+ ch is frequently counted as 9 to 10, instead, due to

                                     Ø       inexperience, haste, or careless
+ ness. Another, less frequent
                Ø       problem, results from not understanding that the coun
ñt proceeds                                                               Ø
+     from F to 10. Here are some examples of correct count sequences:
                                                    Ø
+ 
                               Ø       1) 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B,
+  C, D, E, F, 10, 11, 12
          âØ                                     ....              .....
ä                                                                   Ø
+                     9 goes to A (not 10)     F goes to 10
                                              Ø
+ 
                         Ø       2) 37F8, 37F9, 37FA, 37FB, 37FC, 37FD, 37FE,
+  37FF, 3800, 3801
    çØ                   .......                            ........
                                                             Ø              9
+  goes to A, (not 10)            F goes to 10, FF to 100
                                        Ø
+ 
                   Ø       The second problem in locating data in the dumps r
<elates to the                                                                 
+Ø       way data is presented. Abend-AID often provides a displacement
                                                       Ø       column, which
+ may or may not be present, and if it is present, it
                                  Ø       may or may not have an identifying
+ column heading. The
             Ø       displacement column is easy to identify, however, as it
ãwill                                                                  Ø
+  always be a narrow column containing only 5 digits, rather than
                                                 Ø       the usual 8 digits.
+ when provided, the displacement column header
                            Ø       will be "DSPL" or "DISPL". An address col
+ umn is always given,
       áØ       whether or not the displacement is provided, and will always b
 e                                                               Ø       the f
+ irst 8-digit column at the left side of the page. Data bytes
                                           Ø       begin with the column foll
+ owing the address column. If a column
                      Ø       header is given for the address column, it will
+  be "ADDRESS". The
 .Ø       displacement and address columns give the displacement from the
                                                          Ø       beginning o
+ f the area to the first data byte on the line, while

                                     Ø       the address is the virtual addre
+ ss of the first data byte on the
                Ø       line. Here is an example:
ñ                                                                         Ø
+ 
                                                    Ø      WORKING STORAGE RE
+ FERENCED BY BLW CELL   0
                               Ø  DSPL ADDRESS  -----------------------------
+ ---- DATA ---------------------------------
          âØ 00000 00008FD8 C4E4D4D7 C3D3C1E2 40E6D6D9 D2C9D5C7  40E2E3D6 D9C1
äC7C5 40E2E3C1 D9E3E240 DUMPCLAS WORKING STORAGE STARTS             Ø 00020 00
+ 008FF8 C8C5D9C5 00000000 000C001C F1C20000  4C00BB00 1234567C 00A9216C 4F33007
6 HERE........1B..................            Ø                --> This byte
+ (C8) is the first data byte on the line,
                         Ø                    and is at displacement 0020 fro
+ m the start of                        --> Beginning here is the character
    çØ                    Working Storage Referenced by BLW CELL 0. The
                     values for the data shown to the        Ø
+      virtual storage address of this byte is 00008FF8.
left in hex.                            Ø
+                                                   --> This data byte (76) is l
ocated 003F        Ø       --> The first 8-digit column gives the virtual sto
<rage address                     bytes offset from the start of the           
+Ø           of the first data byte on the line, in this case, 00008FF8.
            Working Storage Referenced by BLW          Ø
+                                                                      CELL 0. I
t is at virtual address 9017      Ø --> The displacement column is only 5-dig
+ its wide, and gives the disp-
             Ø     lacement from the beginning of the area, to the first data
ã byte on    --> This data byte (21) is located at offset 003A         Ø     t
+ he line. Here, the first data byte is 0020 bytes from the start          from
the start of Working Storage Referenced by       Ø     of Working Storage Ref
+ erenced by BLW CELL 0.                              BLW CELL 0.
                            Ø
+ 
       áØ1      ***** DUMP READING - LOCATING FIELDS IN A DUMP *****      Page
  26                                                             Ø0  VII. Loca
+ ting Fields in a Record of an Open File
                                           Ø
+ 
                      Ø        A. Find the data item in the Data Division map
+  of the compile
 .Ø           and note the BLF CELL number, displacement, length and data
                                                          Ø           type.
+ 

                                     Ø
+ 
                Ø        B. Locate the file information printed by Abend-AID
ñfor this                                                                 Ø
+         file.  The last line(s) of this data contain the current
                                                    Ø           record.  A lo
+ cator line below the record shows record
                               Ø           positions relative to 1 in decimal
+ .
          âØ
ä                                                                   Ø        C
+ . Since the displacement given by COBOL is in hex, relative to
                                              Ø           zero, we must add 1
+  to the displacement, and convert it to
                         Ø           decimal to locate the field in the recor
+ d.
    çØ
                                                             Ø        D. As a
+ n example, locate the field RECD-FLD in the record
                                        Ø           TABLE-CARD:
+ 
                   Ø
<                                                                              
+Ø Source   Hierarchy and                                    Base       Hex-Disp
lacement  Asmblr Data                  Data Def        Ø LineID   Data Name
+                                       Locator    Blk   Structure   Definition
   Data Type      Attribut        Ø      2  PROGRAM-ID ABNDCOB --------------
+ ------------------------------------------------------------------------------
-----        Ø     33   FD TABLE-FILE. . . . . . . . . . . . . . . . . .
ã       001                             QSAM           FB              Ø     3
+ 9   01 TABLE-CARD. . . . . . . . . . . . . . . . . . BLF=0000   000
    DS 0CL80      Group                          Ø     40     02 TABLE-ID. .
+ . . . . . . . . . . . . . . . . BLF=0000   000   0 000 000   DS 1C         Dis
play                        Ø     44     02 ENT-NBR . . . . . . . . . . . . .
+  . . . . . BLF=0000   001   0 000 001   DS 3C         Disp-Num
       áØ     45     02 TABLE-DATA. . . . . . . . . . . . . . . . . BLF=0000
  004   0 000 004   DS 76C        Display                        Ø     46
+ 02 FILLER. . . . . . . . . . . . . . . . . . . BLF=0000   004   0 000 004   DS
 0CL76      Group          R               Ø     47       03 ENT-VAL1. . . .
+ . . . . . . . . . . . . . BLF=0000   004   0 000 004   DS 5C         Disp-Num
                      Ø     48       03 ENT-DESC1 . . . . . . . . . . . . . .
+  . . BLF=0000   009   0 000 009   DS 3C         Display
 .Ø     49       03 ENT-NBR1. . . . . . . . . . . . . . . . . BLF=0000   00C
 0 000 00C   DS 1C         Disp-Num                       Ø     50       03 R
+ ECD-FLD. . . . . . . . . . . . . . . . . BLF=0000   00D   0 000 00D   DS 4C

      Packed-Dec                     Ø                                      B
+ LF CELL NUMBER <--------Ù
                Ø                                            DISPLACEMENT (HE
ñX) <------Ù                                                              Ø
+                                                       FIELD LENGTH (4 BYTES) <
----------Ù                                         Ø
+                                              DATA TYPE (PACKED DECIMAL) <-----
Ù                              Ø
+ 
          âØ                                DATA MANAGEMENT CONTROL BLOCKS FOR
ä DDNAME - INPUT2                                                   Ø
+                        DSNAME=JES2.JOB01170.SI000101
                                              Ø  JES2 SPOOLED           UNIT
+ ADR=35B           VOL-SER=SYSTST                                  ACC METH=QSA
M                        Ø
+ 
    çØ FILE EXCP COUNT=0                              MODE=GET LOCATE
                                                             Ø
+                 DCB=(DSORG=PS,RECFM=F,LRECL=80,BLKSIZE=80)
                                        Ø             Ú-----------------
+ 
                   Ø               DEB, DCB, ACB,
<                                                                              
+Ø               ETC. DELETED FOR
                                                       Ø               BREVIT
+ Y
                                  Ø             ------------------Ù
+ 
             Ø CURRENT RECORD
ã                                                                      Ø
+ 
                                                 Ø 0001FDE0   CHAR  0
+ 0018. ..
                            Ø            ZONE  FFFFFFFFFFFFF043944444
+ 44444444444444444444444444444444444444444444444444
       áØ           DIGIT  0713000120018700C00000000000000000000000000
 00000000000000000000000000000                                   Ø
+       1...5...10....*...20....*...30....*...40....*...50....*...60....*...70..
..*...80                                   Ø
+ 
                      Ø                               ---------> RECD-FIELD S
+ TARTS HERE AT BYTE NUMBER 14
 .Ø
                                                          Ø1      ***** DUMP
+ READING - LOCATING FIELDS IN A DUMP *****      Page 27

                                     Ø0         In this example, the field RE
+ CD-FIELD is at displacement 00D
                Ø          (hex) from the beginning of the record. It is a 4-
ñbyte packed                                                              Ø
+        decimal field. Adding 1: 00D + 1 = 00E (hex). Converting to
                                                    Ø          decimal: we ha
+ ve 14. The decimal displacement from the
                               Ø          beginning of the record (relative t
+ o 1) is 55. Inspecting the
          âØ          current record, we find the field contains: 0439 which i
äs                                                                  Ø
+  0740309C, or +740,309.
                                              Ø                          700C
+ 
                         Ø
+ 
    çØ
                                                             Ø   VIII. Locati
+ ng Simple Fields in Working Storage
                                        Ø
+ 
                   Ø         A. Locate the field description in the COBOL com
<pile Data                                                                     
+Ø            Division Map, and note the BLW number, displacement from the
                                                       Ø            BLW, fiel
+ d length, and data type.
                                  Ø
+ 
             Ø         B. Turn to the Abend-AID print for this BLW number. Us
ãe the                                                                 Ø
+       displacement value printed in the left column to locate the
                                                 Ø            field.
+ 
                            Ø
+ 
       áØ         C. For example, to locate the field LINE-COUNT:
                                                                 Ø
+ 
                                           Ø     95   77 FILLER. . . . . . .
+ . . . . . . . . . . . . . BLW=0000   000               DS 36C        Display
                      Ø     97   77 PAGE-NO . . . . . . . . . . . . . . . . .
+  . . BLW=0000   028               DS 2P         Packed-Dec
 .Ø     99   77 LINE-COUNT. . . . . . . . . . . . . . . . . . BLW=0000   030
             DS 2P         Packed-Dec                     Ø
+            ----- BL CELL NUMBER  <-----------

                                     Ø
+      DISPLACEMENT (HEX) <------
                Ø                                       FIELD LENGTH (2 BYTES
ñ) <----------------------------Ù                                         Ø
+                                       DATA TYPE (PACKED DECIMAL) <------------
---------------------Ù                              Ø
+     ------------------------------
                               Ø
+ 
          âØ
ä                                                                   Ø      WOR
+ KING STORAGE REFERENCED BY BLW CELL   0  <-------Ù
                                              Ø  DSPL ADDRESS  --------------
+ ------------------- DATA ---------------------------------
                         Ø 00000 00008FD8 C4E4D4D7 C3D3C1E2 40E6D6D9 D2C9D5C7
+   40E2E3D6 D9C1C7C5 40E2E3C1 D9E3E240 DUMPCLAS WORKING STORAGE STARTS
    çØ 00020 00008FF8 C8C5D9C5 00000000 000C001C F1C20000  045CBB00 1234567C 0
0000000 00000000 HERE........1B..................            Ø
+ 
                                        Ø
+ 
                   Ø
<                                                                              
+Ø                                                     --> LINE-COUNT STARTS HER
E AT DISPLACEMENT 030                                  Ø
+ 
                                  Ø         D. Using the COBOL Working Storag
+ e Section, LINE-COUNT uses BLW
             Ø            0. It is located at displacement 030 from this BLW.
ã The                                                                  Ø
+       field is 2 bytes long, and is packed decimal. In the
                                                 Ø            Abend-AID dump,
+  use the displacements printed at the left of
                            Ø            the storage print for BLW CELL 0. LI
+ NE-COUNT is found to
       áØ            contain 045C, which is +45, a valid packed decimal number
 .                                                               Ø
+ 
                                           Ø   IX. Locating Indexes
+ 
                      Ø       A. Indexes are located by their index numbers,
+ which are printed
 .Ø          in the COBOL Data Division Map under the Base Locator column
                                                          Ø          of the s
+ tatement on which they are defined. Indexes, like all

                                     Ø          CELL's are 4- byte fullwords.
+  The content of the index (its
                Ø          value) is printed in the Abend-AID dump SUPPORTING
ñ DATA                                                                    Ø
+        section.
                                                    Ø
+ 
                               Ø1      ***** DUMP READING - LOCATING FIELDS I
+ N A DUMP *****      Page 28
          âØ0      B. Find the COBOL statement which defines the index, and no
äte the                                                             Ø
+  index number (IDX=0001, IDX=0002, etc.) in the Data Division
                                              Ø          Map of the compile l
+ isting.
                         Ø
+ 
    çØ       C. Find the SUPPORTING DATA section of the Abend-Aid dump and the
                                                             Ø          conte
+ nt of the indexes are printed by their IDX numbers.
                                        Ø
+ 
                   Ø       D. For example, find the content of IX2, an index
<associated with                                                               
+Ø          TABLE2:
                                                       Ø
+ 
                                  Ø ource   Hierarchy and
+           Base       Hex-Displacement  Asmblr Data                  Data Def
             Ø ineID   Data Name                                  Locator
ãBlk   Structure   Definition    Data Type      Attribut               Ø   119
+        03 DESCRIP-3 . . . . . . . . . . . . . BLW=0001   5CE   0 000 1CE   DS
3C         Display                               Ø   120       03 NUMBER-3. .
+  . . . . . . . . . . . . BLW=0001   5D1   0 000 1D1   DS 5C         Disp-Num
                            Ø   121     02 TABLE2. . . . . . . . . . . . . .
+ . . BLW=0001   B2E   0 000 72E   DS 0CL6       Group          O
       áØ   122        IX2 . . . . . . . . . . . . . . . . . IDX=0005   000
                          Index-Name                             Ø
+ 
                                           Ø
+                          -------------------
                      Ø                                SUPPORTING DATA
+ 
 .Ø
                                                          Ø
+           CONTENTS OF BLW CELLS

                                     Ø
+ 
                Ø       BLW   0 - 00008FD8     BLW   1 - 00009FD8     BLW   2
ñ - 0000AFD8                                                              Ø
+     BLW   3 - 0000BFD8
                                                    Ø
+ 
                               Ø                            CONTENTS OF BLL C
+ ELLS
          âØ
ä                                                                   Ø       BL
+ L   0 - 00000000
                                              Ø
+ 
                         Ø                            CONTENTS OF BLF CELLS
+ 
    çØ
                                                             Ø       BLF   0
+ - 00022CE0     BLF   1 - 0001FDE0     BLF   2 - 00008F50
                                        Ø
+ 
                   Ø                           CONTENTS OF INDEX CELLS
<                                                                              
+Ø
                                                       Ø       IDX   1 - 0000
+ 004D     IDX   3 - 00000000     IDX   5 - 000005D0  <---Ù
                                  Ø       IDX   7 - 00000000     IDX   9 - 00
+ 000012
             Ø
ã                                                                      Ø
+  E. From the Data Division Map of the compile, we find that IX2 is
                                                 Ø          IDX=0005. In the
+ SUPPORTING DATA section of the Abend-AID
                            Ø          dump, IDX 5 is found to contain the he
+ x value 000005D0.
       áØ
                                                                 Ø   X. Locati
+ ng an Element of a Subscripted Table.
                                           Ø
+ 
                      Ø      A. In the Data Division Map of the COBOL compile
+ , locate the
 .Ø         statement defining the  data element to be found. Note the BLW
                                                          Ø         CELL numb
+ er, offset, length, and type of data.

                                     Ø
+ 
                Ø      B. Note the statement which contains the OCCURS clause
ñ for this                                                                Ø
+       item, which will have the letter O in the DATA DEF ATTRIB
                                                    Ø         column. Note th
+ e length of the occurring item, then find this
                               Ø         statement in the DATA DIVISION of th
+ e source listing, and note
          âØ         the number of occurrences.
ä                                                                   Ø
+ 
                                              Ø1      ***** DUMP READING - LO
+ CATING FIELDS IN A DUMP *****      Page 29
                         Ø0     C. Locate the subscript in memory, using the
+ appropriate technique
    çØ         from above. Interpret the value, and convert to decimal, if it
                                                             Ø         is in
+ binary.
                                        Ø
+ 
                   Ø      D. Subtract 1 from the subscript to relativize to z
<ero.                                                                          
+Ø         (Subscripts are always relative to 1).
                                                       Ø
+ 
                                  Ø      E. Multiply the subscript value by t
+ he table entry length.
             Ø         Remember that the length given in the compile is in de
ãcimal so                                                              Ø
+    you'll have to do any conversions necessary to get both numbers
                                                 Ø         in decimal before
+ multiplying.
                            Ø
+ 
       áØ      F. Convert the product from step E to hex.
                                                                 Ø
+ 
                                           Ø      G. Add the hex product from
+  step F to the displacement found for
                      Ø         the data item in the COBOL Data Division Map.
+ 
 .Ø
                                                          Ø      H. Using the
+  BLW number for the table and the displacement

                                     Ø         computed in step G, locate the
+  table entry in memory.
                Ø
ñ                                                                         Ø
+    I. For example, find the value of NUMBER-1 (SUB-1):
                                                    Ø
+ 
                               Ø PP 5668-958 IBM VS COBOL II Release 3.0 09/1
+ 3/88                 ABNDCOB   Date 04/04/90  Time 14:55:57   Page    15
          âØ Source   Hierarchy and                                    Base
ä    Hex-Displacement  Asmblr Data                  Data Def        Ø LineID
+  Data Name                                        Locator    Blk   Structure
 Definition    Data Type      Attribut        Ø    101   77 SUB-1 . . . . . .
+  . . . . . . . . . . . . . . BLW=0000   038               DS 2C         Disp-N
um                       Ø    102   77 SUB-2 . . . . . . . . . . . . . . . .
+ . . . . BLW=0000   040               DS 3P         Packed-Dec
    çØ    103   77 SUB-3 . . . . . . . . . . . . . . . . . . . . BLW=0000   04
8               DS 2C         Binary                         Ø    104   77 EN
+ TRY-WORK. . . . . . . . . . . . . . . . . . BLW=0000   050               DS 5P
         Packed-Dec                     Ø    106   77 I . . . . . . . . . . .
+  . . . . . . . . . . . BLW=0000   058               DS 2C         Disp-Num
                   Ø    107   77 N . . . . . . . . . . . . . . . . . . . . .
<. BLW=0000   060               DS 3P         Packed-Dec                       
+Ø    108   77 J . . . . . . . . . . . . . . . . . . . . . . BLW=0000   068
          DS 4C         Index                          Ø    109   77 M . . .
+ . . . . . . . . . . . . . . . . . . . BLW=0000   070               DS 2C
   Binary                         Ø    110   01 HOLD-AREA-1 . . . . . . . . .
+  . . . . . . . . BLW=0000   078               DS 5000C      Display
             Ø    111   01 TABLES-AREA . . . . . . . . . . . . . . . . . BLW=
ã0001   400               DS 0CL2618    Group                          Ø    11
+ 2     02 TABLE1. . . . . . . . . . . . . . . . . . . BLW=0001   400   0 000 00
0   DS 0CL7       Group          O               Ø    113        IX1 . . . .
+ . . . . . . . . . . . . . . . . IDX=0001   000                             Ind
ex-Name                     Ø    113        INDX1 . . . . . . . . . . . . . .
+  . . . . . IDX=0002   000                             Index-Name
       áØ    114       03 TABLE1-VALUE. . . . . . . . . . . . . . . BLW=0001
  400   0 000 000   DS 3P         Packed-Dec                     Ø    115
+   03 DESCRIP-1 . . . . . . . . . . . . . . . . BLW=0001   403   0 000 003   DS
 3C         Display                        Ø    116       03 NUMBER-1. . . .
+ . . . . . . . . . . . . . BLW=0001   406   0 000 006   DS 1C         Disp-Num
                      Ø   000111                01  TABLES-AREA.
+ 
 .Ø   000112                    02 TABLE1                         OCCURS 66 TI
MES                                                       Ø   000113
+                                              INDEXED BY IX1, INDX1.

                                     Ø   000114                         04 TA
+ BLE1-VALUE                   PIC S9(5) COMP-3.
                Ø PP 5668-958 IBM VS COBOL II Release 3.0 09/13/88
ñ      ABNDCOB   Date 04/04/90  Time 14:55:57   Page     4                Ø
+ LineID  PL SL  ----+-*A-1-B--+----2----+----3----+----4----+----5----+----6---
-+----7-]--+----8  Cross Reference                  Ø   000115
+           04 DESCRIP-1                 PIC X(3).
                               Ø   000116                         04 NUMBER-1
+                   PIC 9.
          âØ
ä                                                                   Ø      J.
+ The subscript, SUB-1, is located at BL=4, displacement 02A
                                              Ø         (hex). It is a 2-byte
+  field whose data type is C, meaning
                         Ø         character (unpacked) data. This is true si
+ nce the picture is
    çØ         numeric, and no COMP clause is given.
                                                             Ø
+ 
                                        Ø1      ***** DUMP READING - LOCATING
+  FIELDS IN A DUMP *****      Page 30
                   Ø0     K. The table containing the element NUMBER-1 is cal
<led TABLE1. It                                                                
+Ø         occurs 66 times, and the table entries are 7 bytes long. For
                                                       Ø         the 0CL7 at
+ the right side, the 0CL is always specified for a
                                  Ø         group item, and the length is 7 b
+ ytes.
             Ø
ã                                                                      Ø
+ L. The element to be found is named NUMBER-1, and is located at
                                                 Ø         BL=5, displacement
+  3CE. it is a 1 byte field containing
                            Ø         character type data.
+ 
       áØ
                                                                 Ø
+                           *********************************************
                                           Ø
+      * WORKING STORAGE REFERENCED BY BL CELL 04  *
                      Ø                                      ****************
+ *****************************
 .Ø  DSPL ADDRESS  --------------------------------- DATA --------------------
-------------                                             Ø 00000 00105628 C4
+ E4D4D7 C3D3C1E2 40E6D6D9 D2C9D5C7  40E2E3D6 D9C1C7C5 40E2E3C1 D9E3E240 DUMPCLA

S WORKING STORAGE STARTS             Ø 00020 00105648 C8C5D9C5 000C045C F2F00
+ 000 4C007E00  1234567C 00000000 00000000 00000000 HERE...*32....=.............
....            Ø
ñ                                                                         Ø
+                                ---------> SUB-1 is at displacement 028 from BL
 Cell 4. The 2-byte field contains F2F0             Ø
+ 
                               Ø      M. Using the Abend-AID dump printout fo
+ r BL cell 04, we locate the
          âØ         subscript, SUB-1, and find it contains F2F0, an unpacked,
ä                                                                   Ø
+ unsigned, decimal 20.
                                              Ø
+ 
                         Ø      N. Subtracting 1 from the subscript: 20 - 1 =
+  19.
    çØ
                                                             Ø      O. Multip
+ ly the SUB-1 value by the length of the table entries: 19
                                        Ø         x 7 = 133 (decimal).
+ 
                   Ø
<                                                                              
+Ø      P. Converting 133 decimal to hex gives 85 for the hex
                                                       Ø         displacement
+ .
                                  Ø
+ 
             Ø      Q. Adding 85 to the displacement for field NUMBER-1: 85 +
ã 3CE =                                                                Ø
+ 453.
                                                 Ø
+ 
                            Ø                                      **********
+ ***********************************
       áØ                                      * WORKING STORAGE REFERENCED BY
  BL CELL 05  *                                                  Ø
+                           *********************************************
                                           Ø  DSPL ADDRESS  -----------------
+ ---------------- DATA ---------------------------------
                      Ø 00000 00106628 00000000 00000000 00000000 00000000  0
+ 0000000 00000000 00000000 00000000 ................................
 .Ø             LINES 00106648-001069E8 SAME AS ABOVE
                                                          Ø 003E0 00106A08 00
+ 000000 31470CC2 D3E8F100 00000000  00000000 00000000 00000000 00000000 .......

BLY1.....................            Ø 00400 00106A28 00000000 00000000 00000
+ 000 00000000  00000000 00000000 00000000 00000000 ............................
....            Ø 00420 00106A48 00000000 00000000 00000000 00000000  0000000
ñ0 00000000 03692CC1 D4D5F031 ...........................AMN0.            Ø 00
+ 440 00106A68 470CD6C2 D3F20000 00000000 0092536C  D1D8C4F6 00000000 00000000 0
0000000 ..OBL2..........JQD6............            Ø
+ 
                               Ø
+               -----> NUMBER-1 (SUB-1) is F6
          âØ
ä                                                                   Ø      R.
+ Using the Abend-AID dump printout for BL cell 05, we locate the
                                              Ø         field NUMBER-1 (SUB-1
+ ) at BL cell 5 plus a total displacement
                         Ø         of  453 (hex), and find the 1-byte charact
+ er at that location
    çØ         to be F6, which is an unpacked, unsigned decimal number 6.
                                                             Ø
+ 
                                        Ø1      ***** DUMP READING - LOCATING
+  FIELDS IN A DUMP *****      Page 31
                   Ø0  XI. Locating an Element of an Indexed Table.
<                                                                              
+Ø
                                                       Ø       A. In the COBO
+ L compile, locate the statements defining the
                                  Ø          table, and the index. Note the B
+ L number, displacement,
             Ø          length, data type of the table, and the index number
ãof the                                                                Ø
+     index.
                                                 Ø
+ 
                            Ø       B. Locate the index in the Task Global Ta
+ ble using the technique
       áØ          described above.
                                                                 Ø
+ 
                                           Ø       C. Add the index value fou
+ nd in step 2 to the displacement found
                      Ø          for the table in the COBOL Data Division.
+ 
 .Ø
                                                          Ø       D. Using th
+ e BL number for the table, and the displacement

                                     Ø          computed in step 3, locate th
+ e table entry in memory.
                Ø
ñ                                                                         Ø
+     E. For example, locate the indexed field  NUMBER-2 (IX2):
                                                    Ø
+ 
                               Ø 00094   000940 WORKING-STORAGE SECTION.
+ 
          âØ 00121   001210     02 TABLE2                   OCCURS 130 TIMES
ä                         BL=5  AF6 4-075  0CL6      O              Ø 00122
+ 001220                                       INDEXED BY IX2.
   INDEX=5    4-065                           Ø 00123   001230          04 TA
+ BLE2-VALUE                   PIC S9.                         BL=5  AF6 4-094
1C                       Ø 00124   001240          04 DESCRIP-2
+    PIC X(3).                            BL=5  AF7 4-119  3C
    çØ 00125   001250          04 NUMBER-2                  PIC 999 COMP-3.
                   BL=5  AFA 4-141  2P                       Ø
+ 
                                        Ø       F. First, note that the table
+  containing the field  NUMBER-2 is
                   Ø          called TABLE2, and has 6-byte entries (0CL6).
<                                                                              
+Ø
                                                       Ø       G. Next, look
+ at the COBOL index assignment for IX2 and find that
                                  Ø          it is INDEX=5.
+ 
             Ø
ã                                                                      Ø
+  H. Finally get the information for field  NUMBER-2:  BL cell is
                                                 Ø          5, displacement i
+ s AFA (hex), length is 2 bytes, and it
                            Ø          contains packed decimal data.
+ 
       áØ
                                                                 Ø       I. Lo
+ cate the index, IX2, by locating the Memory Map in the COBOL
                                           Ø          compile listing, and us
+ ing it to find the displacement to the
                      Ø          INDEX CELLS. Next, use the Abend-AID dump pr
+ intout of the TGT
 .Ø          to find the INDEX CELLS table. Counting off five words locates
                                                          Ø          IX2, whi
+ ch is INDEX=5:

                                     Ø
+ 
                Ø                          MEMORY MAP
ñ      TGT RELATIVE                                                       Ø
+                   TGT                     03598                    0000     Ú-
---------------------                               Ø                SAVE ARE
+ A                    03598                    0000       MANY ENTRIES REMOVED
                               Ø                BLL CELLS
+ 035D0                    0048         FOR BREVITY
          âØ                INDEX CELLS                  03600
ä    0068     -----------------------Ù                              Ø
+ 
                                              Ø              TASK GLOBAL TABL
+ E (TGT)
                         Ø
+ 
    çØ 3598 089240  00300000 00084FA8 0008C0F8 9008A236  92B59040 00084805 000
84780 0008915C *...........8....... ...........**            Ø 35B8 089260  0
+ 000036C 94089124 00000000 00001000  000845E8 00084780 00085D48 00086D48 *.....
..............Y............*            Ø 35D8 089280  00088D48 0008967E 3002
+ E04B 00000000  00000000 0008967E 00000000 00000000 *..........................
......*            Ø 35F8 0892A0  00089796 0008A2AA 00000000 00000404  000004
<78 000002E0 0000036C 0008DCB0 *................................*              
+Ø                                  (1)      (2)        (3)      (4)      (5)
                                                       Ø
+                                                 -> This is INDEX=5 (IX2), whos
e value is 0000036C (HEX)         Ø
+ 
             Ø                                ------------> The INDEX CELLS T
ãable starts at displacement 3600                                      Ø
+ 
                                                 Ø1      ***** DUMP READING -
+  LOCATING FIELDS IN A DUMP *****      Page 32
                            Ø0      J. Add the displacement found for the fie
+ ld NUMBER-2 to the value
       áØ          of IX2: AFA + 36C = E66.
                                                                 Ø
+ 
                                           Ø       K. Find the field in the A
+ bend-AID printout for BL cell 05 at
                      Ø          displacement E66:
+ 
 .Ø
                                                          Ø
+                     *********************************************

                                     Ø                                      *
+  WORKING STORAGE REFERENCED BY BL CELL 05  *
                Ø                                      **********************
ñ***********************                                                  Ø  D
+ SPL ADDRESS  --------------------------------- DATA --------------------------
-------                                             Ø 00000 00106628
+  00000000 00000000 00000000  00000000 00000000 00000000 00000000 .............
...................            Ø             LINES 00106648-001070A8 SAME AS
+ ABOVE
          âØ 00AA0 001070C8 00000000 0000E4E7 D5F1F2F4 F0F90000  00000000 0000
ä0000 00000000 00000000 ......UXN12409..................            Ø 00AC0 00
+ 1070E8 00000000 00000000 00000000 00000000  00000000 00000000 00000000 0000C5C
8 ..............................EH            Ø 00AE0 00107108 D3F5F2F2 F2F1C
+ 9D3 D7F9F4F4 F6F30000  00000000 00000000 00000000 F7C4D3E4 L52221ILP94463.....
.........7DLU            Ø 00B00 00107128 40400000 00000000 00000000
+   00000000 F2D8E9C9 40400000 00000000   ..................2QZI  ......
    çØ 00B20 00107148 00000000 00000000 00000000 00000000  00000000 00000000 F
1C1C9D9 4040F2E6 ........................1AIR  2W            Ø 00B40
+  D5C64040 F9E8C8D7 40400000 00000000  00000000 00000000 00000000 00000000 NF
9YHP  ......................            Ø 00B60 00107188 00000000 00000000 00
+ 000000 00000000  00000000 00000000 00000000 00000000 .........................
.......            Ø             LINES 001071A8-001073A8 SAME AS ABOVE
<                                                                              
+Ø 00DA0 001073C8 00000000 00000000 00000000 0000F6C5  D5E54040 F4D4E4C4 4040000
0 00000000 ..............6ENV  4MUD  ......            Ø 00DC0 001073E8 00000
+ 000 00000000 00000000 00000000  00000000 00000000 00000000 00000000 ..........
......................            Ø 00DE0 00107408 00000000 00000000
+  00000000  00000000 00000000 00000000 F0C3E3D3 ............................0CT
L            Ø 00E00 00107428 40400000 00000000 00000000 00000000  00000000 0
ã0000000 00000000 00000000   ..............................            Ø 00E20
+  00107448 00000000 00000000 00000000 00000000  00000000 00000000 00000000 0000
0000 ................................            Ø             LINES
+ -00107468 SAME AS ABOVE
                            Ø 00E60 00107488 0000F8C2 D2E2309C 00000000 00000
+ 000  00000000 00000000 00000000 00000000 ..8BKS  ........................
       áØ
                                                                 Ø
+                  -----------------------------------> NUMBER-2 (IX2) is 309C
                                           Ø
+ 
                      Ø       L. Using the Abend-AID dump printout for BL cel
+ l 05, we locate
 .Ø          the field NUMBER-2 (IX2) at BL cell 5 plus a total
                                                          Ø          displace
+ ment of  E66 (hex), and find the 2-byte packed decimal

                                     Ø          field at that location contai
+ ns the packed, signed decimal
                Ø          number +309.
ñ                                                                         Ø
+ 
                                                    Ø   XII. Checking Subscri
+ pts and Indexes for Validity.
                               Ø      A. A frequent problem in subscripting o
+ r indexing occurs when the
          âØ         subscript or index exceeds the number of entries in the t
äable,                                                              Ø
+ or when a zero subscript is used. Whenever a subscripted
                                              Ø         statement causes an a
+ bend, the subscripts or indexes used
                         Ø         should be checked first. For subscripts, t
+ he field is located
    çØ         and inspected for validity. If the subscript is in binary, you
                                                             Ø         may ha
+ ve to convert it to decimal first.  Indexes pose more
                                        Ø         problem, as they always con
+ tain the displacement to an entry,
                   Ø         rather than an occurrence number. To find the oc
<currence number                                                               
+Ø         for an index:
                                                       Ø
+ 
                                  Ø         1. Locate the index in memory.
+ 
             Ø         2. Convert the index value to decimal.
ã                                                                      Ø
+    3. Divide the decimal index value by the table entry length.
                                                 Ø         4. Add 1.
+ 
                            Ø         5. The resulting number is the occurren
+ ce number of the entry
       áØ            pointed to by the index. Note that a zero value in an ind
 ex                                                              Ø
+ is perfectly valid.
                                           Ø
+ 
                      Ø1      ***** DUMP READING - LOCATING FIELDS IN A DUMP
+ *****      Page 33
 .Ø0  XIII. Finding File Problems.
                                                          Ø         A. A freq
+ uent cause of abend is due to incorrectly defined

                                     Ø            files in the COBOL program.
+  These problems can cause S013,
                Ø            S001, AND S002 ABENDS. If some simple system rul
ñes are                                                                   Ø
+          understood, these problems can be solved with much less
                                                    Ø            difficulty.
+ 
                               Ø
+ 
          âØ            1. The system OPEN routines use first the information
ä                                                                   Ø
+       supplied by the program, next information from the DD
                                              Ø               card, and final
+ ly information from the file label, if the
                         Ø               file already exists.  Note that noth
+ ing specified in the
    çØ               program can be overridden by a DD card, or the file
                                                             Ø
+ label. This is a source of confusion to programmers and
                                        Ø               operators, who tend t
+ o believe the DD card's DCB
                   Ø               information, as this can be seen easily, w
<hile the                                                                      
+Ø               program may not.
                                                       Ø
+ 
                                  Ø            2. A COBOL program always spec
+ ifies the RECFM and LRECL.
             Ø               ALWAYS! If the DCB information printed by Abend-
ãAID shows                                                             Ø
+          a RECFM or LRECL different from what you expect, look no
                                                 Ø               further, it'
+ s a program problem in which the recording
                            Ø               mode is incorrectly specified, or
+  a record is
       áØ               mis-defined. COBOL generates the recording mode (same
 as                                                              Ø
+    RECFM) by checking all the 01 record descriptions given.
                                           Ø               If they are all th
+ e same length, fixed is assumed. If
                      Ø               records of differing lengths are found,
+  variable is
 .Ø               assumed. If any record contains an occurs depending on
                                                          Ø               cla
+ use, variable is assumed. If your recording mode and

                                     Ø               COBOL's do not agree, CO
+ BOL will use his RECFM, and give
                Ø               you a warning diagnostic. If you do not write
ñ a recording                                                             Ø
+             mode clause in the FD, COBOL will not bother you with the
                                                    Ø               detail, b
+ ut will use the RECFM he found appropriate.
                               Ø               Always write the RECORDING MOD
+ E clause, and check your
          âØ               warning diagnostic messages.
ä                                                                   Ø
+ 
                                              Ø            3. COBOL always ge
+ nerates the LRECL, too. This is also done
                         Ø               by checking the 01 record descriptio
+ ns. If you provide a
    çØ               RECORD CONTAINS clause in the FD which does not agree
                                                             Ø
+ with COBOL's count, he will use his count, but give you a
                                        Ø               warning diagnostic.
+ Without the RECORD CONTAINS clause,
                   Ø               you get no warning message, so always incl
<ude this clause                                                               
+Ø               and check your warning diagnostic messages.
                                                       Ø
+ 
                                  Ø            4. COBOL will also generate a
+ BLKSIZE for your file, unless
             Ø               you specify BLOCK CONTAINS ZERO RECORDS (or CHAR
ãACTERS).                                                              Ø
+          The compiler will not accept a BLOCK CONTAINS ZERO clause
                                                 Ø               for indexed
+ sequential or variable-spanned files,
                            Ø               however, so the program always sp
+ ecifies BLKSIZE for
       áØ               these files. The most frequent problems with BLKSIZE
                                                                 Ø
+    occur when the BLOCK CONTAINS clause is omitted entirely.
                                           Ø               In this case, COBO
+ L assumes the file is unblocked, and
                      Ø               generates a program specification of BL
+ KSIZE equal to one
 .Ø               record. Remember that the program specified data cannot
                                                          Ø               be
+ overridden by JCL or file labels! Another problem

                                     Ø               occurs when a file is re
+ -blocked, and all the JCL is
                Ø               changed, but some program either omitted the
ñBLOCK                                                                    Ø
+             CONTAINS clause, or specified the old BLKSIZE in use
                                                    Ø               before th
+ e change.
                               Ø
+ 
          âØ1      ***** DUMP READING - LOCATING FIELDS IN A DUMP *****      P
äage 34                                                             Ø
+    5. Whenever you encounter S013, S001, or S002 abends first
                                              Ø               look at the pro
+ gram to determine what the DCB RECFM,
                         Ø               LRECL, and BLKSIZE should be, based
+ on what you see (or
    çØ               don't see) there. That will often solve the problem
                                                             Ø
+ immediately. Next, check the JCL to see that it is
                                        Ø               correct. Finally, che
+ ck the values printed in the file
                   Ø               information by Abend-AID. Now play compute
<r, and develop                                                                
+Ø               a set of RECFM, LRECL, and BLKSIZE that should have been
                                                       Ø               used.
+  Does the information printed by Abend-AID agree
                                  Ø               with your analysis? If not,
+  you've probably missed the
             Ø               problem, and it's in the program or JCL. If you
ãand                                                                   Ø
+          Abend-AID agree, list the dataset label. If tape, ask
                                                 Ø               operations f
+ or a header label dump.  If disk, use the
                            Ø               ISPF 3.4 with the ATTRIB option.
+ If the file was not
       áØ               created in the form you're trying to access it, that i
 s                                                               Ø
+    the problem. It is solved by correcting the mismatch.
                                           Ø
+ 
                                                                              
./ ADD NAME=TRANFILA 0102-92002-93071-1124-00004-00003-00000-USER02
0A00990074009300170100004200880101000200510064
**SUB1SUB2SUB3IIIINNNNJJJJMMMMIX1_INX1IX3_IX2_
**J=42: POINT TO INVALID DOCTOR-PROCEDURES-TOTAL (42)
**HOSPITAL ENTRY (IX2) IS GOOD
./ ADD NAME=TRANFILB 0103-92002-93071-1417-00004-00003-00000-USER02
0900350419002500350719004100320111006100710109
**SUB1SUB2SUB3IIIINNNNJJJJMMMMIX1_INX1IX3_IX2_
**IX3=71 FOR ENTRY WITH GROUP-CLAIMS-TOTAL (71) BAD.
**CLAIM ENTRY (SUB-3) IS GOOD
./ ADD NAME=TRANFIL1 0105-91351-92002-1532-00001-00005-00000-USER02
**NO TRANFIL DATA NEEDED FOR DUMP01
./ ADD NAME=TRANFIL2 0103-91353-92002-1533-00003-00004-00000-USER02
0105631121517900540!79063920070317000400710103
**SUB1SUB2SUB3IIIINNNNJJJJMMMMIX1_INX1IX3_IX2_
**INVALID VALUE FOR SUB-VALUE (5): 0!79
./ ADD NAME=TRANFIL3 0112-91353-92003-1006-00004-00001-00000-USER02
0201160300004500020015004400690021002800800029
**SUB1SUB2SUB3IIIINNNNJJJJMMMMIX1_INX1IX3_IX2_
**INDX1=0028 TO REFER TO INVALID CLAIM-TOTAL-CHARGES (INDX1)
**MMMM=0069 TO REFER TO GOOD GROUP-DOLLAR-TOTAL (M)
./ ADD NAME=TRANFIL4 0112-91353-92003-1103-00004-00001-00000-USER02
0400730061001500090005003100400023003901730033
**SUB1SUB2SUB3IIIINNNNJJJJMMMMIX1_INX1IX3_IX2_
**INDEX OUT OF RANGE: IX3 = 173 WHILE GROUP-TABLE HAS 172 ENTRIES.
**SUB-2 SET TO 61 FOR GOOD HOSPITAL TABLE ENTRY
./ ADD NAME=TRANFIL5 0103-91365-92003-1124-00004-00003-00000-USER02
0500290037011500330425003300060045010100070066
**SUB1SUB2SUB3IIIINNNNJJJJMMMMIX1_INX1IX3_IX2_
**HOSPITAL-NBR-PATIENTS (IX2) INVALID
**DOCTOR ENTRY (J=33) IS GOOD
./ ADD NAME=TRANFIL6 0104-91365-92003-1157-00004-00003-00000-USER02
0600040129000000020105040400008012002400270054
**SUB1SUB2SUB3IIIINNNNJJJJMMMMIX1_INX1IX3_IX2_
**SUB-3 = 0 MAKING HOSPITAL-PROCEDURES-TOTAL (SUB-3) INVALID.
**INDX1=24 REFERRING TO GOOD CLAIM ENTRY (24)
./ ADD NAME=TRANFIL7 0101-92002-92002-1539-00003-00003-00000-USER02
0700700049009202020039004300010113044202770154
**SUB1SUB2SUB3IIIINNNNJJJJMMMMIX1_INX1IX3_IX2_
**N=39 FOR ENTRY WITH DOCTOR-COST-TOTAL INVALID.
./ ADD NAME=TRANFIL8 0103-92002-93071-1432-00005-00003-00000-USER02
0800530194009200530179000000410782043100670213
**SUB1SUB2SUB3IIIINNNNJJJJMMMMIX1_INX1IX3_IX2_
**J=0, SUB1=I=53 TO SET UP DIVIDE BY ZERO
**DOCTOR-NUMBER-PATIENTS (I) IS ZERO
**GROUP-NBR-CLAIMS (IX3) IS GOOD
./ ADD NAME=TRANFIL9 0102-92002-93071-1124-00004-00003-00000-USER02
0301010173060300100022004100940025007100830063
**SUB1SUB2SUB3IIIINNNNJJJJMMMMIX1_INX1IX3_IX2_
**SUB-2 = 173: PAST END OF GROUP TABLE
**HOSPITAL ENTRY (IX2) IS GOOD
./ ADD NAME=UNSQUZ80 0100-02144-02144-1129-00226-00226-00000-BC0THOR
         TITLE '***** UNSQUZ80: EXPAND LONG RECS IN 80-BYTE FILE ****'
         PRINT NOGEN
UNSQUZ80 CSECT
UNSQUZ80 RMODE 24
UNSQUZ80 AMODE 24
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*   THIS PROGRAM COPIES AN INPUT FILE HAVING FIXED LENGTH 80-BYTE     *
* RECORDS CREATED AS PSEUDO-VARIABLE-SPANNED BY THE SQUEZE80 PROGRAM  *
* TO AN OUTPUT FILE HAVING THE SAME RECFM AND LRECL AS THE ORIGINAL   *
* FILE INPUT TO SQUEZE80. BLKSIZE IS AS SPECIFIED BY THE USER ON THE  *
* OUTPUT1 DD STATEMENT.                                               *
*                                                                     *
* THE FIRST RECORD IN THE FILE CONTAINS THE DSORG, RECFM, AND LRECL   *
* FIELDS FROM THE FILE INPUT TO THE SQUEZE80 RUN. THESE ARE USED TO   *
* SET UP THE OUTPUT1 DCB BEFORE IT IS OPENED.                         *
*                                                                     *
* EACH INPUT RECORD CONTAINS SOME PARTS OF ONE OR MORE RECORDS FROM   *
* THE ORIGINAL FILE INPUT TO SQUEZE80. THE FIRST TWO BYTES OF EACH    *
* INPUT RECORD DESCRIBES THE RECORD PART THAT FOLLOWS, THE FIRST BYTE *
* CONTAINING THE LENGTH OF THE PART, AND THE SECOND BYTE AN INDICATOR *
* WHICH IDENTIFIES THIS PART AS THE FIRST, LAST, OR AN INTERMEDIATE   *
* PART OF A RECORD. THIS PROGRAM PROCESSES SIMILARLY TO THE STANDARD  *
* IBM MACRF=GD, BY READING AND ASSEMBLING ALL THE PARTS OF A RECORD,  *
* THEN WRITING THE RECORD TO THE OUTPUT1 FILE.                        *
*                                                                     *
* AUTHOR R THORNTON    MAY 1986                                       *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*********************************************************************
*        SAVE REGISTERS, SET UP BASE REGS, CHAIN SAVE AREAS         *
*********************************************************************
         USING UNSQUZ80,R3,R4
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  SET UP BASE FIRST BASE REG
         LA    R4,4095(R3)             SET UP SECOND
         LA    R4,1(R4)                    BASE REGISTER
         LA    R15,MYSAVE              POINT TO MY REGISTER SAVE AREA
         ST    R15,8(R13)              SET LSA IN CALLER'S SAVE
         ST    R13,4(R15)              SET HSA IN MY SAVE AREA
         LR    R13,R15                 SET UP SAVE AREA POINTER
         B     START                   BRANCH AROUND CONSTANTS
         DC    CL8'UNSQUZ80'           PROGRAM NAME IDENTIFIER
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL8'&SYSTIME'           ASSEMBLY TIME
MYSAVE   DS    18F                     MY REGISTER SAVE AREA
*
START    OPEN  INPUT1            OPEN INPUT FILE
         GET   INPUT1,INPREC     READ FIRST RECORD
         MVC   OTRECFM,INPREC+1  RECFM TO OUTPUT DCB
         MVC   OTLRECL,INPREC+2  LRECL TO OUTPUT DCB
         MVC   LRECL,INPREC+2    LRECL TO LRECL SAVE AREA
         MVC   OTLEFT,INPREC+2   LRECL TO OUTPUT BYTES LEFT
         OPEN  (OUTPUT1,OUTPUT)  OPEN OUTPUT FILE
         LH    R0,OTLRECL        GET OUTPUT LRECL
         GETMAIN R,LV=(0)        GET OUTPUT RECORD STORAGE
         TM    OTRECFM,OTUNDEF   POSSIBLE VARIABLE RECORDS
         BNM   SVGOT             NO
         TM    OTRECFM,OTVRBL    IS IT VARIABLE?
         BZ    SVGOT             NO
         XC    0(4,R1),0(R1)     ZERO FIRST 4 BYTES
         LA    R1,4(R1)          ALLOW FOR RDW
SVGOT    ST    R1,OUTRECAD       SAVE OUTPUT RECORD ADDRESS
         LR    R7,R1             POINT TO OUTPUT RECORD
         GET   INPUT1,INPREC     READ SECOND RECORD
         LA    R6,INPREC         POINT TO INPUT RECORD
         USING INPDESC,R6
         TM    PARTYPE,FRSTPART  GOT FIRST PART OF RECORD
         BO    GOTREC            YES
         WTO   'UNSQUZ80: INPUT FILE DOES NOT BEGIN WITH FIRST PART',  X
               ROUTCDE=11
         ABEND 111,DUMP          TERMINATE WITH ERROR
*
*
*
MAINLINE GET   INPUT1,INPREC     READ NEXT INPUT RECORD
GOTREC   LA    R6,INPREC         POINT TO INPUT RECORD
         MVC   INLEFT,H78        SET INPUT REC BYTES LEFT
CKFIRST  TM    PARTYPE,FRSTPART  FIRST PART OF A RECORD?
         BZ    CKNULL            NO
         CLC   OUTLEN,H0         YES, IS THERE A RECORD IN PROGRESS?
         BE    STRTOUT           NO
         WTO   'UNSQUZ80: CURRENT RECORD HAS NO END PART',ROUTCDE=11
         ABEND 222,DUMP          TERMINATE WITH ERROR
STRTOUT  L     R7,OUTRECAD       YES, POINT TO CURRENT OUTPUT BYTE
         XC    OUTLEN,OUTLEN     INITIALIZE LENGTH FOR NEW RECORD
CKNULL   CLI   PARTLEN,0         REST OF RECORD EMPTY?
         BE    MAINLINE          YES
CKFIT    SR    R1,R1             CLEAR FOR INSERT
         IC    R1,PARTLEN        GET PART LENGTH
         CH    R1,OTLEFT         INPUT PART WILL FIT IN OUTPUT?
         BNH   MOVPART           YES
         WTO   'UNSQUZ80: INPUT WILL NOT FIT IN OUTPUT',ROUTCDE=11
         ABEND 333,DUMP
MOVPART  BAL   R9,PARTMOVE       GO MOVE PART TO OUTPUT, WRITE
         LH    R1,INLEFT         GET PART LENGTH
         LTR   R1,R1             TEST REMAINING LENGTH
         BZ    MAINLINE          IF NO MORE, GO READ AGAIN
         BP    CKFIRST           MORE, CHECK DESCRIPTOR
         WTO   'UNSQUZ80: NEGATIVE LENGTH COMPUTED',ROUTCDE=11
         ABEND 444,DUMP          TERMINATE IN ERROR
*
*        MOVE PART OF INPUT RECORD TO OUTPUT AREA, WRITE IF FULL
*
PARTMOVE BCTR  R1,0              COMPUTE MVC LENGTH CODE
         EX    R1,EXPTMOVE       MOVE DATA TO OUTPUT RECORD
         MVC   SAVTYPE,PARTYPE   SAVE PART TYPE
         LA    R1,1(R1)          REAL LENGTH AGAIN
         LH    R2,OTLEFT         DEDUCT BYTES
         SR    R2,R1                MOVED FROM
         STH   R2,OTLEFT               INPUT TO OUTPUT
         LH    R2,OUTLEN         ADD NBR BYTES
         AR    R2,R1                MOVED FROM
         STH   R2,OUTLEN               INPUT TO OUTPUT
         LH    R2,INLEFT         DEDUCT BYTES
         SR    R2,R1                MOVED FROM
         BZ    STORLEFT              .
         SH    R2,H1                 .
         BZ    STORLEFT              .
         SH    R2,H1                  INPUT TO OUTPUT PLUS
STORLEFT STH   R2,INLEFT                  DESCRIPTOR LENGTH
         AR    R7,R1             POINT TO NEXT OUTPUT BYTE
         LA    R6,2(R1,R6)       POINT TO NEXT INPUT BYTE
         TM    SAVTYPE,LASTPART  THIS LAST PART OF RECORD?
         BZ    MOVEXIT           NO
         TM    OTRECFM,OTUNDEF   UNDEFINED LENGTH RECORDS?
         BO    URECS             YES
         TM    OTRECFM,OTVRBL    VARIABLE LENGTH RECORDS?
         BO    VRECS             YES
         CLC   OUTLEN,LRECL      LENGTH CORRECT?
         BE    PNTREC            YES, O.K.
         WTO   'UNSQUZ80: WRONG LENGTH FOR FIXED RECORD',ROUTCDE=11
         ABEND 555,DUMP          ABNORMAL END
URECS    CLC   OUTLEN,LRECL      VALID LENGTH?
         BNH   SETULEN           YES
         WTO   'UNSQUZ80: UNDEFINED RECORD TOO LONG',ROUTCDE=11
         ABEND 666,DUMP          ABNORMAL END
SETULEN  MVC   OTLRECL,OUTLEN    SET LENGTH IN DCB
         B     PNTREC            GO WRITE RECORD
VRECS    L     R12,OUTRECAD      POINT TO OUTPUT RECORD DATA
         SH    R12,H4            BACK UP TO RDW
         LH    R1,OUTLEN         GET OUTPUT LENGTH
         LA    R1,4(R1)          ADD 4 FOR RDW
         CH    R1,LRECL          VALID LENGTH?
         BNH   SETVLEN           YES
         WTO   'UNSQUZ80: VARIABLE RECORD TOO LONG',ROUTCDE=11
         ABEND 777,DUMP          TERMINATE ABNORMALLY
SETVLEN  STH   R1,0(R1)          SET RDW LENGTH
         B     PUTREC            GO WRITE RECORD
PNTREC   L     R12,OUTRECAD      POINT TO OUTPUT RECORD
PUTREC   PUT   OUTPUT1,0(R12)    WRITE THE RECORD
         L     R7,OUTRECAD       POINT TO RECORD AREA
         XC    OUTLEN,OUTLEN     CLEAR LENGTH SO FAR
         MVC   OTLEFT,LRECL      SET OUTPUT REC BYTES LEFT
MOVEXIT  BR    R9                EXIT
EXPTMOVE MVC   0(1,R7),PARTDATA  EXECUTED MOVE
*
*        END OF JOB
*
EOJ      CLC   OUTLEN,H0         ANYTHING IN LAST OUTPUT RECORD?
         BE    EOJ1              NO
         WTO   'UNSQUZ80: LAST RECORD MISSING LAST PART',ROUTCDE=11
         ABEND 888,DUMP          TERMINATE ABNORMALLY
EOJ1     CLOSE (OUTPUT1,,INPUT1)   CLOSE FILES
         L     R13,4(R13)        POINT TO CALLER'S SAVE
         LM    R14,R12,12(R13)   RESTORE CALLER'S REGS
         SR    R15,R15           CLEAR RETURN CODE
         BR    R14               RETURN TO CALLER
*
*
*
OUTRECAD DC    A(0)               @ STORAGE FOR RECORD ASSEMBLY
INLEFT   DC    H'0'               INPUT RECORD BYTES LEFT
OTLEFT   DC    H'78'              OUTPUT RECORD BYTES LEFT
OUTLEN   DC    H'0'               OUTPUT LENGTH SO FAR
LRECL    DC    H'0'               OUTPUT LRECL
H0       DC    H'0'               CONSTANT 0
H1       DC    H'1'               CONSTANT 1
H2       DC    H'2'               CONSTANT 2
H4       DC    H'4'               CONSTANT 4
H78      DC    H'78'              CONSTANT 78
SAVTYPE  DC    X'00'              SAVE AREA FOR PART TYPE
INPREC   DS    CL80               INPUT RECORD
*
*
*
OUTPUT1  DCB   DSORG=PS,MACRF=PM,DDNAME=OUTPUT1
OTRECFM  EQU   OUTPUT1+36,1       RECFM
OTUNDEF  EQU   X'C0'              UNDEFINED
OTFIX    EQU   X'80'              FIXED
OTVRBL   EQU   X'40'              VARIABLE
OTLRECL  EQU   OUTPUT1+82,2       LRECL
INPUT1   DCB   DSORG=PS,MACRF=GM,DDNAME=INPUT1,EODAD=EOJ,              X
               RECFM=FB,LRECL=80
         LTORG
*
*        INPUT PART DESCRIPTOR DSECT
*
INPDESC  DSECT ,                 INPUT PART DESCRIPTION
PARTDESC DS    0XL2              PART DESCRIPTOR
PARTLEN  DS    XL1               PART DATA LENGTH (NOT INCL DESC)
PARTYPE  DS    XL1               PART TYPE FLAGS
FRSTPART EQU   X'80'             FIRST PART OF A RECORD
LASTPART EQU   X'01'             LAST PART OF A RECORD
PARTDATA DS    0X                PART DATA, 1-78 BYTES
UNSQUZ80 CSECT
*********************************************************************
*                REGISTER EQUATES                                   *
*********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
./ ADD NAME=UNSQZJOB 0101-02144-02149-1027-00022-00023-00000-BC0THOR
//BC0THORD JOB (1152002-9800039,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,
//   MSGCLASS=Y,NOTIFY=BC0THOR,REGION=104M
//JESOUT OUTPUT GROUPID=02A,DEFAULT=YES,JESDS=ALL,
//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG
//*******************************************************************
//*                 BC0THOR.PDS.JCL(UNSQUZ80)                       *
//* UNSQUEEZE A FILE CREATED BY THE SQUEZE80 PROGRAM INTO ITS       *
//* ORIGINAL FORM.                                                  *
//*******************************************************************
//*
//SCRATCH  EXEC PGM=IDCAMS
//SYSPRINT DD SYSOUT=*
//SYSIN    DD *
 DELETE BC0THOR.DEL.UNSQUEZD
//*
//*
//UNSQUZ80 EXEC  PGM=UNSQUZ80
//STEPLIB  DD    DSN=BC0THOR.LOAD.LOAD,DISP=SHR
//SYSUDUMP DD    SYSOUT=*
//INPUT1   DD    DSN=BC0THOR.DEL.SQUEEZED,DISP=SHR
//OUTPUT1  DD    DSN=BC0THOR.DEL.UNSQUEZD,DISP=(,CATLG),
//         UNIT=DISK,SPACE=(TRK,(60,10),RLSE)
